{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my notes on Programming and Software","text":"<p>This is a collection of my notes about Programming languages and tools (code formatters, linters, documentation, Makefiles) and software packages.</p> <p>These notes were originally a large number of text files, but have been  collected in a single repository and formatted using MkDocs.</p> <p>Antonio Villase\u00f1or (2021).</p>"},{"location":"documentation/doxygen/","title":"Doxygen","text":"<p>Doxygen is a tool to generate documentation from source code. It can be installed for macOS using a <code>dmg</code> file provided in the downloads page.</p>"},{"location":"documentation/doxygen/#doxygen-for-c-projects","title":"Doxygen for C projects","text":"<p>If Doxygen has been installed with a <code>dmg</code> file, the executable will be located in the <code>/Applications</code> folder. It is then useful to generate an alias for the executable so it can be run from the command line:</p> <pre><code>$ alias doxygen='/Applications/Doxygen.app/Contents/Resources/doxygen'\n</code></pre> <p>Go to source directory and generate configuration file:</p> <pre><code>$ cd src/project\n$ mkdir docs\n$ doxygen -g project.cfg\n</code></pre> <p>Edit <code>project.cfg</code> and change the following parameters:</p> <pre><code>35c35\n&lt; PROJECT_NAME           = \"C date-time\"\n---\n&gt; PROJECT_NAME           = \"My Project\"\n47c47\n&lt; PROJECT_BRIEF          = \"Utilities to handle dates and times using standard C structures and functions\"\n---\n&gt; PROJECT_BRIEF          =\n61c61\n&lt; OUTPUT_DIRECTORY       = /Users/antonio/Dropbox/src/tests/C_time/docs\n---\n&gt; OUTPUT_DIRECTORY       =\n208c208\n&lt; JAVADOC_BANNER         = YES\n---\n&gt; JAVADOC_BANNER         = NO\n272c272\n&lt; OPTIMIZE_OUTPUT_FOR_C  = YES\n---\n&gt; OPTIMIZE_OUTPUT_FOR_C  = NO\n464c464\n&lt; EXTRACT_ALL            = YES\n---\n&gt; EXTRACT_ALL            = NO\n</code></pre> <p>To search for source code in subdirectories:</p> <pre><code>RECURSIVE = YES\n</code></pre> <p>For Python use:</p> <pre><code>OPTIMIZE_OUTPUT_JAVA   = YES (instead of OPTIMIZE_OUTPUT_FOR_C)\n</code></pre> <p>To generate documentation:</p> <pre><code>$ doxygen project.cfg\n\n$ open docs/html/index.html\n</code></pre> <p>Example of documentation of a function:</p> <pre><code>/**\n ** @brief Print a @c timespec structure into a string using the ISO8601 format\n **\n ** ISO 8061 format is: YYYY-MM-DDTHH:MM:SS.FFFFFFFFF\n **\n ** @param[out]  sdate   string with date-time in ISO 8601 format\n ** @param[in]   ts      timespec structure containing a valid date-time\n */\n</code></pre>"},{"location":"documentation/doxygen/#doxygen-for-python-projects","title":"Doxygen for Python projects","text":"<p>Contrary to the official documentation, \"special commands\" are supported in docstrings. To do this the docstring must start with <code>\"\"\"!</code> (not tested!!!)</p> <p>Example:</p> <pre><code>def area(l, w):\n    \"\"\"! Calculate the area in sqm\n\n    @param l length \n    @param w width\n    @return area \n\n    @todo throw error if l&lt;0 or w&lt;0\n    \"\"\"\n    return l*w\n</code></pre>"},{"location":"documentation/latex/","title":"LaTeX","text":"<p>LaTeX is a powerful document creation software. It is particularly useful for long documents and also for displaying math.</p> <p>Documentation software such as <code>Mkdocs</code> and <code>Sphinx</code> accept LaTeX code.</p>"},{"location":"documentation/latex/#basic-document-structure","title":"Basic document structure","text":"<pre><code>% Preamble\n\\documentclass[12pt, a4paper]{article}\n\\usepackage[utf8]{inputenc}                      % not needed in modern LaTeX releases\n\\usepackage{authblk}\n\\usepackage{graphicx}\n\\graphicspath{ {Figures/} }\n\n% Title and author(s)\n\\title{Skeleton for LaTeX articles}\n\\author[1]{Antonio Villase\u00f1or}\n\\author[2,3]{Another Author}\n\\affil[1]{Institute of Marine Sciences (ICM), CSIC,\n Pg. Maritim de la Barceloneta 37-49, E-08003 Barcelona, Spain}\n\\affil[2]{Some Institute}\n\\affil[3]{Some University}\n\n\\date{\\today} % write today's date (default)\n\n% Body of the document with numbered and un-numbered sections and bibliography\n\\begin{document}\n\\maketitle\n\\newpage\n\n\\begin{abstract}\n\\end{abstract}\n\n\\section{Introduction}\n\n\\section{Data}\n\n\\section{Methods}\n\n\\section{Results}\n\n\\section{Discussion}\n\n\\section{Conclusions}\n\n\\section*{Data and Resources}                    % asterisk disables numbering of this section\n\n\\section*{Acknowledgments}\n\n\\bibliography{references}                        % generate reference list using file references.bib\n\n\\end{document}\n</code></pre>"},{"location":"documentation/latex/#preamble","title":"Preamble","text":"<p>Sets the type of document (article, book, etc), and all the packages that will be used.</p> <p>The first element is the document class. To create the simplest document use for example:</p> <pre><code>\\documentclass{minimal}\n\n\\begin{document}\n\nMinimal document.\n\n\\end{document}\n</code></pre> <p>Typical packages:</p> <ul> <li><code>geometry</code>: set page size and margins</li> <li><code>inputenc</code>: allows to use accented characters directly</li> <li><code>fontenc</code>: ?</li> <li><code>amsmath</code>, <code>amssymb</code>, <code>amsfonts</code>, <code>latexsym</code>: AMS symbols and math</li> <li><code>mathptmx</code>: use times as default font, and provide maths support (outdated?)</li> <li><code>authblk</code>: handle authors and affiliations</li> <li><code>babel</code>: use other languages</li> <li><code>lineno</code>: add line numbers</li> <li><code>graphicx</code>: handle figures (extended version of <code>graphic</code>)</li> </ul> <p>Example of a preamble using the above packages:</p> <pre><code>\\documentclass[a4paper, 12pt]{article}\n\\usepackage{amsmath,amssymb,amsfonts,latexsym}\n%\\usepackage[utf8]{inputenc}\n\\usepackage[latin1]{inputenc}\n\\usepackage[T1]{fontenc}               # better than default encoding OT1 (?)\n\\usepackage{authblk}\n\n\\usepackage{graphicx}\n\\graphicspath{ {Figures/} }\n\n\\usepackage{lineno}\n\\linenumbers\n\n</code></pre>"},{"location":"documentation/latex/#citations","title":"Citations","text":"<p>The standard LaTeX command <code>\\cite</code> does not have enough flexibility and should be avoided. Instead use the non-standard commands <code>\\citep</code> and <code>\\citet</code> provided by the <code>natbib</code> package.</p> <p>To use the <code>natbib</code> package, the following line must be added in the preamble:</p> <pre><code>\\usepackage[round, semicolon, sort&amp;compress, authoryear]{natbib} # round, semicolon, and authoryear are default options\n</code></pre> <p>To cite using textual notation as in: Allen (1978) use:</p> <pre><code>\\citet{Allen1978}\n</code></pre> <p>To cite using parenthetical notation as in: (Allen, 1978) use:</p> <pre><code>\\citep{Allen1978}\n</code></pre> <p>To cite between parenthesis with text after citation: (Allen, 1978, p. 100) use:</p> <pre><code>\\citep[p.~100]{Allen1978}\n</code></pre> <p>To cite between parenthesis with text before citation: (e.g., Allen, 1978) use:</p> <pre><code>\\citep[e.g.,][]{Allen1978}\n</code></pre> <p>To cite between parenthesis with text before and after citation: (see Allen, 1978, chap. 2) use:</p> <pre><code>\\citep[see][chap.~2]{Allen1978}\n</code></pre> <p>Commands <code>\\citep*{many_authors}</code> and <code>\\citet*{many_authors}</code> lists all the authors instead of the abbreviated list. E.g., (Johnson, Lewis, and Watson, 1990).</p>"},{"location":"documentation/mkdocs/","title":"MkDocs","text":"<p><code>MkDocs</code> is a Python package to generate documentation of software projects. It uses <code>Markdown</code> documents to generate the web pages. It is ideal for documenting the use of sofware packages, tutorials, and notes like these. Unlike other documentation packages (to my understanding), it does not extract information from the source code files.</p>"},{"location":"documentation/mkdocs/#installation-using-pipx","title":"Installation using <code>pipx</code>","text":"<p>The task of creating and activating an environment to install a Python app can be simplified using <code>pipx</code>. This tool installs and runs Python applications from isolated environments. Once installed, these applications can be run from the command line without the need to activate the environment. The virtual environments are usually in <code>~/.local/pipx/venvs</code> and the applications are soft links in <code>~/.local/bin</code>. This last directory must be included in the <code>$PATH</code> environmental variable.</p> <p>The applications are installed using the command <code>pipx install</code>:</p> <pre><code>$ pipx install mkdocs\n</code></pre> <p>Sometimes the applications require additional packages (e.g. to add some functionalities). It is  possible to install additional packages in an existing <code>pipx</code> application virtural environment using <code>pipx runpip</code>. To install the <code>python-markdown-math</code> package that adds math expressions using LaTeX:</p> <pre><code>$ pipx runpip mkdocs install python-markdown-math\n</code></pre> <p>To install the Material theme:</p> <pre><code>$ pipx runpip mkdocs install mkdocs-material\n</code></pre>"},{"location":"documentation/mkdocs/#installation-using-conda","title":"Installation using <code>conda</code>","text":"<pre><code>$ conda create -n mkdocs python=3.8\n$ source activate mkdocs\n$ pip install mkdocs\n$ pip install python-markdown-math\n$ pip install mkdocs-material\n\n$ mkdocs --version\nmkdocs, version 1.1.2 from /Users/antonio/opt/anaconda3/envs/mkdocs/lib/python3.8/site-packages/mkdocs (Python 3.8)\n</code></pre>"},{"location":"documentation/mkdocs/#getting-started","title":"Getting started","text":"<p>To create a directory for documentation files:</p> <pre><code>$ mkdocs new mkdocs_test\nINFO    -  Creating project directory: mkdocs_test\nINFO    -  Writing config file: mkdocs_test/mkdocs.yml\nINFO    -  Writing initial docs: mkdocs_test/docs/index.md\n</code></pre> <p>creates a directory called <code>mkdocs_test</code> with the following files:</p> <pre><code>mkdocs.yml\ndocs/\ndocs/index.md\n</code></pre> <p>To create documetation files in an existing directory:</p> <pre><code>$ cd my_project\n$ mkdocs new .\nINFO    -  Writing config file: ./mkdocs.yml\nINFO    -  Writing initial docs: ./docs/index.md\n</code></pre> <p>Originally the <code>mkdocs.yml</code> file contains only the following line:</p> <pre><code>site_name: My Docs\n</code></pre> <p>Initially the <code>docs/index.md</code> file contains the following:</p> <pre><code># Welcome to MkDocs\n\nFor full documentation visit [mkdocs.org](https://www.mkdocs.org).\n\n## Commands\n\n* `mkdocs new [dir-name]` - Create a new project.\n* `mkdocs serve` - Start the live-reloading docs server.\n* `mkdocs build` - Build the documentation site.\n* `mkdocs -h` - Print help message and exit.\n\n## Project layout\n\n    mkdocs.yml    # The configuration file.\n    docs/\n        index.md  # The documentation homepage.\n        ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"documentation/mkdocs/#to-create-web-page-and-server","title":"To create web page and server","text":"<pre><code>$ mkdocs serve &amp;\n$ open http://127.0.0.1:8000/\n</code></pre> <p>This allows to preview web page as you work on it (the web page is automatically refreshed)</p> <p>When done, to generate the web site:</p> <pre><code>$ mkdocs build\n</code></pre> <p>This creates a directory named <code>site</code> that contains many other directories and files such as <code>index.html</code>, <code>css/</code>, ...</p> <pre><code>$ mkdocs build --clean  # removes unused files\n</code></pre> <p>If you don't want to keep it in git, edit <code>.gitignore</code> and add:</p> <pre><code>site/\n</code></pre> <p>Documentation web page can be deployed to GitHub pages. You have to go to the top directory of the repository (where <code>mkdocs.yml</code> is located) and type:</p> <pre><code>$ mkdocs gh-deploy\n</code></pre>"},{"location":"documentation/mkdocs/#editing-basic-files-and-adding-pages","title":"Editing basic files and adding pages","text":"<ul> <li> <p>Change site_name in mkdocs.yml: site_name: My Docs</p> </li> <li> <p>Add pages</p> </li> </ul> <p>$ curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' &gt; docs/about.md</p> <p>This adds an \"About\" pull down menu from main page.</p> <ul> <li>Specify pull down menus and menu names in mkdocs.yml (add nav: - do not used tabs for indentation!)   MkDocs creates menu items from file names in docs/ directory, but it is better to specify it explicitly   in mkdocs.yml</li> </ul> <pre><code>site_name: C++ test programs and libraries\n\nnav:\n    - Home: index.md\n    - About: about.md\n    - Tutorials: tutorials.md\n    - Parameters: parameters.md\n#theme: readthedocs\n</code></pre> <p>Each section can have subsections. Names (section and Markdown files) can be between single quotes.</p>"},{"location":"documentation/mkdocs/#deploy-documentation-to-github","title":"Deploy documentation to GitHub","text":"<p>In GitHub create a repository PStomo_documentation and initialize it with a README</p> <p>Clone repository into local machine:</p> <pre><code>$ git clone https://github.com/avillasenorh/PStomo_documentation.git\n</code></pre> <p>Copy mkdocs.yml and docs/ to local repository</p> <pre><code>$ cp -r mkdocs.yml docs ..../PStomo_documentation/.\n</code></pre> <p>Generate site</p> <pre><code>$ cd PStomo_documentation\n$ mkdocs build [--clean]\n\n$ git add -A\n$ git commit -m \"Initial build\"\n$ git push\n\n$ mkdocs gh-deploy\n</code></pre> <p>Creates web site: https://avillasenorh.github.io/PStomo_documentation/</p>"},{"location":"documentation/mkdocs/#add-math-equations-to-mkdocs","title":"Add math equations to MkDocs","text":"<p>To add the capability of displaying mathematical equations, the <code>python-markdown-math</code> package is required.</p> <p>The file <code>mkdocs.yml</code> must be edited so it can use the Markdownn extensions from this package. This is done adding the following lines:</p> <pre><code>site_name: My Docs\n\nextra_javascript:\n    - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS-MML_HTMLorMML\n\nmarkdown_extensions:\n    - mdx_math\n</code></pre> <p>WARNING: version of <code>mathjax</code> changes, so using an older version might be incompatible with newer versions of MkDocs.</p> <p>Test web page editing docs/index.md:</p> <pre><code># MathJax Test Page\n\nWhen \\(a \\ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\n</code></pre> <p>Produces the following output:</p> <p>When , there are two solutions to  and they are  </p>"},{"location":"documentation/mkdocs/#resources","title":"Resources","text":"<ul> <li>The best MkDocs plugins and customizations</li> <li>Mermaid diagrams using text and code   (GitHub)</li> <li>Material for MkDocs</li> <li>MkDocs is the Perfect Open Source Documentation Software</li> <li>MkDocs Wiki</li> <li>MkDocs GitBook theme</li> <li>MkDocs plugins</li> <li>mkdocstrings</li> </ul>"},{"location":"documentation/sphinx/","title":"Sphinx","text":"<p><code>Sphinx</code> is a Python package to generate documentation of software projects. By default it uses <code>rst</code> format but now it can also use <code>Markdown</code>. does not extract information from the source code files.</p>"},{"location":"documentation/sphinx/#installation-using-pipx","title":"Installation using <code>pipx</code>","text":"<pre><code>$ pipx install sphinx  # check\n</code></pre> <p>Sometimes the applications installed with <code>pipx</code> require additional packages (e.g. to add some functionalities, such as additional themes, ...). It is  possible to install additional packages in an existing <code>pipx</code> application using <code>pipx runpip</code>. To install the <code>myst-parser</code> package that adds capability to use <code>Markdown</code> documents:</p> <pre><code>$ pipx runpip sphinx install myst-parser\n</code></pre> <p>Other useful packages art the Read the Docs and Furo themes:</p> <pre><code>$ pipx runpip sphinx install sphinx_rtd_theme\n$ pipx runpip sphinx install furo\n</code></pre> <p>To use Markdown and Read the Docs theme:</p> <pre><code>import sphinx_rtd_theme\n\n...\n\nextensions = [\n    \"myst_parser\",\n    \"sphinx_rtd_theme\",\n]\n...\n\nhtml_theme = \"sphinx_rtd_theme\"\n\n</code></pre> <p>To use the Furo theme simply:</p> <pre><code>html_theme = \"furo\"\n</code></pre>"},{"location":"documentation/sphinx/#changing-from-restructuredtext-to-markdown","title":"Changing from reStructuredText to Markdown","text":"<p>Once added the <code>myst_parser</code> extension in <code>conf.py</code> we can change <code>index.rst</code> for <code>index.md</code>.</p> <p>An initial file <code>index.rst</code> looks like:</p> <pre><code>.. test documentation master file, created by\n   sphinx-quickstart ...\n\nWelcome to test's documentation!\n================================\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n</code></pre> <p>The equivalent Markdown file <code>index.md</code> would be:</p> <pre><code>% test documentation master file, created by\n% sphinx-quickstart\n\n# Welcome to test's documentation!\n\n```{toctree}\n:maxdepth: 2\n:caption: \"Contents:\"\n```\n\n# Indices and tables\n\n- {ref}`genindex`\n- {ref}`modindex`\n- {ref}`search`\n\n</code></pre> <pre><code>\n\n\n## Inserting figures\n\nLocal and remote figures can be inserted using standard Markdown syntax:\n\n```markdown\n![remote logo here](https://..../logo.png)\n\n![local logo here](logo.png)\n</code></pre> <p>Myst-Sphinx also allows more options but first you need to add and extension in <code>conf.py</code>:</p> <pre><code>myst_enable_extensions = [\n    \"colon_fence\",\n]\n</code></pre> <p>You can use rest:</p> <pre><code>```{image} logo.png\n:alt: local logo here\n:class: bg-primary\n:width: 200px\n:align: center\n```\n</code></pre> <p>You can also use HTML:</p> <pre><code>:::{figure-md} logo-target\n:class: myclass\n\n&lt;img src=\"logo.png\" alt=\"local logo here\" class=\"bg-primary\" width=\"300px\"&gt;\n\nHere Python logo\n:::\n</code></pre>"},{"location":"documentation/sphinx/#download","title":"Download","text":"<p>You can download the file <code>logo.png</code> for offline use.</p> <pre><code>{download}`logo.png`\n\n{download}`the logo &lt;logo.png&gt;`\n</code></pre> <p>Normal markdown link text</p> <p>this  gets the text from the linked document title</p>"},{"location":"documentation/sphinx/#some-roles","title":"Some roles","text":"<p>Define role somewhere in your documents as:</p> <pre><code>(investors)=\n</code></pre> <p>Then use this to refer to</p> <pre><code>{ref}`investors`\n</code></pre> <p>This might work to change your linked text:</p> <pre><code>{ref}`another text &lt;investors&gt;`\n</code></pre>"},{"location":"documentation/sphinx/#code-blocks","title":"Code blocks","text":"<p>Normal markdown:</p> <pre><code>```python\nprint(\"hola\")\n```\n</code></pre> <p>myst</p> <pre><code>```{code-block} python\n:linenos:\nprint(\"hola\")\n```\n</code></pre> <p>Code from file:</p> <p>This includes the entire file:</p> <pre><code>```{literalinclude} my_file.py\n```\n</code></pre> <p>For more options:</p> <pre><code>```{literalinclude} my_file.py\n:emphasize-lines: 2-3\n```\n</code></pre>"},{"location":"gmt/gmt5/","title":"GMT5","text":"<p>Recipes for GMT5</p>"},{"location":"gmt/gmt5/#initial-configuration","title":"Initial configuration","text":"<pre><code>$ gmt defaults &gt; gmt.conf\n</code></pre> <p>Reduce fonts sizes (defaults too large)</p> <pre><code>#\n# FONT Parameters\n#\nFONT_ANNOT_PRIMARY             = 10p,Helvetica,black\nFONT_ANNOT_SECONDARY           = 12p,Helvetica,black\nFONT_LABEL                     = 14p,Helvetica,black\nFONT_LOGO                      = 8p,Helvetica,black\nFONT_TITLE                     = 14p,Helvetica,black\n</code></pre> <p>Set map frame to plain</p> <pre><code>MAP_FRAME_TYPE                 = plain\n</code></pre>"},{"location":"gmt/gmt5/#specifying-line-sytle","title":"Specifying line sytle","text":"<p>Line style is specified with the <code>-W</code> option:</p> <pre><code>    -Wwidth,color,style\n</code></pre> <p>Values of <code>width</code> can be: <code>thinnest</code> (0.25p), <code>thinner</code> (0.5p), <code>thin</code> (0.75p), or <code>thick</code> (1p).</p> <ul> <li> <p><code>color</code> can be specified with name or R/G/B</p> </li> <li> <p><code>style</code>:</p> <ul> <li><code>dott[ed]</code> or <code>.</code></li> <li><code>dash[ed]</code> or <code>-</code></li> <li><code>dotdash</code> or <code>.-</code></li> <li><code>dashdot</code> or <code>-.</code></li> <li><code>string:offset</code> (e.g. <code>4_8_5_8:2p</code>)</li> </ul> </li> </ul> <p>For more complex line styles we can also used the annotated line symbol <code>-Sq</code></p>"},{"location":"gmt/gmt5/#pstext-format","title":"pstext format","text":"<pre><code>$ gmt pstext -J -R -F+f12p,Helvetica,black+jLB -W1.5p -G255 -K -O\n</code></pre> <p>f: 12p font size    Helvetica font    black color j: theJustify LB (left bottom)</p> <p>a: angle</p> <p>-W1.5p = outline -Gwhite (255) = box background</p> <p>-D0.3/0.3  = add offset from x,y coordinates (e.g. lower left corner)</p>"},{"location":"gmt/gmt5/#psscale-format","title":"psscale format","text":"<pre><code>$ gmt psscale -Cvp.cpt -Dx8c/-1c+w12c/0.5c+jTC+h+e -Bx+l\"label\"\n</code></pre> <p>x8c/-1c = plot scale at fixed plot coordinates 8c/1c w12c/0.5c = scale size is 12c long by 0.5c wide jTC = justification is top-center h = plot a horizontal scale e = plot end triangles</p>"},{"location":"gmt/gmt5/#close-a-gmt-postscript-file","title":"Close a GMT Postscript file","text":"<pre><code>$ gmt psxy -R -J -T -O &gt;&gt; $psfile\n</code></pre>"},{"location":"gmt/gmt5/#set-label-with-decimal-degrees","title":"Set label with decimal degrees","text":"<pre><code>gmt set FORMAT_GEO_MAP             ddd.xF\n</code></pre>"},{"location":"gmt/gmt5/#new-label-format","title":"New label format","text":"<pre><code>-B[p|s][x|y|z][a|f|g]&lt;tick&gt;[m][l|p]\n-B[p|s][x|y|z][+l&lt;label&gt;][+p&lt;prefix&gt;][+u&lt;unit&gt;]\n-B[&lt;axes&gt;][+b][+g&lt;fill&gt;][+o&lt;lon&gt;/&lt;lat&gt;][+t&lt;title&gt;]\n</code></pre> <p>Examples:</p> <pre><code>-Bxa${xa}f${xt}g${xg} -Bya${ya}f${yt}g${yg}${axis} -BWeSn+t\"${label}\"\n\n-Bxa${xa}f${xt}g${xg}+l\"x label\" -Bya${ya}f${yt}g${yg}+l\"y label\" -BWeSn+t\"${label}\"\n</code></pre>"},{"location":"gmt/gmt5/#make-water-semitransparent","title":"Make water semitransparent","text":"<pre><code>gmt pscoast ... -S200 -t30\n</code></pre> <p>Then must convert to pdf in order to see transparency</p>"},{"location":"gmt/gmt5/#pens-transparency-etc-not-tested","title":"Pens, transparency, etc (not tested!!!!)","text":"<p>-W0.25p+s : interpolates curve with splines!</p> <p>-t : transparency for this layer (command?). Only visible in PDF format =&gt; use psconvert 0 = opaque 100 = fully transparent</p> <p>chech PS_TRANSPARENCY in gmt.def color or fill specifications may append @transparency to change the PDF transparency level</p>"},{"location":"gmt/gmt5/#convert-shapefile-to-gmt","title":"Convert shapefile to GMT","text":"<p>Directly:</p> <pre><code>$ org2ogr -f \u201cGMT\u201d output.gmt input.shp\n</code></pre> <p>In two steps (in case direct conversion gives an error, e.g. Vectors not supported)</p> <pre><code>$ ogr2ogr -f \u201cKML\u201d example.kml example.shp\n$ org2ogr -f \u201cGMT\u201d example.gmt example.kml\n</code></pre>"},{"location":"gmt/gmt5/#gmt2kml","title":"gmt2kml","text":"<p>Simple symbols:</p> <pre><code>awk '{print $3, $2}' stafile | \\\ngmt gmt2kml -Gfred -Fs -I$icon -T\"Title\" &gt; stations.kml\n</code></pre> <p>Symbols with labels:</p> <pre><code>awk '{print $3, $2}' stafile | \\\ngmt gmt2kml -Gfred -Fs -N- -I$icon -T\"Title\" &gt; stations.kml\n\nawk '{print $3, $2}' stafile | \\\ngmt gmt2kml -Fs -Sc1.5 -Gfgreen -I$icon -N- -Sn0.8 -Gnpink -T\"Title\" &gt; stations.kml\n</code></pre> <p>-Fs -Sc1.5 -Gfgreen: plot symbol (x,y in file), size and fill</p> <p>-N- -Sn0.75 -Gngray: label in 3rd column, size (relative to 1), fill color</p> <p>-Gn- : turn off labels [works?]</p> <p>-Fs = symbol   : x y [label]</p> <p>-Fe = event    : x y [label] time</p> <p>-Ft = timespan : x y [label] tstart tstop/\"NaN\"</p> <p>-Fl = line</p> <p>-Fp = polygon</p> <p>-Fw = wiggle</p> <p>For stations/OBSs one could use -As0.0 to get altitude \"Clamped to sea floor/ground\" [works?] (see https://developers.google.com/kml/documentation/altitudemode)</p> <p>For Clamped to sea floor to work must change:</p> <pre><code>&lt;kml xmlns=\"http://www.opengis.net/kml/2.2\"&gt;\n</code></pre> <p>with:</p> <pre><code>&lt;kml xmlns=\"http://www.opengis.net/kml/2.2\"\n        xmlns:gx=\"http://www.google.com/kml/ext/2.2\"&gt;\n</code></pre> <p>To get rid of subfolders in kml file, comment or delete everything between  and first : <pre><code>&lt;/Style&gt;\n  &lt;Folder&gt;\n    &lt;name&gt;stdin&lt;/name&gt;\n    &lt;Folder&gt;\n      &lt;name&gt;Point Set 0&lt;/name&gt;\n        &lt;Placemark&gt;\n</code></pre> <p>and also closing tags </p> <p>List of Google Maps icons:</p> <ul> <li>triangle</li> <li>donut</li> <li>square</li> <li>open-diamond</li> <li>polygon</li> <li>star</li> <li>target</li> <li>volcano</li> <li>earthquake</li> <li>placemark_circle</li> <li>placemark_circle_highlight</li> <li>placemark_square</li> <li>placemark_square_highlight</li> </ul>"},{"location":"gmt/gmt6/","title":"GMT6","text":""},{"location":"gmt/gmt6/#differences-to-previous-versions","title":"Differences to previous versions","text":"<ul> <li>Modern mode</li> <li>Default: use <code>.nc</code> extension for netCDF grids instead of old-style native grid format <code>.grd</code></li> </ul>"},{"location":"gmt/gmt6/#initial-configuration","title":"initial configuration","text":"<pre><code>$ gmt defaults -D &gt; ~/gmt.conf\n</code></pre> <p>Reduce fonts sizes (defaults too large)</p> <pre><code>#\n# FONT Parameters\n#\nFONT_ANNOT_PRIMARY             = 10p,Helvetica,black\nFONT_ANNOT_SECONDARY           = 12p,Helvetica,black\nFONT_LABEL                     = 14p,Helvetica,black\nFONT_TITLE                     = 14p,Helvetica,black\n</code></pre> <p>Set map frame to plain</p> <pre><code>MAP_FRAME_TYPE                 = plain\n</code></pre>"},{"location":"gmt/gmt6/#subplots","title":"subplots","text":"<pre><code>gmt set GMT_COMPATIBILITY 6\ngmt set FORMAT_GEO_MAP ddd.x\n\nplot_size=\"?\"\n\ngmt begin location ps\n\n   gmt subplot begin 3x1 -Ff16c/25c -A\n\n      gmt coast -JM${plot_size} -R... -Bx... -By... -BWeSn -Df ...\n\n      gmt coast -JM${plot_size} -R... -Bx... -By... -BWeSn -Df ... -c\n\n      gmt coast -JM${plot_size} -R... -Bx... -By... -BWeSn -Df ... -c\n\n   gmt subplot end\n\ngmt end show\n</code></pre>"},{"location":"gmt/gmt6/#get-region-from-a-netcdf-grid-file","title":"Get region from a netCDF grid file","text":"<pre><code>gmt grdinfo grid_file -I-\n</code></pre>"},{"location":"gmt/gmt6/#color-palette","title":"Color palette","text":"<pre><code>gmt colorbar -DJMR -By+l\"meters\" -B1000 # if you set -Ccpt previously you don't have to set it here\n</code></pre>"},{"location":"gmt/gmt6/#earth-relief-grids","title":"Earth Relief Grids","text":"<p>GMT6 global earth relief grids page.</p> <p>To extract topography/bathymetry of a region:</p> <pre><code>$ gmt grdcut @earth_relief_rru -Rlon1/lon2/lat1/lat2 -Goutput.nc\n</code></pre> <p>u = s for seconds, m for minutes, d for degrees</p> <ul> <li>01s = SRTM1S (30 m)</li> <li>03s = SRTM3S (90 m)</li> <li>15s = SRTM15+V2 (Tozer et al., Earth Space Sci., 2019) (~450 m)</li> </ul> <p>The rest are downsampled versions of 15s</p> <ul> <li>30s =  ~ 1 km</li> <li>1m = 1.8 km</li> </ul> <p>With grids &gt;= 15s the global file is downloaded to <code>~/.gmt/server</code>. With grids 03s and 01s, only the tiles inside the region are donwloaded.</p> <p>To delete all the data in <code>~/.gmt/server</code>:</p> <pre><code>$ gmt clear data\n</code></pre> <p>All global grids are gridline-registered except the 15s that is pixel-registered (check!!)</p>"},{"location":"gmt/gmt6/#ilumination-for-earth-relief-grids","title":"Ilumination for Earth Relief Grids","text":"<pre><code>$ gmt grdimage grid_file -I+nt.4 -Ccpt_file\n</code></pre>"},{"location":"gmt/gmt6/#options-for-grdcontour","title":"Options for <code>grdcontour</code>","text":"<p>Plot contours only larger that 100 km</p> <pre><code>- Q100k\n</code></pre> <p>Set contour interval </p> <pre><code> -C1000  -Wcthinnest,blue                             # contours without annotations\n -A1000  -Wathin,black                                # contours with annotations\n</code></pre>"},{"location":"gmt/gmt6/#file-formats","title":"File Formats","text":"<p>GMT6 file formats page.</p>"},{"location":"gmt/gmt6/#grid-files","title":"Grid files","text":"<p>Default = netCDF (.nc extension)</p>"},{"location":"gmt/pygmt/","title":"pyGMT","text":""},{"location":"gmt/pygmt/#common-usage","title":"Common usage","text":"<pre><code>import pygmt\n\nfig = pygmt.Figure()\n\nfig.coast(region='g', projection='R20/8i', shorelines=True,\n          water='ligthblue', land='gray', frame=True, resolution='i')\n\nfig.show()                                   # for notebooks\nfig.show(method='external')                  # output in Preview\n</code></pre> <p>How to set plotting region:</p> <pre><code>region = [45, 55, 135, 145]     # rectangular region\nregion = 'g'                    # globe\nregion = 'EG'                   # country (Egypt)\n</code></pre> <pre><code>fig.plot(x=, y=, style='a0.2i', color='red', pen='black', label=f'red')\n\nframe=True\nframe=0        # also False?\nframe='a5f1'\n</code></pre> <p>If the data are labelled:</p> <pre><code>fig.legend()       # plots a legend similar to Matplotlib\n</code></pre>"},{"location":"gmt/pygmt/#pass-arguments-to-a-figure-method","title":"Pass arguments to a Figure method","text":"<pre><code>KWARGS = dict(grid='@earth_relief_10m', region='g', projection='R-130/5i', frame=0, )\n\nfig = pygmt.Figure()\nfig.grdimage(**KWARGS)\n\nfig.grdimage(shading=True, **KWARGS)\n</code></pre> <p><code>grdimage</code> can also use an object to plot (not necessarily a file name):</p> <pre><code>import xarray as xr\ndata = xr.DataArray(....)\n\nfig.grdimage(data, fname=True, ..., cmap='inferno', Q=True) # Q=True in NaN make it transparent\n\nfig.colorbar(frame='+l\"velocity\"')\n</code></pre>"},{"location":"gmt/pygmt/#modules-not-available-in-pygmt","title":"Modules not available in pyGMT:","text":"<pre><code>with pygmt.clib.Session() as session:\n    session.call_module('meca', f'all the options here')\n</code></pre> <p>there is a trick to create a temporary file, use it and delete it.</p> <pre><code>with pygmt.helpers.GMTTempFile() as temp_file:\n    with open(temp_file.name, 'w') as f:\n        f.write('vaules')\n    with pygmt.clib....\n        uset temp_file.name in arguments to session.call_module(....)\n</code></pre>"},{"location":"macos/admin/","title":"Admin","text":""},{"location":"macos/admin/#boot-modes","title":"Boot modes","text":""},{"location":"macos/admin/#wd-mycloud-nas","title":"WD MyCloud NAS:","text":"<p>Finder &gt; Connect to server (cmd + k) smb://wdmycloud</p>"},{"location":"macos/admin/#disk-utility-old","title":"Disk Utility (old)","text":"<p>Disk Utility has many formats:</p> <ul> <li>OS X Extended (Journaled): for casual Mac user</li> <li>OS X Extended (Case-sensitive, Journaled): for using with Mac Servers</li> <li>MS-DOS (FAT): outdated MS file system, can be used for PC/Mac compatibility but with files less than 4Gb</li> <li>ExFAT: more modern MS file system any file size can be used</li> </ul> <p>It also has schemes for when you erase a drive:</p> <ul> <li>GUID Partition Map (modern Macs and Windows PC)</li> <li>Master Boot Record (old Windows PC)</li> <li>Apple Partition Map (old PowerPC Macs)</li> </ul>"},{"location":"macos/admin/#command-line-settings","title":"Command line settings","text":"<p>Remove the Auto-Hide Dock Delay:</p> <pre><code>$ defaults write com.apple.Dock autohide-delay -float 0 &amp;&amp; killall Dock\n</code></pre> <p>Make Hidden App Icons Translucent in the Dock:</p> <pre><code>$ defaults write com.apple.Dock showhidden -bool YES &amp;&amp; killall Dock\n</code></pre> <p>Stop Full Names from Copying with Email Addresses in OS X Mail:</p> <pre><code>$ defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false\n</code></pre> <p>Enable Text Selection in Quick Look Windows: (does not work in El Capitan)</p> <pre><code>$ defaults write com.apple.finder QLEnableTextSelection -bool TRUE;killall Finder\n</code></pre> <p>(El Capitan) Hide sidebar in Preview when opening a file</p> <pre><code>$ cd ~/Library/Containers/com.apple.Preview/Data/Library/Preferences/\n$ defaults write com.apple.Preview PVPDFSuppressSidebarOnOpening true\n</code></pre> <p>Always Show Hidden Files in the Finder:</p> <pre><code>$ defaults write com.apple.finder AppleShowAllFiles -bool YES &amp;&amp; killall Finder\n</code></pre> <p>or</p> <pre><code>$ defaults write com.apple.finder AppleShowAllFiles True; killall Finder \n$ defaults write com.apple.finder AppleShowAllFiles False; killall Finder (to restore)\n</code></pre> <p>Hide Desktop Icons Completely:</p> <pre><code>$ defaults write com.apple.finder CreateDesktop -bool false &amp;&amp; killall Finder\n</code></pre> <p>Change the Default Screen Shot Image Type:</p> <pre><code>$ defaults write com.apple.screencapture type jpg &amp;&amp; killall SystemUIServer\n</code></pre> <p>Set Plain Text As The Default Format In TextEdit</p> <pre><code>$ defaults write com.apple.TextEdit RichText -int 0\n</code></pre> <p>Prevent Textedit from saving by default to iCloud</p> <pre><code>$ defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false\n</code></pre> <p>Override the auto-detection performed by setting `force.LANG' defaults setting if you use a non-standard setup (e.g. different language than formats)</p> <pre><code>$ defaults write org.R-project.R force.LANG en_US.UTF-8\n</code></pre> <p>Show only open apps in dock</p> <pre><code>$ defaults write com.apple.dock static-only -bool TRUE; killall Dock\n$ defaults write com.apple.dock static-only -bool FALSE; killall Dock  # restore to original state\n</code></pre> <p>Stop Adobe Creative Cloud app form auto-launching on login (loaded by default on <code>/Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist</code>)</p> <pre><code>$ launchctl unload -w /Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist\n</code></pre> <p>to set it back again:</p> <pre><code>$ launchctl load -w /Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist\n</code></pre> <p>Set, disable, and check sleep status</p> <pre><code>$ sudo systemsetup -setcomputersleep 60\n$ sudo systemsetup -setcomputersleep Never\n$ sudo systemsetup -getcomputersleep\nComputer Sleep: Never\n</code></pre>"},{"location":"macos/admin/#mysql-on-macos","title":"MySQL on macOS","text":"<p>Install MySQL on a Mac OX X</p> <p>Get the appropriate DMG file from: http://dev.mysql.com/downloads/mysql/</p> <p>If you need MySQL for PQLX make sure that you get a Development Release if not Generally Available (GA) Releases are ok</p> <p>Click on the pkg installer and follow the instructions</p> <p>To start the MySQL server, launch System Preferences</p> <p>Uninstall MySql on a Mac OS X</p> <p>http://community.jaspersoft.com/wiki/uninstall-mysql-mac-os-x</p> <p>To completely uninstall MySql OS X it is neccessary to remove numerous files.</p> <p>Symptom: You unable to install an older version of MySql even though you thought you have removed everything.</p> <p>Resolution: To uninstall MySQL and completely remove it (including all databases) from your Mac do the following:</p> <p>Open a terminal window Use mysqldump to backup your databases to text files! Stop the database server (e.g. System Preferences)</p> <pre><code>sudo rm /usr/local/mysql\nsudo rm -rf /usr/local/mysql*\nsudo rm -rf /Library/StartupItems/MySQLCOM\nsudo rm -rf /Library/PreferencePanes/My*\n</code></pre> <p>edit /etc/hostconfig and remove the line MYSQLCOM=-YES-</p> <pre><code>rm -rf ~/Library/PreferencePanes/My*\nsudo rm -rf /Library/Receipts/mysql*\nsudo rm -rf /Library/Receipts/MySQL*\nsudo rm -rf /private/var/db/receipts/*mysql*\n</code></pre> <p>The last three lines are particularly important as otherwise, you can't install an older version of MySQL even though you think that you've completely deleted the newer version!  </p>"},{"location":"macos/installation/","title":"Installation","text":"<p>macOS Catalina (January 2020)</p> <ul> <li> <p>Updates</p> </li> <li> <p>Change preferences</p> <ul> <li>Dock &gt; Position on screen: Left</li> <li>Dock &gt; Minimize windows into application icon </li> <li>Mouse &gt; Secondary click (Click on right side)</li> <li>Siri &gt; Do not show in menu bar</li> <li> <p>Language &amp; Region &gt; Advanced: change decimal character to \".\"</p> </li> <li> <p>Finder &gt; Preferences &gt; Advanced &gt; Show all filename extensions</p> </li> <li>Finder &gt; Preferences &gt; Advanced &gt; Do not show warning changing extensions</li> <li> <p>Finder &gt; Preferences &gt; Advanced &gt; Keep folders on top when sorting by name</p> </li> <li> <p>Finder &gt; Preferences &gt; Show Hard disks (add HDD to sidebar and hide Hard disks again)</p> </li> <li>Finder &gt; Preferences &gt; Do not show CDs, DVDs, and iPods</li> <li>Finder &gt; Preferences &gt; New Finder window show: Desktop</li> <li> <p>Finder &gt; Preferences &gt; Sidebar: remove not used</p> </li> <li> <p>Safari &gt; View &gt; Show Favorites Bar</p> </li> <li>Safari &gt; Preferences &gt; New windows open with: Top Sites (populate top sites)</li> <li>Safari &gt; Preferences &gt; Top Sites show: 6 sites</li> <li>Safari &gt; Preferences &gt; File download location: Desktop</li> <li> <p>Safari &gt; Preferences &gt; uncheck \"Open safe files after downloading\"</p> </li> <li> <p>TextEdit &gt; Format &gt; Make Plain Text</p> </li> </ul> </li> <li> <p>Remove from Dock unwanted applications</p> </li> <li> <p>Remove Floating Thumbnail from Screen Shot:</p> </li> </ul> <p>Cmd + Shift + 5 &gt; Options &gt; Show Floating Thumbnail (uncheck)</p> <ul> <li>Change shell to bash:</li> </ul> <pre><code>$ chsh -s /bin/bash \n$ export BASH_SILENCE_DEPRECATION_WARNING=1\n</code></pre> <ul> <li>Setup Mail</li> </ul>"},{"location":"macos/installation/#install-xcode-from-app-store","title":"Install Xcode from App Store","text":"<p>Launch Xcode and install components Launch Terminal and type:</p> <pre><code>$ xcode-select --install         # agree to license\n$ gcc --version\n</code></pre>"},{"location":"macos/installation/#from-app-store","title":"From App Store","text":"<p>Applications in iMac Pro</p> <p>[ Remove Garage Band and iMovie ]</p> <ul> <li>Adobe Reader</li> <li>Anaconda</li> <li>Autofirma</li> <li>DjView</li> <li>Dropbox</li> <li>Google Chrome</li> <li>Google Earth Pro</li> <li>iTerm2</li> <li>Keynote, Numbers, Pages</li> <li>Macports</li> <li>Mendeley</li> <li>Microsoft Excel, PowerPoint, Word</li> <li>OneDrive</li> <li>Papers</li> <li>Paraview</li> <li>Spotify</li> <li>The Unarchiver</li> <li>VirtualBox</li> <li>Xcode</li> </ul> <p>Additional Applications in MacBook Air</p> <ul> <li>Brave Browser</li> <li>jAmaSeis</li> <li>Julia (alternative installation?)</li> <li>Mathpix</li> <li>Pocket</li> <li>qBitorrent</li> <li>QGIS3</li> <li>Scratch Desktop</li> <li>Simple Comic</li> <li>VLC</li> </ul> <p>Devel apps:</p> <ul> <li>Docker</li> <li>VirtualBox</li> <li>Vagrant</li> <li>GRASS</li> <li>QGIS</li> </ul> <p>Other software</p> <ul> <li>XQuartz</li> <li>GCC compilers</li> <li>Macports<ul> <li>gv</li> <li>gmt5</li> <li>coreutils (check that includes gawk)</li> <li>a2ps</li> <li>ImageMagick</li> <li>GraphicsMagick</li> <li>feh</li> <li>wget</li> <li>inetutils (ftp, telnet)</li> <li>openssh</li> <li>ffmepg</li> <li>parallel [+ libgfortran3 ] [+ openmpi ]</li> </ul> </li> </ul> <p>Seismology</p> <ul> <li>SAC</li> <li>SEISAN</li> <li>CPS</li> <li>rdseed</li> <li>mstools</li> <li>ObsPy / pyrocko</li> </ul>"},{"location":"macos/installation/#install-xquartz","title":"Install XQuartz","text":"<p>https://www.xquartz.org</p> <p>[Restart]</p>"},{"location":"macos/installation/#install-applications","title":"Install Applications","text":"<p>iterm2          https://www.iterm2.com</p> <p>Preferences &gt; Profiles &gt; Colors (fff8f0 background, black foreground) Preferences &gt; Profiles &gt; Window: 132 x 60</p> <p>Dropbox         https://www.dropbox.com/install [ DropboxInstaller.dmg ]</p> <p>Office 365</p> <p>[ remove unused apps: OneNote, ... ]</p> <ul> <li>QGIS</li> <li>Firefox</li> <li>Google Earth Pro</li> <li>VLC  [ Microsoft_Office_16.33.20011301_Installer.pkg ]</li> <li>DjView [ DjVuLibre-3.5.27+DjView-4.10.6-qt57c-intel64.dmg ]</li> <li>Spotify [ SpotifyInstaller.zip ]</li> <li>VirtualBox</li> <li>Vagrant</li> <li> <p>Docker Desktop [ Docker.dmg ]</p> </li> <li> <p>Papers            papers_3423_587.dmg + P3-ADUN-IWEF-EFUS-UPIN</p> </li> <li> <p>Mendeley Desktop [ install plugin for Word ]</p> </li> <li> <p>MacTeX</p> </li> <li>TeXstudio</li> <li>Mathpix Snipping Tool</li> </ul> <p>Brave           https://brave.com qBittorrent jAmaSeis Simple Comic Scratch Desktop</p>"},{"location":"macos/installation/#gmt","title":"GMT","text":"<p>If GMT installation with MacPorts fails, GMT can also be installed as an app with a dmg file</p> <p>To run GMT from the command line (not using the app):</p> <p>Add the following environmental variables:</p> <pre><code>export GMTHOME=/Applications/GMT-6.0.0.app/Contents/Resources\nexport PROJ_LIB=$GMTHOME/share/proj6\nexport MAGICK_CONFIGURE_PATH=$GMTHOME/lib/GraphicsMagick-1.3.33/config\n</code></pre> <p>Add <code>${GMTHOME}/bin</code> to <code>$PATH</code></p>"},{"location":"macos/installation/#cc-and-fortran","title":"C/C++ and Fortran","text":"<p>http://hpc.sourceforge.net</p> <pre><code>$ sudo tar xvzf gcc-X.X-bin.tar.gz -C /.\n</code></pre> <p>For the compiler to find the system headers on Catalina, you may have to specify an additional include path: -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include</p>"},{"location":"macos/installation/#java","title":"Java","text":"<p>Install Java SE (standard Edition) JDK:</p> <p>https://www.oracle.com/java/technologies/javase-downloads.html jdk-14.0.2_osx-x64_bin.dmg</p>"},{"location":"macos/installation/#git","title":"Git","text":"<p>https://www.git-scm.com Download pkg from https://git-scm.com and install</p> <pre><code>$ git config --global user.name \"Antonio Villasenor\"\n$ git config --global user.email \"antonio.villasenor@csic.es\"\n$ git config --global color.ui true\n\n$ ssh-keygen -b 4096 -t rsa\n[default location, no passphrase]\n\n$ cat ~/.ssh/id_rsa.pub | pbcopy   [ copy key to clipboard ]\n</code></pre> <p>git completion/prompt</p> <pre><code>source ~/.git-completion.bash\n\n# colors!\nred=\"\\[\\033[0;31m\\]\"\ngreen=\"\\[\\033[0;32m\\]\"\nblue=\"\\[\\033[0;34m\\]\"\npurple=\"\\[\\033[0;35m\\]\"\ncyan=\"\\[\\033[0;36m\\]\"\nreset=\"\\[\\033[0m\\]\"\n\nsource ~/.git-prompt.sh\nexport GIT_PS1_SHOWDIRTYSTATE=1\nexport PS1=\"$cyan\\u@pcanto$green\\$(__git_ps1)$blue \\W $ $reset\"\n</code></pre> <p>Login to Bitbucket and add key</p> <pre><code>$ cd\n$ mkdir devel\n$ cd devel\n\n$ git clone git@bitbucket.org:avillasenorh/let.git\n$ git clone git@bitbucket.org:avillasenorh/psim-tools.git\n$ git clone git@bitbucket.org:avillasenorh/noise-processing.git\n$ git clone git@bitbucket.org:avillasenorh/gtomo.git\n</code></pre> <p>Login to GitHub and add key</p> <p>[create .gitignore]</p> <pre><code>$ git config --global core.excludesfile ~/.gitignore\n$ ssh-keygen [ -b 4096 -t rsa ]\n$ eval \"$(ssh-agent -s)\"\n$ ssh-add  ~/.ssh/id_rsa\n$ cat ~/.ssh/id_rsa.pub | pbcopy\n</code></pre> <p>Login to BitBucket (https://bitbucket.org/account/signin/) Preferences &gt; BitBucket settings &gt; SSH keys &gt; Add Key Description: Mac Paste Key: cmd + V</p> <pre><code>$ cd\n$ mkdir devel\n$ cd devel\n$ git clone git@bitbucket.org:avillasenorh/noise-processing.git\n$ git clone git@bitbucket.org:avillasenorh/psim-tools.git\n$ git clone git@bitbucket.org:avillasenorh/let.git\n$ git clone git@bitbucket.org:avillasenorh/gtomo.git\n</code></pre>"},{"location":"macos/installation/#python","title":"Python","text":"<p>Install Anaconda distribution</p> <ul> <li>Obspy</li> </ul> <pre><code>$ conda create -n obspy python=3.7 anaconda [ apparently \"basemap\" does not work in 3.8 ]\n$ conda activate obspy\n$ conda install basemap\n$ conda install -c conda-forge obspy\n\n[ $ conda install -c conda-forge cartopy ]\n</code></pre> <ul> <li>TensorFlow 2</li> </ul> <pre><code>$  conda create -n tf anaconda [ defaults to 3.7 ]\n$  conda activate tf\n\n$  pip -V     [ warning: TensorFlow 2 packages require pip version &gt; 19.0 ]\n\n$  pip install tensorflow\n$  pip install keras\n</code></pre> <p>If you later want to install ObsPy for DL picker:</p> <pre><code>$  conda list hdf5  [ installed ]\n$  conda list h5py  [ installed ]\n\n$  conda list graphviz     [ not installed ]\n$  conda install graphviz\n\n$  conda list pydot        [ not installed ]\n$  conda install pydot\n\n$  conda install -c conda-forge obspy\n</code></pre> <ul> <li>Intel distribution for Python (IDP)</li> </ul> <p>Do not do \"conda config --add channels intel\" because this will cause all your Continuum packages to be replaced with Intel builds, if available. Rather specify \"-c intel --no-update-deps\" [last option deprecated?]</p> <pre><code>$ conda create -n idp intelpython3_full python=3 -c intel\n\n  INSTALLED PACKAGE OF SCIKIT-LEARN CAN BE ACCELERATED USING DAAL4PY. \n  PLEASE SET 'USE_DAAL4PY_SKLEARN' ENVIRONMENT VARIABLE TO 'YES' TO ENABLE THE ACCELERATION. \n  FOR EXAMPLE:\n\n      $ USE_DAAL4PY_SKLEARN=YES\n</code></pre>"},{"location":"macos/installation/#julia","title":"Julia","text":"<p>Version installed: Long-term support (LTS) release: v1.0.5 (Sep 9, 2019)</p> <ul> <li> <p>Download dmg file from https://julialang.org/downloads/ and install (drag to /Applications)</p> </li> <li> <p>Make a symbolic link:</p> </li> </ul> <pre><code>$ ln -s /Applications/Julia-&lt;version&gt;.app/Contents/Resources/julia/bin/julia /usr/local/bin/julia\n</code></pre> <p>Or install Julia Pro (comes with Juno IDE)</p> <p>JuliaPro-1.0.5-2_build-54.pkg</p> <pre><code>$ sudo ln -s /Applications/JuliaPro-1.0.5-2.app/Contents/Resources/julia/Contents/Resources/julia/bin/julia \\\n             /usr/local/bin/julia\n</code></pre>"},{"location":"macos/installation/#python-and-obspy","title":"Python and Obspy","text":"<p>$ conda create -n obspy python=3.7 $ conda activate obspy (obspy)$ conda install -c conda-forge obspy (obspy)$ conda list basemap        # not installed if conda-forge not added to default channels (obspy)$ conda install basemap (obspy)$ conda update -c conda-forge obspy</p> <p>$ conda create -n mlcourse python=3.7 anaconda $ conda activate mlcourse</p>"},{"location":"macos/installation/#p","title":"P","text":"<p>_</p> <ol> <li>Create .Prc in home directory:</li> </ol> <p>P=/usr/local/P TOMO=/data/models/GTOMO cd $P/data/P.coldef33d axnu 0 1 set shell set dpi 300 ns 1 1 nd 1 1</p> <ol> <li> <p>Copy P directory to /usr/local</p> </li> <li> <p>Add $P/usrc and $P/Pexec to path in .bashrc </p> </li> </ol> <p>export P=/usr/local/P PROGSPATH=${P}/usrc:${P}/Pexec</p>"},{"location":"macos/installation/#cps","title":"CPS","text":"<p>$ tar xvzf NP330.Jun-22-2018.tgz $ ./Setup OSX40 $ ./C &gt; compile.log 2&gt;&amp;1 &amp; $ tail -f compile.log</p>"},{"location":"macos/installation/#seisan","title":"SEISAN","text":"<pre><code>$ cd /\n$ sudo mkdir seismo\n$ sudo chown antonio:staff seismo\n$ cd seismo\n$ tar xvzf ..../seisan_macosx_v11.0.tar.gz\n$ cd COM\n</code></pre> <p>[edit SEISAN.bash] export SEISARCH=\"macosx\" export SEISAN_TOP=\"/seismo\" fix bad syntax in python aliases</p> <p>[edit .bashrc] export SEISAN=/seismo add source $SEISAN/COM/SEISAN.bash add ${SEISAN_TOP}/PRO to $PATH</p> <p>Compiled version requires libgfortran.3.dylib (current version is libgfortran.3.dylib)</p> <p>$ cd /usr/local/lib $ sudo ln -s /Users/antonio/anaconda3/pkgs/libgfortran-3.0.1-h93005f0_2/lib/libgfortran.3.dylib</p>"},{"location":"macos/installation/#mstools","title":"mstools","text":"<p>src/mstools $ mkdir -p ~/bin $ mkdir -p ~/man/man1 $ ./compile_all.sh &gt; compile.log 2&gt;&amp;1</p> <ul> <li>check that the programs work</li> <li>how to access the man pages</li> </ul>"},{"location":"macos/macports/","title":"MacPorts","text":"<p>https://www.macports.org</p> <pre><code>$ sudo port [-v] selfupdate       # -v for verbose\n$ sudo port upgrade outdated      # this can take a long time\n$ sudo port rev-upgrade           # if something goes wrong\n</code></pre> <p>Other macports commands:</p> <pre><code>$ port version\n$ port installed\n$ port search --name --glob \"gmt*\"\n$ port search --name --line --glob \"gmt*\" # produces better output\n\n$ port info gmt5\n</code></pre>"},{"location":"macos/macports/#system-tools","title":"System tools","text":"<ul> <li><code>wget</code></li> <li><code>curl</code></li> <li><code>htop</code></li> <li><code>tree</code></li> <li><code>exa</code>: a modern replacement for <code>ls</code></li> <li><code>bat</code>: a <code>cat</code> clone written in <code>Rust</code></li> <li><code>openssh</code></li> <li><code>coreutils</code></li> <li><code>inetutils</code>: ftp, telnet</li> <li><code>tmux</code></li> <li>a more modern <code>bash</code>: currently 5.1.16 (versus 3.2 system <code>bash</code>)</li> </ul> <pre><code>$ sudo port install openssh +ssh-copy-id\n</code></pre>"},{"location":"macos/macports/#development","title":"Development","text":"<p>Some of the tools install (multiple versions of) programming languages, such as <code>C/C++</code>, <code>Python</code>, <code>Perl</code>, <code>Rust</code>, etc.</p> <p>Normally those installations are only used by MacPorts to build some of its applications and packages. However they can also be used for development. For example, to make the <code>MacPort</code>'s Python the default Python:</p> <pre><code>python39 has the following notes:\n To make this the default Python or Python 3 (i.e., the version run by the 'python' or 'python3' commands), run one or both of:\n\n      sudo port select --set python python39\n      sudo port select --set python3 python39\n</code></pre> <p>In addition to those languages, the following development tools can also be installed:</p> <ul> <li><code>cmake</code></li> <li><code>gsl</code>: GNU Scientific Library</li> <li>[<code>graphviz</code>]: graph visualization software</li> <li>[<code>gnuplot</code>]: command-line graphing utility</li> <li><code>gh</code>: GitHub command-line tools</li> <li><code>pipx</code></li> <li><code>openmpi</code></li> </ul> <pre><code>  openmpi-default has the following notes:\n    The mpicc wrapper (and friends) are installed as:\n      /opt/local/bin/mpicc-openmpi-mp (likewise mpicxx, ...)\n\n    To make openmpi-default's wrappers the default (what you get when you execute 'mpicc' etc.) please run:\n      sudo port select --set mpi openmpi-mp-fortran\n\n</code></pre> <p>Some packages install versions of Python. To make those versions the default Python/Python3:</p>"},{"location":"macos/macports/#utilities","title":"Utilities","text":"<ul> <li><code>a2ps</code></li> <li><code>gv</code></li> <li><code>ffmpeg</code></li> <li><code>graphicsmagick</code></li> <li>[<code>feh</code> not installed in Monterrey; gives error]</li> <li><code>latexdiff</code></li> </ul> <pre><code>sudo port install ffmpeg +libgfortran3 +openmpi\n</code></pre>"},{"location":"macos/macports/#packages","title":"Packages","text":"<ul> <li><code>gmt6</code></li> </ul> <pre><code>$ sudo port install gdal +hdf5 +netcdf +openjpeg\n$ sudo port install gmt6 +fftw3\n</code></pre>"},{"location":"macos/python/","title":"Python installation","text":""},{"location":"macos/python/#python-installation","title":"Python installation","text":"<p>In older versions of the operating system (before Monterrey Version 12.3, early 2022), an old system version of Python was installed:</p> <pre><code>$ /usr/bin/python -V\nPython 2.7.18\n\n$ /usr/bin/python\n\nWARNING: Python 2.7 is not recommended.\nThis version is included in macOS for compatibility with legacy software.\nFuture versions of macOS will not include Python 2.7.\nInstead, it is recommended that you transition to using 'python3' from within Terminal.\n\nPython 2.7.18 (default, Jan  4 2022, 17:47:56)\n[GCC Apple LLVM 13.0.0 (clang-1300.0.29.10) [+internal-os, ptrauth-isa=deployme on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; \n</code></pre> <p>This was in fact a link to:</p> <pre><code>/usr/bin/python@ -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7\n</code></pre> <p>Since this version of Python was only intended for use by the operating system, no <code>pip</code> command associated with it.</p> <p>As stated in the warning, newer versions of macOS do not include this Python 2.7 distribution.</p> <p>In <code>/usr/bin</code> there is a <code>python3</code> command with a newer version of Python:</p> <pre><code>$ /usr/bin/python3 -V\nPython 3.9.6\n\n$ /usr/bin/python3\nPython 3.9.6 (default, Dec  7 2023, 05:42:47)\n[Clang 15.0.0 (clang-1500.1.0.2.5)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</code></pre> <p>In the same location there is a <code>pip3</code> command associated with this version of Python:</p> <pre><code>$ /usr/bin/pip3 -V\npip 21.2.4 from /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/site-packages/pip (python 3.9)\n</code></pre> <p>These pre-installed versions of Python are only intended for use by the operating system, so they should not be used (and no packages should be installed using <code>pip3</code>).</p> <p>Therefore, in order to use Python for software developement we need to install other distributions of Python.</p>"},{"location":"macos/python/#psf-python","title":"PSF Python","text":"<p>In addition to system Python (not to be used) the first Python distribution to install is that of the PSF. For macOS we will select the macOS 64-bit universal2 installer (<code>.dmg</code> file).</p> <p>The installation is simple, and when completed you should see a window similar to this one (depending on the version of Python and of the operating system):</p> <p></p> <p>This window includes a message that indicates that a set of SSL root certificates are required. When clicking in the <code>Install Certificates</code> icon in a Finder window the following command  will run:</p> <pre><code>$ ./Install\\ Certificates.command\n -- pip install --upgrade certifi\nCollecting certifi\n  Downloading certifi-2021.10.8-py2.py3-none-any.whl (149 kB)\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 149 kB 4.2 MB/s\nInstalling collected packages: certifi\nSuccessfully installed certifi-2021.10.8\nWARNING: You are using pip version 21.2.4; however, version 21.3.1 is available.\nYou should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10 -m pip install --upgrade pip' command.\n -- removing any existing file or link\n -- creating symlink to certifi certificate bundle\n -- setting permissions\n -- update complete\n\n</code></pre> <p>The PSF installation adds the following lines to your <code>.bash_profile</code>:</p> <pre><code># Setting PATH for Python 3.12\nPATH=\"/Library/Frameworks/Python.framework/Versions/3.12/bin:${PATH}\"\nexport PATH\n</code></pre> <p>The resulting <code>$PATH</code> variable will look similar to:</p> <pre><code>/Library/Frameworks/Python.framework/Versions/3.12/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin\n</code></pre> <p>And now we have:</p> <pre><code>$ command -v python\n/Library/Frameworks/Python.framework/Versions/3.12/bin/python\n\n$ python\nPython 3.12.1 (v3.12.1:2305ca5144, Dec  7 2023, 17:23:38) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</code></pre> <p>In the most recent versions of macOS, after installing the PSF Python, the commands <code>python</code> and <code>python3</code> are aliases to the current version (in this example <code>python3.12</code>).</p>"},{"location":"macos/python/#upgrade-pip","title":"Upgrade <code>pip</code>","text":"<p>When installing the SSL root certificates we obtained a warning that a newer version of <code>pip</code> was available. To install this new version run:</p> <pre><code>$ command -v pip\n/Library/Frameworks/Python.framework/Versions/3.12/bin/pip\n\n$ pip --version\npip 23.3.1 from /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pip (python 3.12)\n\n$ $ python -m pip install --upgrade pip\nRequirement already satisfied: pip in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (23.3.1)\nCollecting pip\n  Downloading pip-23.3.2-py3-none-any.whl.metadata (3.5 kB)\nDownloading pip-23.3.2-py3-none-any.whl (2.1 MB)\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.1/2.1 MB 4.0 MB/s eta 0:00:00\nInstalling collected packages: pip\n  Attempting uninstall: pip\n    Found existing installation: pip 23.3.1\n    Uninstalling pip-23.3.1:\n      Successfully uninstalled pip-23.3.1\nSuccessfully installed pip-23.3.2\n\n$ pip --version\npip 23.3.2 from /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pip (python 3.12)\n</code></pre> <p>In the folder where the <code>python</code> and <code>pip</code> commands are located  (<code>/Library/Frameworks/Python.framework/Versions/3.12/bin</code>) we can find <code>pip</code>, <code>pip3</code>, and <code>pip3.12</code>. All of them are identical Python scripts.</p>"},{"location":"macos/python/#install-anaconda","title":"Install Anaconda","text":"<p>Download the installer from the Anaconda web site. Select the apropriate version: Intel or M1/M2/M3.</p> <p>After running the installer, the following lines are added to <code>.bash_profile</code>:</p> <pre><code># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/Users/antonio/opt/anaconda3/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n    if [ -f \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\"\n    else\n        export PATH=\"/Users/antonio/opt/anaconda3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n# &lt;&lt;&lt; conda initialize &lt;&lt;&lt;\n</code></pre> <p>The variable <code>$PATH</code> now will look similar to:</p> <pre><code>/Users/antonio/opt/anaconda3/bin:/Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin\n</code></pre> <p>With this configuration, each new shell or terminal will activate the Anaconda <code>base</code> environment. To prevent the activation by default, run the following command:</p> <pre><code>$ conda config --set auto_activate_base false\n</code></pre> <p>This creates a file named <code>.condarc</code> in the <code>$HOME</code> directory with the following line:</p> <pre><code>auto_activate_base: false\n</code></pre> <p>Now, when opening a new shell the variable <code>$PATH</code> will look similar to:</p> <pre><code>/Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin\n</code></pre> <p>After making these changes, if you want to activate the <code>base</code> environment type:</p> <pre><code>$ conda activate [base]\n</code></pre> <p>Then the prompt will change to:</p> <pre><code>(base) $\n</code></pre> <p>Periodically update <code>conda</code>:</p>"},{"location":"macos/python/#install-packages-with-pipx","title":"Install packages with pipx","text":"<p>For some Python packages we are only interested in the commands that they provide, and we do not need to import their packages or modules. In this case, instead of manually creating an specific environment for each package and installing it with <code>pip</code>, it is possible to install it using <code>pipx</code>. Under the hood <code>pipx</code> creates an environment for each package and makes the commands available via soft links.</p> <p>First verify if <code>pipx</code> is already available, for example from a recent PSF Python distribution:</p> <pre><code>$ which pipx\n/Library/Frameworks/Python.framework/Versions/3.12/bin/pipx\n</code></pre> <p>If it is not available, it can be installed with <code>MacPorts</code>:</p> <pre><code>$ sudo port install pipx\n</code></pre> <p>Examples of packages that can be installed with <code>pipx</code> are:</p> <ul> <li><code>black</code>: a Python code formatter</li> <li><code>MkDocs</code>: a package for creating documentation</li> </ul> <pre><code>$ pipx install black\n  installed package black 21.12b0, installed using Python 3.9.9\n  These apps are now globally available\n    - black\n    - black-primer\n    - blackd\n\u26a0\ufe0f  Note: '/Users/antonio/.local/bin' is not on your PATH environment variable. These apps will not be globally accessible until your PATH is updated. Run\n    `pipx ensurepath` to automatically add it, or manually modify your PATH in your shell's config file (i.e. ~/.bashrc).\ndone! \u2728 \ud83c\udf1f \u2728\n</code></pre> <p>The commands installed with <code>pipx</code> (actually soft links to them) are located in <code>$HOME/.local/bin</code>. Therefore this directory must be added to the <code>$PATH</code> variable (e.g. modifying <code>.bashrc</code>).</p> <p>Sometimes a package installed with <code>pipx</code> might require additional packages to add some features or capabilities. These additional packages must be installed in the specific environment of the original package. This can be achieved with the <code>runpip</code> option.</p> <p>For example, to add math capabilities and the Material theme to <code>MkDocs</code> run:</p> <pre><code>$ pipx runpip mkdocs install python-markdown-math\n$ pipx runpip mkdocs install mkdocs-material\n</code></pre>"},{"location":"macos/sonoma/","title":"Sonoma installation","text":""},{"location":"macos/sonoma/#fresh-macos-sonoma-installation","title":"Fresh macOS Sonoma installation","text":""},{"location":"macos/sonoma/#1-inmediately-after-installation","title":"1. Inmediately after installation","text":"<p>First check if there are updates for the operating system.</p> <p>Remove from Dock unwanted applications.</p>"},{"location":"macos/sonoma/#change-setting-for-macos-and-applications","title":"Change setting for macOS and applications","text":"<ul> <li> <p>Change System settings</p> <ul> <li>Dock &gt; Position on screen: Left</li> <li>Dock &gt; Minimize windows into application icon</li> <li>Mouse &gt; Secondary click (Click on right side)</li> <li>General &gt; Language &amp; Region &gt; Number format: change decimal character to \".\"</li> </ul> </li> <li> <p>Change Finder settings</p> <ul> <li> <p>General &gt; New Finder window show: Desktop</p> </li> <li> <p>Sidebar &gt; Show Hard disks (add HDD to sidebar and hide Hard disks again)</p> </li> <li>Sidebar &gt; Do not show CDs, DVDs, and iPods</li> <li> <p>Sidebar &gt; Sidebar: remove not used</p> </li> <li> <p>Advanced &gt; Show all filename extensions</p> </li> <li>Advanced &gt; Do not show warning changing extensions</li> <li>Advanced &gt; Keep folders on top when sorting by name</li> </ul> </li> <li> <p>Change Safari settings</p> <ul> <li>General &gt; uncheck \"Open safe files after downloading\"</li> </ul> </li> <li> <p>Change Textedit settings</p> <ul> <li>TextEdit &gt; Format &gt; Make Plain Text</li> </ul> </li> <li> <p>Remove Floating Thumbnail from Screen Shot:</p> </li> </ul> <p>Cmd + Shift + 5 &gt; Options &gt; Show Floating Thumbnail (uncheck)</p>"},{"location":"macos/sonoma/#install-iterm2","title":"Install iTerm2","text":"<p>Dowload and install the iTerm2 app and use it instead of the default terminal</p> <p>In Settings &gt; Profiles &gt; Colors, change color preset to Novel. (The file <code>Novel.itermcolors</code> can be found in <code>~/Dropbox/Software/macOS/macOS_setup/itermcolors</code>)</p>"},{"location":"macos/sonoma/#set-default-shell-to-bash","title":"Set default shell to <code>bash</code>","text":"<p>Because of license issues, in the latest versions of macOS the default shell is <code>zsh</code> instead of <code>bash</code>. To change the default shell to <code>bash</code>:</p> <pre><code>$ chsh -s /bin/bash\n</code></pre> <p>Initially (before creating/modifying the <code>.bash_profile</code> and <code>.bashrc</code> files) the <code>$PATH</code> environmental variable is set to:</p> <pre><code>/usr/local/bin\n/System/Cryptexes/App/usr/bin\n/usr/bin:/bin:/usr/sbin:/sbin\n/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin\n/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin\n/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin\n</code></pre> <p>After removing the cryptex directories, the remaining path is:</p> <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>Because of those license issues, the version of <code>bash</code> provided in <code>/bin/bash</code> is very old (3.2, from 2007!)</p> <pre><code>$ echo $BASH_VERSION\n3.2.57(1)-release\n\n$ /bin/bash --version\nGNU bash, version 3.2.57(1)-release (arm64-apple-darwin23)\nCopyright (C) 2007 Free Software Foundation, Inc.\n</code></pre> <p>Once you install MacPorts and a few packages, a newer version of <code>bash</code> will be available in  <code>/opt/local/bin/bash</code>:</p>"},{"location":"macos/sonoma/#configure-mail-accounts","title":"Configure Mail accounts","text":"<p>Add CSIC, GMail and Yahoo! mail.</p> <p>Remove iCloud account to avoid confusion.</p>"},{"location":"macos/sonoma/#2-install-development-packages","title":"2. Install development packages","text":""},{"location":"macos/sonoma/#xcode","title":"<code>XCode</code>","text":"<p>Go to the App Store and install XCode. Once it is installed, open it and it will install the Command line tools. If the tools are not installed automatically it can be done from the command line:</p> <pre><code>$ xcode-select --install         # agree to license\n\n$ cc --version\nApple clang version 15.0.0 (clang-1500.1.0.2.5)\nTarget: arm64-apple-darwin23.1.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n</code></pre> <p>NOTE: The following may not apply to Sonoma (macOS 14).</p> <p>After the installation of XCode, the <code>$PATH</code> variable is expanded to:</p> <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin\n</code></pre> <p>The last folder contains a single command called <code>rvictl</code> that is installed by Xcode.</p>"},{"location":"macos/sonoma/#xquartz","title":"<code>XQuartz</code>","text":"<p>Then install XQuartz for X Window support.</p> <p>Logout after the installation of XQuartz and login again for changes to take place.</p>"},{"location":"macos/sonoma/#gcc-cc-and-fortran-compilers","title":"GCC C/C++ and Fortran compilers","text":"<p>Install <code>gcc</code> and <code>gfortran</code> compilers from the HPC Mac OS X web page. Download the appropriate <code>.tar.gz</code> file (as of January 2024, the version for Sonoma M1/M2 Apple silicon was included in the compressed tar file <code>gcc-13.2-m1-bin.tar.gz</code>)</p> <p>To install it, simply type:</p> <pre><code>$ sudo tar xvf gcc-13.2-m1-bin.tar -C /.\n\n$ gcc --version\ngcc (GCC) 13.2.0\nCopyright (C) 2023 Free Software Foundation, Inc.\n...\n\n$ gfortran --version\nGNU Fortran (GCC) 13.2.0\nCopyright (C) 2023 Free Software Foundation, Inc.\n...\n</code></pre>"},{"location":"macos/sonoma/#setup-dotfiles","title":"Setup dotfiles","text":"<p>At this point it is convenient to setup the <code>.bash_profile</code> and <code>.bashrc</code> files. Initially <code>.bash_profile</code> contains simply:</p> <pre><code>#\nif [ -f ~/.bashrc ]; then\n    . ~/.bashrc\nfi\n</code></pre> <p>Important: unlike in Linux, in macOS all the new terminals are login terminals, so they  all run <code>.bash_profile</code>.</p> <p>Examples of dotfiles can be found in <code>~/Dropbox/Software/macOS/macOS_setup/dotfiles</code>.</p>"},{"location":"macos/sonoma/#macports","title":"<code>MacPorts</code>","text":"<p>Now we can install the MacPorts package manager. Download the corresponding <code>pkg</code> file and run the installation.</p> <p>This adds the following lines to the <code>.bash_profile</code> file:</p> <pre><code># MacPorts Installer addition on 2023-12-04_at_19:25:05: adding an appropriate PATH variable for use with MacPorts.\nexport PATH=\"/opt/local/bin:/opt/local/sbin:$PATH\"\n# Finished adapting your PATH environment variable for use with MacPorts.\n</code></pre> <p>These lines could be removed from <code>.bash_profile</code> and added to the <code>$PATH</code> declaration in <code>.bashrc</code>.</p> <p>After installation update <code>MacPorts</code>:</p> <pre><code>$ sudo port -v selfupdate\n$ sudo port upgrade outdated\n</code></pre> <p>Normally after a new installation there is nothing to upgrade, but it is advisable to run these two commands periodically.</p> <p>Now we can use <code>MacPorts</code> to install a more recent version of <code>bash</code>:</p> <pre><code>$ sudo port install bash\n</code></pre> <p>We can now change the default outdated <code>bash</code> to the newer version <code>/opt/local/bin/bash</code>. To make this new <code>bash</code> the default, add <code>/opt/local/bin/bash</code> to the <code>/etc/shells</code> file:</p> <pre><code>$ sudo vi /etc/shells\n\n$ cat /etc/shells\n# List of acceptable shells for chpass(1).\n# Ftpd will not allow users to connect who are not using\n# one of these shells.\n\n/bin/bash\n/opt/local/bin/bash\n/bin/csh\n/bin/dash\n/bin/ksh\n/bin/sh\n/bin/tcsh\n/bin/zsh\n</code></pre> <p>and then:</p> <pre><code>$ chsh -s /opt/local/bin/bash\n</code></pre> <p>To use this shell in shell scripts, replace the common shebang <code>#!/bin/bash</code> for:</p> <pre><code>#!/usr/bin/env bash\n</code></pre> <p>Packages to install with MacPorts:</p> <ul> <li><code>htop</code></li> <li><code>tree</code></li> <li><code>wget</code></li> <li><code>curl</code></li> <li><code>coreutils</code>: GNU versions of <code>date</code>, <code>od</code>, ...</li> <li><code>inetutils</code>: <code>ftp</code>, <code>telnet</code>, ...</li> <li><code>gv</code></li> <li><code>a2ps</code></li> <li><code>dos2unix</code></li> <li><code>ImageMagick</code></li> <li><code>GraphicsMagick</code></li> <li><code>feh</code></li> <li><code>openssh +ssh-copy-id</code></li> <li><code>ffmepg</code></li> <li><code>parallel</code></li> </ul>"},{"location":"macos/sonoma/#python","title":"Python","text":"<p>See specific section.</p> <p>Installing the PSF Python adds the following lines to <code>.bash_profile</code>:</p> <pre><code># Setting PATH for Python 3.10\n# The original version is saved in .bash_profile.pysave\nPATH=\"/Library/Frameworks/Python.framework/Versions/3.10/bin:${PATH}\"\nexport PATH\n</code></pre> <p>The resulting <code>$PATH</code> looks like:</p> <pre><code>/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin\n</code></pre> <p>Installing the Anaconda Python distribution adds the following lines to <code>.bash_profile</code></p> <pre><code># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/Users/antonio/opt/anaconda3/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n    if [ -f \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\"\n    else\n        export PATH=\"/Users/antonio/opt/anaconda3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n# &lt;&lt;&lt; conda initialize &lt;&lt;&lt;\n</code></pre> <p>And sets the <code>$PATH</code> variable to:</p> <pre><code>/Users/antonio/opt/anaconda3/bin:/Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin\n</code></pre> <p>However, this initializes the conda <code>base</code> environment for each new shell opened. To prevent this:</p> <pre><code>$ conda config --set auto_activate_base false\n</code></pre> <p>This creates a file <code>.condarc</code> with the following content:</p> <pre><code>auto_activate_base: false\n</code></pre> <p>Now when opening a new shell the conda <code>base</code> environment is not activated, and the <code>$PATH</code> variable is set to:</p> <pre><code>/Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin\n</code></pre> <p>This means that the PSF Python takes preference over the Anaconda Python. To change this, simply activate a conda environment:</p> <pre><code>$ conda activate         # activates the base environment\n$ conda activate seismo  # activates the \"seismo\" environment\n</code></pre>"},{"location":"macos/sonoma/#git-and-github","title":"Git and GitHub","text":"<p>Probably at this point <code>git</code> is already installed by MacPorts. If that is not the case go to the Git web page and download the installer for macOS.</p> <p>To configure Git:</p> <pre><code>$ git config --global user.name \"Antonio Villasenor\"\n$ git config --global user.email \"antonio.villasenor@csic.es\"\n$ git config --global color.ui true\n</code></pre> <p>In order to pull and push repositories from your GitHub account in the past it was necessary to set up a private SSH key. Now it is done with personal access tokens that are used as passwords.</p>"},{"location":"macos/sonoma/#julia","title":"Julia","text":""},{"location":"macos/sonoma/#java","title":"Java","text":"<p>Download a macOS Arm 64 DMG installer of the Java SE (standard edition) Development Kit (JDK). For version 21.0 use the following download page.</p>"},{"location":"macos/sonoma/#ides","title":"IDEs","text":"<ul> <li>VS Code</li> </ul>"},{"location":"macos/sonoma/#virtualization","title":"Virtualization","text":"<ul> <li>Docker</li> <li>VirtualBox</li> <li>Vagrant</li> </ul>"},{"location":"macos/sonoma/#3-seismological-software","title":"3. Seismological software","text":""},{"location":"macos/sonoma/#sac","title":"SAC","text":"<p>Obtain the SAC distribution from IRIS as a tar file with the codes precompiled for macOS. As of 2024-01-20 the latest version of SAC is 102.0 provided in the tar file <code>sac-102.0-mac.tar</code>.</p> <pre><code>$ cd /usr/local\n$ sudo tar xvf .../sac-102.0-mac.tar\n</code></pre> <p>Then define the following variables in <code>.bashrc</code></p> <pre><code>export SACHOME=/usr/local/sac\nexport SACAUX=$SACHOME/aux\nexport SACLIB=$SACHOME/lib/sacio.a\nexport SAC_DISPLAY_COPYRIGHT=0\nexport SAC_USE_DATABASE=0\nexport SAC_PPK_LARGE_CROSSHAIRS=1\n</code></pre> <p>And finally add <code>$SACHOME/bin</code> to the <code>PATH</code> variable.</p>"},{"location":"macos/sonoma/#seisan","title":"SEISAN","text":"<p>Download the latest version from the SEISAN web site. As of 2024-01-20 the latest version of SEISAN is 13.03, but it is not available yet for macOS, so we will install the previous version (12.0 from May 2021).</p> <p>First create a directory for SEISAN. A typical name would be <code>/seismo</code>. However the most recent macOS versions do not allow to create a directory directly under the root directory, so an alternative can be <code>$HOME/seismo</code>.</p> <pre><code>$ cd \n$ mkdir seismo\n$ cd seismo\n$ tar xvzf .../seisan_v12.0_macosx_64.tar.gz\n$ cd COM\n$ vi SEISAN.bash\n</code></pre> <p>Edit <code>SEISAN.bash</code> and modify the following lines:</p> <pre><code>export SEISARCH=\"macosx\"              # only needed to recompile SEISAN\nexport SEISAN_TOP=\"${HOME}/seismo\"\n</code></pre> <p>Edit <code>.bashrc</code> and add the following lines:</p> <pre><code>export SEISAN=${HOME}/seismo\nsource $SEISAN/COM/SEISAN.bash\n</code></pre> <p>You can also here add <code>$SEISAN_TOP/PRO</code> and <code>$SEISAN_TOP</code> to the <code>PATH</code>. In this case you can comment the following lines in <code>SEISAN.bash</code>:</p> <pre><code>#export PATH=\"$SEISAN_TOP/PRO:$PATH\"\n#export PATH=\"$SEISAN_TOP/COM:$PATH\"\n</code></pre> <p>This version of SEISAN (12.0) comes precompiled for Macs with Intel processors. To recompile it for M1/M2 chips you need first to modify the <code>Makefile</code> files in <code>$SEISAN_TOP/LIB</code> and <code>$SEISAN_TOP/PRO</code> and repace the <code>gcc-11</code>compiler for simply <code>gcc</code>.</p> <p>In <code>$SEISAN_TOP/LIB</code>:</p> <pre><code>#cc_macosx    = gcc-11 -m64 -c -I../INC -I/usr/X11R6/include $(debug_flags) -o $@\ncc_macosx    = gcc -m64 -c -I../INC -I/usr/X11R6/include $(debug_flags) -o $@\n</code></pre> <p>In <code>$SEISAN_TOP/PRO</code>:</p> <pre><code>#cc_macosx     = gcc-11 -m64 -I../INC $(debug_flags) -o $@\ncc_macosx     = gcc -m64 -I../INC $(debug_flags) -o $@\n</code></pre> <p>After these changes type:</p> <pre><code>$ cd $SEISAN_TOP/PRO\n$ make clean\n$ make all\n</code></pre> <p>This will recompile the SEISAN library in <code>$SEISAN_TOP/LIB</code> and all the executables in <code>$SEISAN_TOP/PRO</code></p>"},{"location":"macos/sonoma/#cps","title":"CPS","text":"<p>To install Bob Herrmann's Computer Programs in Seismology first you need to get a tar file with the latest version. At the time of this writing the most recent version was <code>NP330.Oct-26-2023.tgz</code>.</p> <p>To compile the codes:</p> <pre><code>$ cd \n$ cd src\n$ tar xvzf .../NP330.*DATE*.tgz\n$ cd PROGRAMS.330\n$ ./Setup OSXM                       # use this option for M1/M2 chips\n$ ./C &gt; compile.log 2&gt;&amp;1 &amp;\n$ tail -f compile.log\n</code></pre> <p>The executables will be located in <code>$HOME/src/PROGRAMS.330/bin</code>. You need to add this directory to your <code>PATH</code>.</p>"},{"location":"macos/sonoma/#obspy","title":"ObsPy","text":"<p>The easiest way to install ObsPy is via Anaconda:</p> <pre><code>$ conda create -n obspy python=3.11 obspy cartopy pytest pytest-json\n$ conda activate obspy\n$ (obspy) conda install pytest pytest-json-report   # this is necessary to run the tests\n$ (obspy) obspy-runtests\n</code></pre>"},{"location":"macos/sonoma/#pyrocko","title":"Pyrocko","text":"<pre><code>$ conda create -n pyrocko python=3.11\n$ conda activate pyrocko\n$ (pyrocko) conda install -c pyrocko pyrocko\n</code></pre>"},{"location":"macos/sonoma/#phasenet","title":"PhaseNet","text":"<pre><code>$ git clone https://github.com/AI4EPS/PhaseNet.git\n$ cd PhaseNet\n$ conda env create -f env.yml\n$ conda activate phasenet\n</code></pre>"},{"location":"macos/sonoma/#irissage-software","title":"IRIS/SAGE Software","text":"<p>Compile the library <code>libmseed</code> and associated codes (<code>dataselect</code>, <code>mseed2sac</code>, <code>msi</code>, <code>msmod</code>)</p> <p>The miniSEED utilities can be installed by compiling the source code in <code>src/mstools</code></p> <pre><code>$ cd\n$ cd src/mstools\n$ mkdir -p ~/bin                      # if it does not exist\n$ mkdir -p ~/man/man1                 # if it does not exist\n$ ./compile_all.sh &gt; compile.log 2&gt;&amp;1\n</code></pre> <p>Newer versions of the codes are also available on GitHub</p> <pre><code>https://github.com/EarthScope/libmseed\nhttps://github.com/EarthScope/dataselect\nhttps://github.com/EarthScope/msi\nhttps://github.com/EarthScope/msmod\nhttps://github.com/EarthScope/mseed2sac\nhttps://github.com/EarthScope/sac2mseed\n\nhttps://github.com/EarthScope/evalresp\nhttps://github.com/EarthScope/fdsn-stationxml-convertor\n\nhttps://github.com/EarthScope/ispaq \n</code></pre> <ul> <li><code>evalresp</code></li> <li><code>JEvalResp</code></li> <li><code>JPlotResp</code></li> <li><code>rdseed</code></li> <li><code>TauP</code></li> </ul>"},{"location":"macos/sonoma/#stationxml-seed-converter","title":"stationxml-seed-converter","text":"<p>Go to the GitHub repository of the project, and click in Releases go get the Java <code>jar</code> file with the latest version.</p> <p>Copy the <code>jar</code> file (e.g. <code>stationxml-seed-converter-2.1.3.jar</code>) in a directory such as <code>$HOME/bin</code>, and for convenience define the following alias:</p> <pre><code>alias stationxml-seed-converter='java -cp ~/bin -Xmx512m -jar ~/bin/stationxml-seed-converter-2.1.3.jar --verbose'\n</code></pre> <p>Then to run the program:</p> <pre><code>$ stationxml-seed-converter --input xml_file --output dlsv_file\n</code></pre>"},{"location":"macos/sonoma/#nonlinloc","title":"NonLinLoc","text":"<pre><code>$ git clone https://github.com/alomax/NonLinLoc.git\n$ cd NonLinLoc/src\n$ /bin/rm -rf bin\n$ mkdir bin\n$ rm CMakeCache.txt\n$ cmake .\n$ make &gt; make.log 2&gt;&amp;1\n</code></pre> <p>If compilation of <code>sphfd_SWR_NLL</code> fails, comment the following lines in <code>CMakeLists.txt</code></p> <pre><code># --------------------------------------------------------------------------\n# sphfd_SWR_NLL\n#\n#add_executable(sphfd_SWR_NLL sphfd_SWR_NLL.c)\n#target_link_libraries(sphfd_SWR_NLL GRID_LIB_OBJS m)\n#target_compile_options(sphfd_SWR_NLL PRIVATE \"-w\")\n</code></pre> <p>And recompile:</p> <pre><code>$ /bin/rm -rf bin\n$ mkdir bin\n$ rm CMakeCache.txt\n$ cmake .\n$ make &gt; make.log 2&gt;&amp;1\n</code></pre>"},{"location":"macos/sonoma/#passcal-passoft-software","title":"PASSCAL PASSOFT Software","text":"<p>PASSCAL PASSOFT web page.</p> <p>List of PASSOFT applications link</p> <p>Includes <code>dataselect</code>, <code>msi</code>, and <code>rdseed</code>.</p> <p>Installation:</p> <pre><code> $ conda create -n passoft3 passoft -c https://onyx.passcal.nmt.edu/passcal -c conda-forge\n $ conda update passoft -c https://onyx.passcal.nmt.edu/passcal -c conda-forge\n $ conda activate passoft3\n\n $ conda create -n viewer viewer -c https://onyx.passcal.nmt.edu/passcal -c conda-forge\n $ conda activate viewer\n</code></pre>"},{"location":"macos/sonoma/#seismic-unix","title":"Seismic Unix","text":"<p>Download the most recent distribution from the Seismic Unix WIKI.</p> <p>Uncompress the tar file in <code>/usr/local/cwp</code>.</p> <pre><code>$ cd /usr/local\n$ sudo mkdir cwp\n$ cd cwp\n$ tar xvzf cwp_su_all_4XRXX.tgz\n</code></pre> <p>Set the following variable in <code>.bashrc</code>.</p> <pre><code>export CWPROOT=/usr/local/cwp\n</code></pre> <p>Add <code>$CWPROOT/bin</code> to the <code>PATH</code>.</p> <pre><code>$ cd $CWPROOT/src/configs\n$ cp Makefile.config_macos ../Makefile.config\n$ cd ..\n$ make install\n$ make xtinstall\n</code></pre> <p>Additional items (not essential for running most of SU)</p> <pre><code>$ make xminstall    # for FFTLAB, a fun educational app for exploring the Fourier Transform\n$ make mglinstall   # Open GL applications, Graphics codes that could be built upon.\n$ make finstall     # Fortran codes, modeling and anisotropy codes.\n$ make sfinstall    # SFIO installation for segdread (the SEGD to SU data reader)\n</code></pre>"},{"location":"macos/sonoma/#educational","title":"Educational","text":"<ul> <li>jAmaSeis link</li> </ul>"},{"location":"macos/sonoma/#4-geoscience-software","title":"4. Geoscience software","text":""},{"location":"macos/sonoma/#gmt","title":"GMT","text":"<p>GMT6 can be installed with MacPorts:</p> <pre><code>$ sudo port install gdal +hdf5 +netcdf +openjpeg\n$ sudo port install gmt6 [+fftw3]\n\n$ sudo port install graphicsmagick ffmpeg         # if not installed previously\n</code></pre> <p>GMT is installed in <code>/opt/local/lib/gmt6/bin</code>. To use GMT in command line or scripts you need to add this directory to your <code>PATH</code>.</p>"},{"location":"macos/sonoma/#gis","title":"GIS","text":"<ul> <li>QGIS</li> <li>Grass</li> </ul>"},{"location":"macos/sonoma/#paraview","title":"Paraview","text":""},{"location":"macos/sonoma/#gplates","title":"GPlates","text":""},{"location":"macos/sonoma/#5-other-software","title":"5. Other software","text":""},{"location":"macos/sonoma/#rosetta-2","title":"Rosetta 2","text":"<p>Rosetta 2 enables a Mac with Apple silicon to use apps built for a Mac with an Intel processor [link]. Rosetta 2 is automatically installed the first time that we try to use an app that was built only for Mac computers with an Intel processor.</p>"},{"location":"macos/sonoma/#dropbox","title":"Dropbox","text":"<p>First login to your Dropbox account and click on Install Dropbox app to download the installer. </p> <p></p> <p>Run the installer and select the folders that you want to synchronize. These folders will be created under the directory <code>$HOME/Dropbox</code></p> <p>Make soft links to the folders that you want to access in your <code>$HOME</code> directory:</p> <pre><code>$ cd\n$ ln -s ~/Dropbox/Projects\n$ ln -s ~/Dropbox/src\n$ ln -s ~/Dropbox/scripts\n$ ln -s ~/Dropbox/data\n</code></pre> <p>Finally remove the original <code>Documents</code> folder from the Finder sidebar and add replace it with <code>~/Dropbox/Documents</code>. Also add to the sidebar commonly used folders such as <code>~/Dropbox/Projects</code>, etc.</p>"},{"location":"macos/sonoma/#zotero","title":"Zotero","text":"<p>Download the appropriate installer from the Zotero web page.</p> <p>By default, Zotero stores its files in <code>$HOME/Zotero</code>. If you want to change this location to for example <code>$HOME/Documents/Zotero</code>, go to Preferences &gt; Advanced &gt; Files and Folders and change the directory where the Zotero files are stored:</p> <p></p> <p>To synchronize your Zotero library between computers, you need to create a Zotero account and enable syncing. Go to Preferences &gt; Sync and enter username and password of your Zotero account and click on Set Up Syncing.</p> <p></p> <p>After that some additional options will appear. Uncheck the two boxes in the File Syncing section.</p> <p></p> <p>The synchronization of a large PDF collection requires a paid Zotero subscription. However, the synchronization can be done with other shared folders such as Dropbox.</p> <p>In your first installation of Zotero, store the PDFs in a shared Dropbox location instead of the Zotero folder:</p> <ol> <li>Quit Dropbox</li> <li>Go to local Zotero directory (e.g. <code>$HOME/Documents/Zotero</code>) </li> <li>Copy the <code>storage</code> folder to <code>$HOME/Dropbox/Zotero/storage</code></li> <li>Rename directory <code>storage</code> to <code>storage_old</code></li> <li>Make a soft link of Dropox storage directory <code>$HOME/Dropbox/Zotero/storage</code>     to the current directory</li> <li>Restart Zotero</li> </ol> <p>The commands to enter in the terminal are:</p> <pre><code>$ cd\n$ mkdir -p ~/Dropbox/Zotero\n$ cd Documents/Zotero\n$ cp -r storage ~/Dropbox/Zotero/.\n$ mv storage storage_old\n$ ln -s ~/Dropbox/Zotero/storage\n</code></pre> <p>If you already have a shared Zotero Dropbox folder, you can access it and synchronize it from other computers.</p> <ol> <li>Install Zotero and optionally change the Zotero folder to <code>$HOME/Documents/Zotero</code></li> <li>Login to your Zotero account, uncheck the File Syncing options and wait for the    synchronization of all papers (this synchronizes only the metadata, not the PDFs)</li> <li>Quit Zotero</li> <li>Go to local Zotero directory (e.g. <code>$HOME/Documents/Zotero</code>) </li> <li>Rename directory <code>storage</code> to <code>storage_old</code></li> <li>Make a soft link of Dropox storage directory <code>$HOME/Dropbox/Zotero/storage</code>     to the current directory</li> <li>Restart Zotero</li> </ol> <p>The commands to enter in the terminal are:</p> <pre><code>$ cd\n$ cd Documents/Zotero\n$ mv storage storage_old\n$ ln -s ~/Dropbox/Zotero/storage\n</code></pre>"},{"location":"macos/sonoma/#microsoft-office","title":"Microsoft Office","text":"<p>Log in to Microsoft 365 account to download installer.</p> <p>Remove unwanted applications (e.g. Outlook, OneNote) just after installation.</p>"},{"location":"macos/sonoma/#mactex-and-texstudio","title":"MacTeX and TeXstudio","text":"<p>To install LaTeX in a Mac, the best alternative is to install the MacTeX distribution. Download and run the <code>pkg</code> installer (it is a large download).</p> <p>Once you have installed MacTeX you can also install the TeXstudio integrated writing environment for creating LaTeX documents. Download the <code>dmg</code> installer, open it and copy the app to the <code>Applications</code> folder.</p>"},{"location":"macos/sonoma/#miscellaneous","title":"Miscellaneous","text":"<p>The following apps can be installed from the App Store:</p> <ul> <li>The Unarchiver: open compressed files</li> <li>Pocket: save web articles to read later</li> <li>Simple Comic: comic reader for <code>cbz</code> and <code>cbr</code> formats</li> </ul> <p>The following apps can be installed by downloading the installer from the developer's web page:</p> <ul> <li>Adobe Acrobat Reader: for reading and digitally sign PDF documents</li> <li>Brave: web browser</li> <li>Firefox: web browser</li> <li>Tor: web browser</li> <li>DjView: visualize scanned documents in <code>djvu</code> format (link)</li> <li>Google Earth Pro: map and satellite imagery viewer (download)</li> <li>Spotify: listen to music and podcasts</li> <li>qBittorrent: download torrent files</li> <li>VLC: video and music player</li> <li> <p>zoom: video conference tool</p> </li> <li> <p>CorelDRAD</p> </li> <li>FortiClient</li> <li>OpenVPN</li> <li> <p>Google Docs, Sheets, Slides: simply open browser</p> </li> <li> <p>AutoFirma</p> </li> </ul>"},{"location":"macos/tips/","title":"Tips","text":"<p>Reset iCloud bookmarks:</p> <p>http://sheepsystems.com/discuss/YaBB.pl?num=1327319559/0#0</p>"},{"location":"macos/tips/#screen-capture","title":"Screen capture","text":"<p><code>cmd + SHIFT + 3</code>           : capture entire desktop to file</p> <p><code>cmd + ctrl + SHIFT + 3</code>        : copy entire desktop to clipboard</p> <p><code>cmd + SHIFT + 4 , selection</code>   : capture selection</p> <p><code>cmd + SHIFT + 4 , space bar</code>   : capture selected window</p> <p>Change the Default Screen Shot Image Type:</p> <pre><code>defaults write com.apple.screencapture type jpg &amp;&amp; killall SystemUIServer\ndefaults write com.apple.screencapture type png &amp;&amp; killall SystemUIServer\n</code></pre>"},{"location":"macos/tips/#shortcuts","title":"Shortcuts","text":"<p>Alternative shortcuts for copy, paste, etc:</p> <pre><code>Cut = Ctrl+X = Shift+Delete\nCopy = Ctrl+C = Ctrl+Insert\nPaste = Ctrl+V = Shift+Insert\nUndo = Ctrl+Z = Alt+Backspace\n</code></pre>"},{"location":"macos/tips/#safari","title":"Safari","text":"<p>Save Web Pages as PDF files (Mac, iPad and iPhone) javascript:pdf_url=location.href;location.href='http://pdfmyurl.com?url='+escape(pdf_url)</p>"},{"location":"macos/tips/#word","title":"Word","text":"<p>Default font in Word: Cambria Change default:</p> <p>Formato &gt; Fuente &gt; Predeterminar    (then click \"OK\") Format &gt; Font &gt; Set Default</p> <p>Add line numbers for manuscript:</p> <p>Formato &gt; Dise\u00f1o de documento | Dise\u00f1o | N\u00fameros de l\u00ednea | Agregar numeraci\u00f3n de l\u00ednea | Continuo</p> <p>Default fone in TextEdit: Monaco</p>"},{"location":"macos/tips/#mail","title":"Mail","text":"<p>Signature with font/images in Mail:</p> <p>create with TextEdit an rtf file using fonts, etc copy signature from TextEdit and paste it in Mail &gt; Preferences &gt; Signatures</p> <p>Capture signature with Preview</p> <p>Preferences &gt; Signatures (take picture with camera)</p> <p>To add signature:</p> <p>Use Preview. Annotations toolbar &gt; Signature button (click and drag for signature size and location)</p> <p>Customize folder (or file) icon:</p> <ul> <li>Copy image for icon in clipboard (from preview, photoshop, ...)</li> <li>Open \"Get Info\"</li> <li>Select small icon on top (not large one in preview)</li> <li>Paste image</li> </ul> <p>To delete, select again small icon and hit delete.</p> <p>Do not show updates to new operating system:</p> <pre><code>$ sudo softwareupdate --ignore \"macOS Catalina\"\n$ defaults write com.apple.systempreferences AttentionPrefBundleIDs 0 # this eliminates red circle in Dock icon\n$ killAll Dock\n</code></pre> <p>To reset</p> <p>$ sudo softwareupdate --reset-ignored</p>"},{"location":"macos/tips/#command-line-tools-to-free-space","title":"Command line tools to free space","text":"<p>Docker:</p> <pre><code>$ docker system prune --all\n</code></pre> <p>Conda:</p> <pre><code>$ conda clean --all\n</code></pre> <p>Git:</p> <pre><code>$ git gc --aggressive --prune=now\n</code></pre> <p>Homebrew:</p> <pre><code>$ brew cleanup -s\n</code></pre> <p>Mac/Linux Cache Folder:</p> <pre><code>$ rm -r ~/.cache\n</code></pre> <p>Create space in a Time Machine disk that is almost full:</p> <pre><code>$ sudo tmutil delete /Volumes/Time\\ Machine\\ Backups/Backups.backupdb/Antonio\u2019s\\ iMac/2016-0?-*\nPassword:\nDeleting: /Volumes/Time Machine Backups/Backups.backupdb/Antonio\u2019s iMac/2016-01-07-125646\n.\n.\n.\n</code></pre> <p>Set file as template:</p> <p>Get Info &gt; Stationery </p> <p>Clicking on file duplicates it.</p> <p>Versions in TextEdit:</p> <p>File &gt; Revert Document... &gt; Browse versions</p> <p>Setup a shortcut for Launchpad</p> <p>System Preferences &gt; Keyboard &gt; Keyboard shortcuts &gt; Launchpad &amp; Dock (double click and hit enter in \"Show Launchpad\" and introduce new shortcut, e.g. alt + cmd + l)</p>"},{"location":"macos/tips/#dropbox","title":"Dropbox","text":"<ul> <li>Make soft links to Dropbox folders:</li> </ul> <p>% ln -s ~/Dropbox/Documentos ~/Documentos</p> <ul> <li> <p>Text notes</p> </li> <li> <p>Copy DNI, passport, etc. Folder \"Travel\" with travel documents</p> </li> <li> <p>Contacts(?): ~/Library/Application Support/Address Book</p> </li> <li> <p>Folder with photos (shared with family's iPad)</p> </li> </ul>"},{"location":"macos/tips/#google-earth","title":"Google Earth","text":"<p>To fix error \"Unable to contact the login server\"</p> <pre><code>$ rm -rf ~/Library/Caches/Google\\ Earth\n$ rm -rf ~/Library/Caches/com.Google.GoogleEarth*\n$ rm -f ~/Library/Preferences/com.google.GoogleEarth*\n$ rm -f ~/Library/Preferences/com.google.GECommonSettings.plist\n</code></pre>"},{"location":"macos/tips/#misc-commands","title":"Misc commands","text":"<p>To create the locate database (/var/db/locate.database) run the following command: </p> <pre><code>$ sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist\n</code></pre> <p>Needed another command to update it regularly??</p> <p>Remove duplicate entries from \"Open with\" menu</p> <pre><code>$ /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain user\n$ killall Finder\n</code></pre> <p>Always Show the User Library Folder:</p> <pre><code>$ chflags nohidden ~/Library/\n</code></pre>"},{"location":"macos/tips/#shortcuts_1","title":"Shortcuts","text":"<p>cmd + tab       toggle between applications cmd + ` (backtick)  toggle between windows of same application cmd + shift + H     Finder goes to home directory</p> <p>select elements in same folder ; cmd + ctrl + N ; creates a new folder and moves selected elements </p> <p>Delete key (delete following character): fn + backspace or ctrl + D Delete word:                            Delete paragraph</p> <p>ctrl + alt + backspace: delete previous word cmd + backspace: delete until beginning of line</p> <p>(dock) - show all windows</p>"},{"location":"macos/tips/#setup-a-shortcut-for-launchpad","title":"Setup a shortcut for Launchpad","text":"<p>System Preferences &gt; Keyboard &gt; Keyboard shortcuts &gt; Launchpad &amp; Dock (double click and hit enter in \"Show Launchpad\" and introduce new shortcut, e.g. alt + cmd + l)</p>"},{"location":"macos/tips/#spotlight","title":"SPOTLIGHT","text":"<p>cmd + Space         open/close Spotlight search field cmd + alt + Space       open/open  Spotlight window (Finder)</p> <p>click opens document while preview press cmd key to see path, text, etc. cmd + alt shows path cmd + click opens finder window pointing to document</p> <p>on popover preview you can \"pre listen\", FaceTime, email, ...</p> <p>you can drag an element of the search to the Desktop or to an Application</p> <p>cmd + alt + drag creates a link in the destination folder</p> <p>cmd + ctrl + F = search \"filename contains\"</p>"},{"location":"macos/tips/#text","title":"TEXT","text":"<p>cmd + up    inicio del documento cmd + down  final del documento</p> <p>cmd + left  inicio de l\u00ednea cmd + right final de l\u00ednea</p> <p>alt + left  inicio de palabra alt + right final de palabra</p>"},{"location":"macos/tips/#safari_1","title":"SAFARI","text":"<p>cmd + L     selects url (useful to delete it or copy it) cmd + alt + F   move input to search field cmd + alt + 2   show history</p> <p>space bar   scroll down shift + space   scroll up</p> <p>cmd + click     open link in new tab of foreground cmd + shift + click open link in new tab on background</p> <p>cmd + shift + left/right    move between tabs</p> <p>cmd + I         mail entire web page cmd + shift + I     mail link to web page</p> <p>cmd + shift + D     add page to reading list shift + click       add link to reading list (no need to open page) cmd + shift + L     open reading list</p> <p>Look for more by checking the menus on Safari</p>"},{"location":"macos/tips/#application-shortcuts","title":"Application shortcuts","text":"<p>Create shortcuts for specific applications:</p> <p>System preferences | Keyboard | Keyboard shortcuts | Application shortcuts</p> <p>SPACES/DESKTOPS</p> <p>(fn +) F8           shows/hides all Spaces/Desktops</p> <p>(fn +) F11          shows/hides Desktop</p> <p>ctrl + arrow            changes Space ctrl + 1            changes to Space 1</p> <p>cmd + shift + 3         captures entire screen to png file cmd + shift + 4         captures selected area to png file cmd + shift + 4 Spacebar    captures selected Application window</p> <p>(cmd + ctrl + ...       copies capture to clipborad)        </p> <p>Do not work (in Lion)</p> <p>(fn +) F9           shows/hides all Applications in current Space (also minimized)                 if pressed after (fn +) F8 shows all Applications in all Spaces (fn +) F10          shows/hides all windows of current Application</p> <p>2 fingers up/down       scroll 2 fingers left/right        back/next in Safari (behavior in other apps?)                 (both work with one finger in Magic Mouse)</p> <p>3 fingers up/down       opens/closes Mission Control (same as clicking Mission Control on the Dock)                 (does not work on Magic Mouse) 3 fingers right/left        changes between full screen apps and the Desktop(s)                 (two fingers on the Magic Mouse)</p> <p>Default font in Word: Cambria Change default:</p> <p>Formato &gt; Fuente &gt; Predeterminar    (then click \"OK\") Format &gt; Font &gt; Set Default</p> <p>Add line numbers for manuscript:</p> <p>Formato &gt; Dise\u00f1o de documento | Dise\u00f1o | N\u00fameros de l\u00ednea | Agregar numeraci\u00f3n de l\u00ednea | Continuo</p> <p>Default fone in TextEdit: Monaco</p>"},{"location":"macos/tips/#for-work","title":"For work","text":"<p>Java (not installed by default)</p> <p>Office, Adobe CSS5.X, Adobe Acrobat 10, EndNote</p> <p>Papers2</p> <p>Vdl, Unarchiver iTerm2</p>"},{"location":"macos/tips/#for-home","title":"For Home","text":"<p>Handbrake:      rip DVDs/CDs Calibre:        eBooks</p>"},{"location":"macos/tips/#settings","title":"Settings","text":"<p>Import Gmail calendars in iCal Firefox Sync Enable home sharing (?)\u00a0 Mail?</p>"},{"location":"macos/tips/#command-line-preferences","title":"Command-line preferences","text":"<p>Change capture file format from png to jpg:</p> <pre><code>$ defaults write com.apple.screencapture type jpg\n$ killall SystemUIServer\n</code></pre> <p>Disable all animations:</p> <pre><code>$ defaults write com.apple.finder DisableAllAnimations -bool true\n</code></pre> <p>Disable widgets:</p> <pre><code>$ defaults write com.apple.dashboard mcx-disabled -boolean YES\n$ killall Dock\n</code></pre> <p>Display iTunes tracks in the Dock</p> <pre><code>$ defaults write com.apple.dock itunes-notifications -bool TRUE ; killall Dock\n</code></pre> <p>Add recent items stack:</p> <pre><code>$ defaults write com.apple.dock persistent-others -array-add '{ \"tile-data\" = { \"list-type\" = 1; }; \"tile-type\" = \"recents-tile\"; }' ; killall Dock\n</code></pre> <p>Run maintenance scripts:</p> <pre><code>$ ls -la /var/log/*.out\n-rw-r--r--  1 root  wheel  366451 Jul 10 11:34 /var/log/daily.out\n-rw-r--r--  1 root  wheel    1832 Jul 10 11:34 /var/log/monthly.out\n-rw-r--r--  1 root  wheel    3814 Jul 10 11:34 /var/log/weekly.out\n$ sudo periodic daily weekly monthly\n</code></pre>"},{"location":"macos/tips/#searchable-pdf-ocr","title":"Searchable PDF - OCR","text":"<p>Scanners: Fujitsu ScanSnap S1300 (includes software Abbyy FineReader)           Epson WorkForce Pro    (\")</p> <p>Abbyy FineReader DevonThink Pro Office - includes PDF manager PDFpen</p> <p>Prizmo for iPhone</p>"},{"location":"macos/tips/#convert-eps-to-png","title":"Convert EPS to PNG","text":"<pre><code>\n# EPSTOPNG\n\n#####\n#    convert  ImageMagick\n#    gm convert GraphicsMagick\n#\n#    this script will convert an EPS to a PNG with 150 dots/inch ~ 90 dots/cm which is OK\n#    for PowerPoint\n#  \n#    The background is forced to be white and the transparency removed\n#####\n\n\nEPS=$1\nBASE=`basename ${EPS} .eps`\n#gm convert -trim -density 150x150 -resize 1000x1000 -verbose ${BASE}.eps ${BASE}.png\nconvert -trim -density 150x150 -resize 1000x1000 -background white -alpha remove -verbose ${BASE}.eps ${BASE}.png\n\n\n\n\n# EPSTOPNG30\n\n#####\n#    convert  ImageMagick\n#    gm convert GraphicsMagick\n#\n#    this script will convert an EPS to a PNG with 300 dots/inch ~ 120 dots/cm which is OK\n#    for PowerPoint\n#  \n#    The background is forced to be white and the transparency removed\n#####\n\n\nEPS=$1\nBASE=`basename ${EPS} .eps`\n#gm convert -trim -density 300x300 -resize 2000x2000 -verbose ${BASE}.eps ${BASE}.png\nconvert -trim -density 300x300 -resize 2000x2000 -background white -alpha remove -verbose ${BASE}.eps ${BASE}.png\n\n\n\n# EPSTOPNGWHITE\n\nEPS=$1\nBASE=`basename ${EPS} .eps`\nconvert -trim ${EPS} -background white -alpha remove -alpha off ${BASE}.png\n</code></pre>"},{"location":"macos/tips/#more-tips","title":"More tips","text":"<ul> <li>FileVault encripts data</li> <li>Verify and repair disk permissions</li> <li> <p>Disk utility can create partitions</p> </li> <li> <p>Textedit opens rtf, Word (doc/docx) and OpenOffice documents   Can create pdf directly (Export as PDF)   Can toggle between rtf and txt   Can create tables and lists</p> </li> <li> <p>VoiceOver install additional voices!!!</p> </li> <li> <p>Preview can export to PDF   Can add annotations to PDF   Can add signature to PDF   Can convert color to B/W   Can make screen capture   Select images and convert them to same height and width (Tools &gt; Adjust Size)   Can edit images, crop</p> </li> </ul>"},{"location":"macos/ventura/","title":"Ventura installation","text":""},{"location":"macos/ventura/#fresh-macos-ventura-installation","title":"Fresh macOS Ventura installation","text":""},{"location":"macos/ventura/#1-go-to-app-store-to-get-installer","title":"1. Go to App Store to get installer","text":"<p>Once the download has completed it will ask you to install the update. Do not press continue, instead quit the program.</p>"},{"location":"macos/ventura/#2-format-pen-drive-for-installation","title":"2. Format pen drive for installation","text":"<p>Open the application Disk Utility</p> <p>Select <code>View &gt; Show all devices</code>. This makes available the <code>GUID partition</code> option.</p> <p>Select the first option for disk format. WARNING: do not use APFS (some tutorials are wrong).</p> <p>Call the new partition on the pen drive <code>Untitled</code>. Later it will be latter renamed to \"Install macOS Venture\".</p>"},{"location":"macos/ventura/#3-make-the-pen-drive-bootable","title":"3. Make the pen drive bootable","text":"<p>Enter the following command:</p> <pre><code>$ sudo /Applications/Install\\ macOS\\ Ventura.app/Contents/Resources/createinstallmedia --volume /Volumes/Untitled\nPassword:\nReady to start.\nTo continue we need to erase the volume at /Volumes/Untitled.\nIf you wish to continue type (Y) then press return: Y\nErasing disk: 0%... 10%... 20%... 30%... 100%\nCopying essential files...\nCopying the macOS RecoveryOS...\nMaking disk bootable...\nCopying to disk: 0%... 10%... 20%... 30%... 40%... 50%... 60%... 70%... 80%... 90%... 100%\nInstall media now available at \"/Volumes/Install macOS Ventura\"\n</code></pre>"},{"location":"macos/ventura/#4-allow-booting-from-an-external-disk","title":"4. Allow booting from an external disk","text":"<p>Reboot the computer in recovery mode by pressing <code>cmd + R</code>. This might ask you to enter the password a couple of times.</p> <p>Go to <code>Utilities &gt; Startup security utility</code> and select <code>Allow booting from external of removable media</code>.</p> <p>Insert the pen drive in the computer and reboot again to Startup Manager by pressing the <code>opt</code> key, and select the <code>Install macOS Monterrey</code> drive.</p> <p>For a fresh installation you need to go first to <code>Disk Utility</code> and erase the disk. If not it simply upgrades the operating system.</p> <p>After erasing the disk select <code>Install macOS Monterrey</code> (WARNING: and additional update might be required in order to use the bootable external disk).</p> <p>Once the installation process has started, accept the terms and select <code>Install in Macintosh HD</code>.</p>"},{"location":"macos/ventura/#5-install-development-tools","title":"5. Install development tools","text":""},{"location":"macos/ventura/#bash","title":"<code>bash</code>","text":"<p>Because of license issues, in the latest versions of macOS the default shell is <code>zsh</code> instead of <code>bash</code>. To change the default shell to <code>bash</code> and silence the deprecation warning open a terminal and type:</p> <pre><code>$ chsh -s /bin/bash\n$ export BASH_SILENCE_DEPRECATION_WARNING=1\n</code></pre> <p>Initially (before creating/modifying the <code>.bash_profile</code> and <code>.bashrc</code> files) the <code>$PATH</code> environmental variable is set to:</p> <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>Because of those license issues, the version of <code>bash</code> provided in <code>/bin/bash</code> is very old (3.2, from 2007!)</p> <pre><code>$ echo $BASH_VERSION\n3.2.57(1)-release\n\n$ /bin/bash --version\nGNU bash, version 3.2.57(1)-release (x86_64-apple-darwin21)\nCopyright (C) 2007 Free Software Foundation, Inc.\n</code></pre> <p>Once you install Macports and a few packages, a newer version of <code>bash</code> will be available in  <code>/opt/local/bin/bash</code>:</p> <pre><code>$ /opt/local/bin/bash --version\nGNU bash, version 5.1.16(1)-release (x86_64-apple-darwin21.1.0)\nCopyright (C) 2020 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\n\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n</code></pre> <p>To make this <code>bash</code> the default, add <code>/opt/local/bin/bash</code> to the <code>/etc/shells</code> file:</p> <pre><code>$ sudo vi /etc/shells\n\n$ cat /etc/shells\n# List of acceptable shells for chpass(1).\n# Ftpd will not allow users to connect who are not using\n# one of these shells.\n\n/bin/bash\n/opt/local/bin/bash\n/bin/csh\n/bin/dash\n/bin/ksh\n/bin/sh\n/bin/tcsh\n/bin/zsh\n</code></pre> <p>and then:</p> <pre><code>$ chsh -s /opt/local/bin/bash\n</code></pre> <p>To use this shell in shell scripts, replace the common shebang <code>#!/bin/bash</code> for:</p> <pre><code>#!/usr/bin/env bash\n</code></pre>"},{"location":"macos/ventura/#xcode","title":"XCode","text":"<p>Go to App Store and install XCode. Once it is installed, open it and it will install the Command line tools. If the tools are not installed automatically it can be done from the command line:</p> <pre><code>$ xcode-select --install         # agree to license\n$ gcc --version\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/4.2.1\nApple clang version 13.0.0 (clang-1300.0.29.30)\nTarget: x86_64-apple-darwin21.3.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n</code></pre> <p>After the installation of XCode, the <code>$PATH</code> variable is expanded to:</p> <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin\n</code></pre>"},{"location":"macos/ventura/#xquartz","title":"XQuartz","text":"<p>Then install XQuartz for X Window support. After the installation of XQuartz the <code>$PATH</code> variable is expanded to:</p> <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin\n</code></pre>"},{"location":"macos/ventura/#gcc-c-and-fortran-compilers","title":"GCC C and Fortran compilers","text":"<p>Install <code>gcc</code> and <code>gfortran</code> compilers from the HPC Mac OS X web page. Download the appropriate <code>.tar.gz</code> file (as of January 2022, the version for Monterrey was <code>gcc-11.2-bin.tar.gz</code>). To install it, simply type:</p> <pre><code>$ sudo tar xvf gcc-11.2-bin.tar -C /.\n\n$ gcc --version\ngcc (GCC) 11.2.0\nCopyright (C) 2021 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n$ gfortran --version\nGNU Fortran (GCC) 11.2.0\nCopyright (C) 2021 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre>"},{"location":"macos/ventura/#setup-dotfiles","title":"Setup dotfiles","text":"<p>At this point it is convenient to setup the <code>.bash_profile</code> and <code>.bashrc</code> files. Initially <code>.bash_profile</code> contains simply:</p> <pre><code>#\nif [ -f ~/.bashrc ]; then\n    . ~/.bashrc\nfi\n</code></pre> <p>Important: unlike in Linux, in macOS all the new terminals are login terminals, so they  all run <code>.bash_profile</code>.</p>"},{"location":"macos/ventura/#macports","title":"Macports","text":"<p>Now we can install the Macports package manager. Download the corresponding <code>pkg</code> file and run the installation.</p> <p>This adds the following lines to the <code>.bash_profile</code> file:</p> <pre><code># MacPorts Installer addition on 2021-12-22_at_17:39:58: adding an appropriate PATH variable for use with MacPorts.\nexport PATH=\"/opt/local/bin:/opt/local/sbin:$PATH\"\n# Finished adapting your PATH environment variable for use with MacPorts.\n</code></pre> <p>These lines could be removed and added to the <code>$PATH</code> declaration in <code>.bashrc</code>.</p>"},{"location":"macos/ventura/#python","title":"Python","text":"<p>See specific section.</p> <p>Installing the PSF Python adds the following lines to <code>.bash_profile</code>:</p> <pre><code># Setting PATH for Python 3.10\n# The original version is saved in .bash_profile.pysave\nPATH=\"/Library/Frameworks/Python.framework/Versions/3.10/bin:${PATH}\"\nexport PATH\n</code></pre> <p>The resulting <code>$PATH</code> looks like:</p> <pre><code>/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin\n</code></pre> <p>Installing the Anaconda Python distribution adds the following lines to <code>.bash_profile</code></p> <pre><code># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/Users/antonio/opt/anaconda3/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n    if [ -f \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\"\n    else\n        export PATH=\"/Users/antonio/opt/anaconda3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n# &lt;&lt;&lt; conda initialize &lt;&lt;&lt;\n</code></pre> <p>And sets the <code>$PATH</code> variable to:</p> <pre><code>/Users/antonio/opt/anaconda3/bin:/Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin\n</code></pre> <p>However, this initializes the conda <code>base</code> environment for each new shell opened. To prevent this:</p> <pre><code>$ conda config --set auto_activate_base false\n</code></pre> <p>This creates a file <code>.condarc</code> with the following content:</p> <pre><code>auto_activate_base: false\n</code></pre> <p>Now when opening a new shell the conda <code>base</code> environment is not activated, and the <code>$PATH</code> variable is set to:</p> <pre><code>/Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin\n</code></pre> <p>This means that the PSF Python takes preference over the Anaconda Python. To change this, simply activate a conda environment:</p> <pre><code>$ conda activate         # activates the base environment\n$ conda activate seismo  # activates the \"seismo\" environment\n</code></pre>"},{"location":"programming/cuda/","title":"CUDA","text":""},{"location":"programming/cuda/#cuda-python-with-numba","title":"CUDA Python with <code>Numba</code>","text":"<p><code>Numba</code> can compile for the CPU and GPU using function decorators.</p> <p>For example the the <code>@jit</code> decorator acts on a function <code>add</code> by doing <code>add = jit(add)</code>.</p> <p>Not all operation/features of Python available in <code>Numba</code>. For example:</p> <ul> <li>dictionaries</li> <li><code>Numpy</code> functions (use <code>math.</code> functions instead)</li> </ul>"},{"location":"programming/cuda/#cpu-optimization-in-numba","title":"CPU optimization in Numba","text":"<p>This is accomplished with the <code>@jit</code> decorator:</p> <pre><code>from numba import jit\nimport math\n\n@jit\ndef hypot(x, y):\n    # Implementation from https://en.wikipedia.org/wiki/Hypot\n    x = abs(x);\n    y = abs(y);\n    t = min(x, y);\n    x = max(x, y);\n    t = t / x;\n    return x * math.sqrt(1+t*t)\n</code></pre>"},{"location":"seismology/data_requests/","title":"Data Requests","text":""},{"location":"seismology/data_requests/#mass-downloaders","title":"Mass Downloaders","text":""},{"location":"seismology/data_requests/#stream2segment-gfz","title":"Stream2segment (GFZ)","text":"<pre><code>https://github.com/rizac/stream2segment/blob/master/README.md\n</code></pre> <p>Zaccarelli, R., Bindi, D., Strollo, A., Quinteros, J., &amp; Cotton, F. (2019). Stream2segment: An Open\u2010Source Tool for Downloading, Processing, and Visualizing Massive Event\u2010Based Seismic Waveform Datasets. Seismological Research Letters, 90(5), 2028. http://doi.org/10.1785/0220180314.</p>"},{"location":"seismology/data_requests/#obspydmt-oxford","title":"obspyDMT (Oxford)","text":"<pre><code>https://github.com/kasra-hosseini/obspyDMT\n</code></pre> <p>Hosseini, K., &amp; Sigloch, K. (2017). ObspyDMT: a Python toolbox for retrieving and processing large seismological data sets. Solid Earth, 8(5), 1047\u20131070. http://doi.org/10.5194/se-8-1047-2017</p>"},{"location":"seismology/data_requests/#obspy-mass_downloader-module","title":"ObsPy mass_downloader module","text":"<pre><code>https://docs.obspy.org/packages/autogen/obspy.clients.fdsn.mass_downloader.html\n\nobspy.clients.fdsn - FDSN Web service client for ObsPy\n\nhttps://docs.obspy.org/packages/obspy.clients.fdsn.html\n</code></pre> <p>Good for complex or larger queries:</p> <pre><code>obspy.clients.fdsn.mass_downloader (for multiple data centers)\n</code></pre>"},{"location":"seismology/data_requests/#fdsnws","title":"FDSNWS","text":"<p>Using web services: FDSNWS &amp; IRISWS</p>"},{"location":"seismology/data_requests/#station-data-fdsnws","title":"Station data (FDSNWS)","text":"<pre><code>http://service.iris.edu/fdsnws/station/1/query?...\n</code></pre> <p>Type http_request_string in a web browser or use <code>wget</code> or <code>curl</code> from command line</p> <pre><code>$ wget -O output_file \"http_request_string\"\n</code></pre> <p>(quotation marks are important to avoid that the shell interprets special characters)</p> <p>Use HTTP POST</p> <p>All of the parameters that can be submitted with the GET method are allowed in POST with the following exceptions: startbefore, endbefore, startafter, endafter</p> <pre><code>$ wget --post-file=post_request_file -O output_file http://service.iris.edu/fdsnws/station/1/query\n</code></pre> <p>Example of post_request_file:</p> <pre><code>level=channel\nformat=text\nTA A25A -- BH? 2010-03-25T00:00:00 2010-04-01T00:00:00\nIU ANMO * BH? 2010-03-25T00:00:00 2010-04-01T00:00:00\nIU ANMO 10 HHZ 2010-03-25T00:00:00 2010-04-01T00:00:00\nII KURK 00 BH? 2010-03-25T00:00:00 2010-04-01T00:00:00\n</code></pre> <p>In general:</p> <pre><code>parameter=&lt;value&gt;\nparameter=&lt;value&gt;\nparameter=&lt;value&gt;\n&lt;network&gt; &lt;station&gt; &lt;location&gt; &lt;channel&gt; &lt;starttime&gt; &lt;endtime&gt;\n&lt;network&gt; &lt;station&gt; &lt;location&gt; &lt;channel&gt; &lt;starttime&gt; &lt;endtime&gt;\n...\n</code></pre>"},{"location":"seismology/data_requests/#event-data-fdsnws","title":"Event data (FDSNWS)","text":"<pre><code>http://service.iris.edu/fdsnws/event/1/query?...\n</code></pre> <p>This service will not be offered long term, so it is better to go directly to ISC/NEIC</p>"},{"location":"seismology/data_requests/#waveform-data-fdsnws","title":"Waveform data (FDSNWS)","text":"<pre><code>http://service.iris.edu/fdsnws/dataselect/1/query?...\n</code></pre> <p>Same options:</p> <ul> <li>type URL in web browser (small requests)</li> <li>wget/curl (automated or scripted requests)</li> <li> <p>HTTP POST (automated or scripted requests)</p> <p>quality= minimumlength= longestonly=  ..."},{"location":"seismology/data_requests/#waveform-data-irisws","title":"Waveform data (IRISWS)","text":"<pre><code>http://service.iris.edu/irisws/timeseries/1/query?...\n</code></pre> <p>accepts HTTP POST?</p> <p>Signal processing options:</p> <ul> <li>high, low and band-pass filter</li> <li>remove mean value</li> <li>scaling by constant value</li> <li>deconvolution of instrument response (with frequency limits and unit conversion)</li> <li>differentiation and integration</li> <li> <p>decimation to lower sample rates</p> </li> <li> <p>good for complex or large queries</p> </li> </ul>"},{"location":"seismology/data_requests/#other-iris-web-services","title":"Other IRIS web services","text":"<ul> <li> <p><code>fedcatalog</code>: A service for federating requests for channel metadata across multiple data centers</p> </li> <li> <p><code>syngine</code>: A service for synthetic seismograms</p> </li> <li> <p><code>timeseriesplot</code>: A charting webservice offering timeseries graphic display in single-line or helicorder styles</p> </li> <li> <p><code>rotation</code>: rotate waveform data into alternate coordinate system</p> </li> <li> <p><code>sacpz</code>: instrument response information (per channel)</p> </li> <li> <p><code>resp</code>: channel response information</p> </li> <li> <p><code>evalresp</code>: instrument response information evaluated from IRIS metadata</p> </li> <li> <p><code>virtualnetwork</code>: list of stations in a virtual network</p> </li> <li> <p><code>traveltime</code>: travel times and ray parameters for seismic phases using a 1-D spherical earth model</p> </li> <li> <p><code>flinnengdahl</code>: a Flinn-Engdahl region code or name for a latitude, longitude pair</p> </li> <li> <p><code>distaz</code>: distance, azimuth and back-azimuth between two locations</p> </li> <li> <p><code>metadatachange</code>: changes made to SEED metadata</p> </li> </ul>"},{"location":"seismology/data_requests/#other-tools","title":"Other tools","text":""},{"location":"seismology/data_requests/#jweed","title":"JWEED","text":"<p>JWEED and other IRIS software use web services</p>"},{"location":"seismology/data_requests/#fetch-scripts","title":"Fetch scripts","text":"<p>FetchData-2016.089.txt FetchEvent-2014.340.txt FetchMetadata-2014.316.txt FetchSyn-2016.007.txt</p> <p>Advantages:</p> <ul> <li>access to other data centers (see -F option)</li> <li>can read from BREQ_FAST file</li> </ul>"},{"location":"seismology/data_requests/#cwbquery","title":"CWBQuery","text":"<p>Backup vdl account and cwb from edge1.ictja.csic.es</p> <ol> <li>Backup data files</li> </ol> <pre><code>ndatapath=2\ndatapath=/data2/cwb/            -&gt; edge2.icjta.csic.es:/data9/cwb2/cwb/*.ms *.idx\ndatapath1=/data1/cwb/           -&gt; edge2.ictja.csic.es:/data8/cwb1/cwb/*.ms *.idx\n</code></pre> <ol> <li>Backup vdl home directory</li> </ol> <pre><code>$ cd /home\n$ tar cvzf ~antonio/backups/vd_edge1.tgz vdl\n</code></pre> <p>(includes <code>.bash* files</code>)</p> <p>Older backups are:</p> <pre><code>edge1.tar\nedge1dot.tar (hidden files and directories: .*)\nedge2.tar\n</code></pre> <ol> <li>Save crontab file</li> </ol> <pre><code>$ crontab -e\n\n# DO NOT EDIT THIS FILE - edit the master and reinstall.\n# (/tmp/crontab.31532 installed on Mon Aug  3 16:07:26 2009)\n# (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)\n* * * * * bash scripts/chkInvToSEED 200 &gt;&gt;LOG/InvToSEED.log1 2&gt;&amp;1\n* * * * * bash scripts/chkJarProcessGC TcpHoldings 200 &gt;&gt;LOG/TcpHoldings.log1 2&gt;&amp;1\n* * * * * bash scripts/chkJarProcessGC QueryServer 100 \"\" \"\" -allowrestricted &gt;&gt; LOG/QueryServer.log1 2&gt;&amp;1\n* * * * * bash scripts/chkJarProcessGC EdgeMom 400 &gt;&gt;LOG/EdgeMom.log1 2&gt;&amp;1\n</code></pre> <ol> <li>Save <code>/etc/security/limits.conf</code></li> </ol> <pre><code>$ cat /etc/security/limits.conf\n# /etc/security/limits.conf\n#\n#Each line describes a limit for a user in the form:\n#\n#&lt;domain&gt;        &lt;type&gt;  &lt;item&gt;  &lt;value&gt;\n#\n#Where:\n#&lt;domain&gt; can be:\n#        - an user name\n#        - a group name, with @group syntax\n#        - the wildcard *, for default entry\n#        - the wildcard %, can be also used with %group syntax,\n#                 for maxlogin limit\n#        - NOTE: group and wildcard limits are not applied to root.\n#          To apply a limit to the root user, &lt;domain&gt; must be\n#          the literal username root.\n#\n#&lt;type&gt; can have the two values:\n#        - \"soft\" for enforcing the soft limits\n#        - \"hard\" for enforcing hard limits\n#\n#&lt;item&gt; can be one of the following:\n#        - core - limits the core file size (KB)\n#        - data - max data size (KB)\n#        - fsize - maximum filesize (KB)\n#        - memlock - max locked-in-memory address space (KB)\n#        - nofile - max number of open files\n#        - rss - max resident set size (KB)\n#        - stack - max stack size (KB)\n#        - cpu - max CPU time (MIN)\n#        - nproc - max number of processes\n#        - as - address space limit (KB)\n#        - maxlogins - max number of logins for this user\n#        - maxsyslogins - max number of logins on the system\n#        - priority - the priority to run user process with\n#        - locks - max number of file locks the user can hold\n#        - sigpending - max number of pending signals\n#        - msgqueue - max memory used by POSIX message queues (bytes)\n#        - nice - max nice priority allowed to raise to values: [-20, 19]\n#        - rtprio - max realtime priority\n#        - chroot - change root to directory (Debian-specific)\n#\n#&lt;domain&gt;      &lt;type&gt;  &lt;item&gt;         &lt;value&gt;\n#\n\n#*               soft    core            0\n#root            hard    core            100000\n#*               hard    rss             10000\n#@student        hard    nproc           20\n#@faculty        soft    nproc           20\n#@faculty        hard    nproc           50\n#ftp             hard    nproc           0\n#ftp             -       chroot          /ftp\n#@student        -       maxlogins       4\nvdl soft nofile 4096\nvdl hard nofile 4096\n\n# End of file\n</code></pre> <ol> <li>Backup <code>/etc/sudoers</code></li> </ol> <pre><code>$ sudo visudo\n\n# /etc/sudoers\n#\n# This file MUST be edited with the 'visudo' command as root.\n#\n# See the man page for details on how to write a sudoers file.\n#\n\nDefaults        env_reset\n\n# Host alias specification\n\n# User alias specification\n\nUser_Alias APOLLOUSERS = antonio,iber,jdiaz,mario,estevet,sofia\nUser_Alias INPUTUSERS = antonio,iber,jdiaz,mario,estevet,sofia\n\n# Cmnd alias specification\n\nCmnd_Alias APOLLOCOMMANDS = /usr/bin/java, /bin/kill\nCmnd_Alias INPUTCOMMANDS = /bin/cp, /bin/mv, /bin/rm, /bin/mkdir, /bin/rmdir, /bin/chmod\n\nAPOLLOUSERS ALL=(root) NOPASSWD: APOLLOCOMMANDS\nINPUTUSERS ALL=(input) NOPASSWD: INPUTCOMMANDS\n\n# User privilege specification\nroot    ALL=(ALL) ALL\nvdl     ALL=(ALL) ALL\n\n# Uncomment to allow members of group sudo to not need a password\n# (Note that later entries override this, so you might need to move\n# it further down)\n# %sudo ALL=NOPASSWD: ALL\n\n# Members of the admin group may gain root privileges\n%admin ALL=(ALL) ALL\n</code></pre> <ol> <li>Backup mysql databases</li> </ol> <pre><code>$ mysql -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 4432\nServer version: 5.1.72-0ubuntu0.10.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.\n\n.\n.\n.\n\nmysql&gt; show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| DZ                 |\n| DZDATA             |\n| DZSTATS            |\n| DZTMP              |\n| FB                 |\n| FBDATA             |\n| FBSTATS            |\n| FBTMP              |\n| FR                 |\n| FRDATA             |\n| FRSTATS            |\n| FRTMP              |\n| IB                 |\n| IBDATA             |\n| IBSTATS            |\n| IBTMP              |\n| IP                 |\n| IPDATA             |\n| IPSTATS            |\n| IPTMP              |\n| PQLXMETA           |\n| TAPAS              |\n| TAPASDATA          |\n| TAPASSTATS         |\n| TAPASTMP           |\n| TEST               |\n| TESTDATA           |\n| TESTSTATS          |\n| TESTTMP            |\n| X7                 |\n| X7DATA             |\n| X7STATS            |\n| X7TMP              |\n| anss               |\n| edge               |\n| inv                |\n| mysql              |\n| status             |\n+--------------------+\n39 rows in set (0.00 sec)\n\nmysql&gt; quit\nBye\n</code></pre> <pre><code>$ mysqldump -u root -pSunMysqlRoot --add-drop-table -c edge &gt; BACKUP_SQL/edge.sql\n$ mysqldump -u root -pSunMysqlRoot --add-drop-table -c anss &gt; BACKUP_SQL/anss.sql\n$ mysqldump -u root -pSunMysqlRoot --add-drop-table -c inv &gt; BACKUP_SQL/inv.sql \n$ mysqldump -u root -pSunMysqlRoot --add-drop-table -c status &gt; BACKUP_SQL/status.sql\n</code></pre>"},{"location":"seismology/obspy/","title":"ObsPy","text":"<p>Notes on using ObsPy</p>"},{"location":"seismology/obspy/#installation-and-updates-of-conda-pip-etc","title":"Installation and updates of conda, pip, etc","text":"<pre><code>$ conda update conda\n$ conda update anaconda\n\n$ pip install --upgrade pip\n</code></pre>"},{"location":"seismology/obspy/#installation-of-obspy","title":"Installation of ObsPy","text":"<p>Suggested approach, using an environment for obspy</p> <pre><code>$ conda create -n obspy python=3.5 anaconda\n$ source activate obspy\n$ (obspy) conda install -c conda-forge obspy\n$ (obspy) conda update -c conda-forge obspy\n$ (obspy) obspy-runtests\n</code></pre> <p>Another approach, adding conda-forge to list of channels </p> <pre><code>$ conda config --add channels conda-forge\n$ conda config --add channels obspy\n$ conda install obspy\n$ conda update obspy\n$ obspy-runtests\n</code></pre> <p>Other packages installed (using conda, pip, or others)</p> <pre><code>$ pip install eqcorrscan\n</code></pre> <p>Other packages to install</p> <p>To fix this error while running obspy-runtests:</p> <p>OSError: Unable to open boundary dataset file. Only the 'crude' and  'low', resolution datasets are installed by default. If you are requesting an, 'intermediate', 'high' or 'full' resolution dataset, you may need to download and install those files separately with <code>conda install -c conda-forge basemap-data-hires</code>.</p> <p>$ conda install -c conda-forge mtspec The following NEW packages will be INSTALLED:</p> <pre><code>libgfortran: 3.0.0-0      conda-forge\nmtspec:      0.3.2-py35_1 conda-forge\n</code></pre> <p>Other packages installed in obspy environment:</p> <pre><code>$ cd LOKI-LOCATOR\n$ mk_anaconda.sh\n$ python installation.py install\n\n$ cd LatLongUTMconversion_python3/\n$ python setup.py install\n</code></pre>"},{"location":"seismology/obspy/#check-if-filedirectory-exists","title":"Check if file/directory exists","text":"<pre><code>import os\nos.path.isfile(\"file\")                      # True for regular file, False for directory!\nos.path.isdir(\"directory\")\nos.path.exists(\"file_or_directory\")         # True for existing file or directory\n</code></pre>"},{"location":"seismology/obspy/#write-to-stdout-and-stderr","title":"Write to stdout and stderr","text":"<pre><code>sys.stdout.write(\"message\\n\")\nsys.stderr.write(\"error\\n\")\n</code></pre>"},{"location":"seismology/obspy/#read-a-text-file-in-python-see-python-cookbook-page-141","title":"Read a text file in Python (see Python Cookbook, page 141)","text":"<p>Read the entire file as a single string</p> <pre><code>with open('somefile.txt', 'rt') as f:\n    data = f.read()\n</code></pre> <p>Iterate over the lines of the file</p> <pre><code>with open('somefile.txt', 'rt') as f:\n    for line in f:\n</code></pre> <ul> <li>to split line in columns:</li> </ul> <pre><code>columns = line.split()\n</code></pre>"},{"location":"seismology/obspy/#formatted-print","title":"Formatted print","text":"<p>Comprehensive documentation and examples in: https://pyformat.info</p> <pre><code>print('format string'.format(variable1, variable2, variable3, ...))\n\nexample of format string:\n\nprint('{0:6} {1:03d} {2:07.4f}'.format('PAB', 5, 3.4))\nPAB    005 03.4000\n</code></pre>"},{"location":"seismology/obspy/#run-an-external-command-in-python","title":"Run an external command in Python","text":"<pre><code>import subprocess\n\nsubprocess.call('ls')\n\nsubprocess.call(['ls', '-l']) -&gt; writes to stdout\n\noutput_str = subprocess.check_output(['ls', '-l']) -&gt; writes to string \"output_str\"\n</code></pre> <p>Options of subprocess.call:     stdin=None   -&gt; redirects input from a file or an open pipe     stdout=None  -&gt; redirects output to a file     stderr=None     shell=False  -&gt; sends command to the UNIX shell (to use shell shortcuts and optimizations, e.g. wildcards)                     then string is only one: 'ls *.py'</p>"},{"location":"seismology/obspy/#making-day-plots","title":"Making day plots","text":"<pre><code>from obspy import read\nfrom obspy.core import UTCDateTime  (if you are going to operate with time strings)\n\nst = read(\"DD.D006..HHZ.D.2016.234\")\nst.plot(type=\"dayplot\", outfile=\"DD.D006..HHZ.D.2016.234.raw.png\")\n\nst.filter(\"bandpass\", freqmin=3, freqmax=15, corners=3)\nst.plot(type=\"dayplot\", outfile=\"DD.D006..HHZ.D.2016.235.filtered.png\")\n\n\nst.plot(type=\"dayplot\", outfile=\"DD.D044..HHZ.D.2016.267.filtered.png\",\nstarttime=UTCDateTime(\"2016-09-23T07:00:00.0Z\"),                    # set start time (exclude installation)\nshow_y_UTC_label=False,                             # eliminate ugly \"local time\" label\nsize=(2000,1200),                               # doubles the size of \"dayplot\" plot\nvertical_scaling_range=5.0E2)                           # clip largest signal\n</code></pre> <p>More options in: http://docs.obspy.org/packages/autogen/obspy.core.stream.Stream.plot.html#obspy.core.stream.Stream.plot</p>"},{"location":"seismology/obspy/#checking-for-data-availability-using-obspy-scan","title":"Checking for data availability using obspy-scan","text":"<pre><code>$ obspy-scan path = scan contents of all  files in directory \"path\" and generates an interactive plot\n\n$ obspy-scan --no-x 2016/DD/*/*Z.D\n</code></pre> <ul> <li>produces an interactive plot only for vertical components</li> <li> <p>does not plot an x for the start time of each data file</p> <p>$ obspy-scan --no-x --print-gaps -o 2016.pdf 2016 &gt; 2016.gaps</p> </li> <li> <p>produces a pdf file instead of an interactive plot</p> </li> <li>writes gaps to stdout</li> <li>does not plot an x for the start time of each data file</li> </ul>"},{"location":"seismology/seisan/","title":"SEISAN","text":""},{"location":"seismology/seisan/#seisan-directories","title":"SEISAN directories","text":"<pre><code>COM     Shell and bat scripts to define variables\nINC     Include files\nINF     Documentation (pdf files)\nISO     ?? (macro files)\nLIB     Libraries (and its source code)\nPIC     Pictures (used?)\nPRO     Executables and source code\nSUP     Supplementary programs (dataselect and SE)\nTMP     empty\n\nCAL     Instrument responses\nDAT     Parameter files\nREA     Phase data\nWAV     Waveform data\n\nWOR\n</code></pre>"},{"location":"seismology/seisan/#seisan-installation-on-linux","title":"SEISAN installation on Linux","text":"<p>SEISAN 10.5 Installation on xlr8 (Ubuntu 16.04 LTS)</p> <ol> <li>Edit SEISAN.bash and add it to .bashrc</li> </ol> <pre><code>$ source .bashrc # for changes to take place\n</code></pre> <ol> <li>Compile libraries</li> </ol> <pre><code>$ cd $SEISAN_TOP\n$ cd LIB\n$ make clean\n$ make all &gt; make.log 2&gt;&amp;1\n</code></pre> <ol> <li>Compile programs</li> </ol> <pre><code>$ pr\n$ make clean\n$ make all &gt; make.log 2&gt;&amp;1\n</code></pre> <ol> <li>Re-create IASP91 tables</li> </ol> <pre><code>$ wo\n$ remodl\n$ setbrn\n$ cp IASP91_linux.* ../DAT/.\n</code></pre> <ol> <li>Run test events</li> </ol> <pre><code>$ eev 199606 \n</code></pre>"},{"location":"seismology/seisan/#installation-of-seisan-100-in-linux","title":"Installation of SEISAN 10.0 in Linux","text":"<ol> <li>Edit /data/seismo/COM/SEISAN.csh</li> </ol> <p>SEISAN_TOP</p> <p>comment PITSA variables comment LD_LIBRARY_PATH comment path (add $SEISAN_TOP/PRO in .cshrc)</p> <ol> <li>Go to $SEISAN_TOP/LIB and edit Makefile</li> </ol> <p>Eliminate  -fbounds-check option</p> <pre><code>fc_gfortran  = gfortran -g -c -I../INC -fdollar-ok -fno-automatic -o $@\n#fc_gfortran  = gfortran -g -c -I../INC -fdollar-ok -fbounds-check -fno-automatic -o $@\n</code></pre> <p>% make clean</p> <ol> <li>Go to $SEISAN_TOP/PRO and edit Makefile</li> </ol> <p>Eliminate  -fbounds-check option</p> <pre><code>fc_gfortran = gfortran -g -I../INC -fdollar-ok -fno-automatic -o $@\n#fc_gfortran = gfortran -g -I../INC -fdollar-ok -fbounds-check -fno-automatic -o $@\n</code></pre> <p>Change INSTALL_PRO_PATH (needed?) INSTALL_PRO_PATH = /data/seismo/PRO</p> <p>% make clean % make all &gt;&amp;! log &amp; % tail -f log</p> <ol> <li>Install Seisan Explorer</li> </ol> <p>Install qt4-make qt4-dev-tools with Synaptic</p> <p>% cp $SEISAN_TOP/LIB/seisan.a linux/.</p> <p>% qmake se.pro (creates Makefile)</p> <p>% make &gt;&amp;! log &amp; [does not work!!]</p>"},{"location":"seismology/seisan/#seisan-for-dehdasht","title":"SEISAN for Dehdasht","text":"<p>SEISAN for processing DehDasth data</p> <ol> <li> <p>Set continuous data in arclink directory structure</p> </li> <li> <p>Get station coordinates and format them in HYP format:</p> </li> </ol> <pre><code>  D0063045.23N 5028.63E   0   (not processed!!!)\n  D0293043.69N 5033.91E 754\n  D0493047.22N 5032.94E 828\n  D0553042.69N 5038.32E 848\n  D0693053.64N 5029.77E 963\n  D0733050.46N 5033.17E 905\n  D0783046.53N 5037.44E 806\n  D0813044.18N 5040.46E 814\n  D0913047.31N 5038.41E 847\n  D0953055.27N 5031.62E 875\n  D0983052.78N 5034.19E 941\n  D1043048.01N 5039.30E 852\n  D1073045.66N 5041.85E 827\n</code></pre> <ol> <li>Edit configuration files STATION0.HYP, SEISAN.DEF, MULPLT.DEF</li> </ol> <p>IMPORTANT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p> <p>When editing SEISAN.DEF and MULPLT.DEF use FLOATING POINT values, NO integer values. Most of the errors are caused by using integer values instead of floating point values. If something does not work, check this first!!! Write values starting at column 41</p> <p>3.1. STATION0.HYP</p> <p>change station list</p> <p>change 1D velocity model (once one is available)</p> <p>3.2. SEISAN.DEF</p> <p>Define the location of the arclink directory and all the stations/channels</p> <pre><code>ARC_ARCHIVE                             /scratch/DehDasht\nARC_CHAN                                D006 HHEDD\nARC_CHAN                                D006 HHNDD\nARC_CHAN                                D006 HHZDD\nARC_CHAN                                D029 HHEDD\n...\nARC_DURATION                            300.0\n</code></pre> <p>Set cursor to cross-hair:</p> <pre><code>CURSOR             0: default, 1: cross 2.\n</code></pre> <p>Set map default dimensions and plot stations</p> <pre><code>MAP_LAT_BORDER     dist from center       2.0\nMAP_LON_BORDER          \"                 2.0\nEPIMAP_STATIONS    plot stations        1.\n</code></pre> <p>3.3. MULPLT.DEF</p> <p>Set keys for assigning weights (depends on keyboard!!!)</p> <pre><code>PHASE WEIGHT KEY                        =         0\nPHASE WEIGHT KEY                        !         1\nPHASE WEIGHT KEY                        \"         2\nPHASE WEIGHT KEY                        %         3\nPHASE WEIGHT KEY                        $         4\n</code></pre> <p>(weight 3 assigned pressing SHIFT + 5 !!!)</p> <p>Sort seismograms by distance:</p> <pre><code>NSORT_DISTANCE     0: no sort, min ph.  1.\n</code></pre> <p>Change number of channels per screen when doing manual picking</p> <pre><code>NCHAN PER SCREEN   # chan pr screen     3.\n</code></pre> <ol> <li>Visually inspect continuous data</li> </ol> <p>First un-comment <code>NCHAN PER SCREEN</code> in <code>MULPLT.DEF</code></p> <pre><code>$ mulplt\n  Filename, number, filenr.lis (all)\n  Continuous SEISAN data base: cont\n  Large SEED volume: conts\n  Archive: arc\n  Make a choice\narc\n Give start time, yyyymmddhhmmss\n20160822\n Interval in min\n15\n\n[ select ALL with cursor ]\n\n  Plot options: Interactive picking          Return\n                Multi trace plot on screen, def (0)\n                Multi trace plot on screen      (1)\n                Multi trace plot on screen+laser(2)\n                Multi trace plot on laser       (3)\n                Continuoues on screen           (4)\n                Continuoues on screen + laser   (5)\n                Continuoues on laser            (6)\n                Stop                            (q)\n0\n  Low and high cut for filter, return for no filter\n3 15\n\n[ press \"f\" no move to next screen; click to zoom; \"p\" to save segment ]\n\n\n ENTER EVENT TYPE L,R OR D\n Second. optional character for event ID (e.g. E)\n Third optional character for model ID (e.g. J) L\n  Give operator code (max 4 char)\navh\n  Give 2-5 letter data base, ,, for local dir, return for default base\n,,\n Output channels on screen: s\n No output, just register:  n\n No output, just ARC line:  a\n Output all channels:   enter\n\na\n\n S-file name:   22-0100-10L.S201608\n GO AHEAD (Y/N)\ny\n\n  Continue plot(y/n=default)\ny\n</code></pre> <p>Other parameters</p> <pre><code>GMAP_ICON_MSIZE                         3.0 (so events with M=0 are visible)\n</code></pre>"},{"location":"tools/cmake/","title":"CMake","text":"<p>Python: needed for testing (?) BLAS and LAPACK MPI (OpenMPI) Eigen linear algebra template library Boost libraries (Filesystem, Python &amp; Test)</p> <p>Eigen</p> <pre><code>$ cd\n$ cd src\n$ mkdir -p eigen\n$ curl -Ls http://bitbucket.org/eigen/eigen/get/3.3.4.tar.gz | tar -xz -C eigen --strip-components=1\n$ CC=gcc FC=gfortran cmake -H. -Bbuild_eigen -DCMAKE_INSTALL_PREFIX=\"$HOME/src/eigen\"\n[lots of warning, errors?]\n</code></pre> <p>Get information:</p> <pre><code>$ cmake --help\n$ cmake --build . --target help\n$ cmake --system-information [logfile] # lots of output, so better write to a file\n$ cmake --build build_eigen -- install &gt; install.log 2&gt; install.err\n</code></pre> <p>Generators:</p> <p>Makefiles, Ninja, Visual Studio, ...</p> <pre><code>$ cmake --help\n.\n.\n.\nGenerators\n\nThe following generators are available on this platform:\n  Unix Makefiles               = Generates standard UNIX makefiles.\n  Ninja                        = Generates build.ninja files.\n  Xcode                        = Generate Xcode project files.\n  CodeBlocks - Ninja           = Generates CodeBlocks project files.\n  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.\n  CodeLite - Ninja             = Generates CodeLite project files.\n  CodeLite - Unix Makefiles    = Generates CodeLite project files.\n  Sublime Text 2 - Ninja       = Generates Sublime Text 2 project files.\n  Sublime Text 2 - Unix Makefiles\n                               = Generates Sublime Text 2 project files.\n  Kate - Ninja                 = Generates Kate project files.\n  Kate - Unix Makefiles        = Generates Kate project files.\n  Eclipse CDT4 - Ninja         = Generates Eclipse CDT 4.0 project files.\n  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.\n</code></pre> <p>Minimum <code>CMakeLists.txt</code>:</p> <pre><code>cmake_minimum_required(VERSION 3.5 FATAL_ERROR)\nproject(test_project LANGUAGES CXX)\nadd_executable(hello-world hello-world.cpp)\n</code></pre> <p>Commands for \"in-source\" build:</p> <pre><code>$ cmake .\n$ cmake --build .\n</code></pre> <p>Commands for \"out-of-source\" build:</p> <pre><code>$ mkdir -p build &amp;&amp; cd build\n$ cmake ..\n$ cmake --build .\n</code></pre> <p>[non-standard alternative from \"root\" directory: $ cmake -H. -Bbuild ]</p> <p>Options for \"build\"</p> <pre><code>$ cmake --build . --target help\nThe following are some of the valid targets for this Makefile:\n... all (the default if no target is provided)\n... clean\n... depend\n... rebuild_cache\n... edit_cache\n... getjul                      # this is one of the executables defined in CMakeLists.txt\n</code></pre> <p>[for more advanced projects, also \"test\", \"install\", and \"package\" ]</p> <p>How to invoke explicitly a generator:</p> <pre><code>$ cmake -G Ninja ..\n</code></pre> <p>Link with a static library:</p> <pre><code>add_library(library_name STATIC header_files.hpp source_files.cpp)\ntarget_link_libraries(executable library_name)\n</code></pre> <p>Build directory will contain: lib{library_name}.a</p> <p>Possible values: STATIC SHARED OBJECT MODULE</p> <p>IMPORTED    = a library located outside the project (e.g. FFTW3?) INTERFACE ALIAS</p> <p>Define, set and output variables:</p> <pre><code>set(USE_LIBRARY OFF)\nmessage(STATUS \"Compile sources into a library? ${USE_LIBRARY}\")\nmessage(\"Compile sources into a library? ${USE_LIBRARY}\")\n</code></pre> <pre><code>$ cmake .\n.\n.\n.\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Compile sources into a library? OFF\nCompile sources into a library? OFF\n-- Configuring done\n-- Generating done\n...\n</code></pre> <p>Specifying compiler:</p> <pre><code>$ cmake -D CMAKE_CXX_COMPILER=clang++ ...   # recommended !!!\n</code></pre> <p>or</p> <pre><code>$ env CXX=clang++ cmake ...\n</code></pre> <p>but also inside <code>CMakeLists.txt</code></p> <pre><code>set(CMAKE_CXX_COMPILER \"/usr/local/bin/g++\")  # before defining project!!!\n</code></pre> <p>Build types:</p> <p>Debug, Release, RelWithDebInfo, MinSizeRel</p> <pre><code>set(CMAKE_BUILD_TYPE Debug)\n</code></pre> <p>or</p> <pre><code>$ cmake -D CMAKE_BUILD_TYPE=Debug ...\n</code></pre> <p>Set compiler and compiler options:</p> <p>OPTIONS:</p> <pre><code>list(APPEND flags \"-fPIC\" \"-Wall\")\nadd_library(library_name STATIC header_files.hpp source_files.cpp)\ntarget_compile_options(library_name PRIVATE ${flags})\ntarget_compile_options(execuatable_name PRIVATE \"-fPIC\")\n\ntarget_link_libraries(executable_name library_name)\n\nset_target_properties(animals PROPERTIES CXX_STANDARD 14 CXX_EXTENSIONS OFF CXX_STANDARD_REQUIRED ON POSITION_INDEPENDENT_CODE 1)\n</code></pre> <p>also</p> <pre><code>set(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n</code></pre> <p>Discovering system information:</p> <ul> <li>Compiler ID</li> <li>Processor architecture</li> <li> <p>Processor instruction set</p> <p>message(STATUS \"Configuring on/for ${CMAKE_SYSTEM_NAME}\")  # must be after \"project\"!!!</p> <p>CMAKE_CXX_COMPILER_ID</p> <p>find_package(Eigen3 3.3 REQUIRED CONFIG)</p> </li> </ul>"},{"location":"tools/docker/","title":"Docker","text":"<p>Install Docker Desktop.</p> <p>Download dmg and install.</p> <p>Run tutorial:</p> <pre><code>$ cd\n$ mkdir Docker\n$ cd Docker\n$ git clone https://github.com/docker/getting-started.git\n$ cd getting-started\n$ docker build -t docker101tutorial .\n$ docker run -d -p 80:80 --name docker-tutorial docker101tutorial\n$ docker tag docker101tutorial avillasenorh/docker101tutorial\n$ docker push avillasenorh/docker101tutorial\n</code></pre> <p>Login to dockerhub</p> <p>Docker course/book</p> <pre><code>$ git clone https://github.com/docker/doodle.git\n\n$ cd doodle/cheers2019 &amp;&amp; docker build -t avillasenorh/cheers2019 .\n\n$ docker run -it --rm avillasenorh/cheers2019\n\n$ docker login &amp;&amp; docker push avillasenorh/cheers2019\n\n\n$ docker version\n...\n\n$ docker --version\n$ docker-compose --version\n$ docker-machine --version\n$ notary version\n\n$ docker image ls\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\navillasenorh/cheers2019   latest              415686aae5f6        4 days ago          4.01MB\n&lt;none&gt;                    &lt;none&gt;              7702daeafbab        4 days ago          356MB\ngolang                    1.11-alpine         e116d2efa2ab        3 months ago        312MB\n</code></pre> <pre><code>$ docker system info\nClient:\n Debug Mode: false\n\nServer:\n Containers: 0\n  Running: 0\n  Paused: 0\n  Stopped: 0\n Images: 8\n Server Version: 19.03.4\n Storage Driver: overlay2         !!!!!!!!! storage driver used (good for Ubuntu, RH &gt;= 4.x)\n  Backing Filesystem: extfs\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339\n runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657\n init version: fec3683\n Security Options:\n  seccomp\n   Profile: default\n Kernel Version: 4.9.184-linuxkit\n Operating System: Docker Desktop\n OSType: linux\n Architecture: x86_64\n CPUs: 2\n Total Memory: 1.952GiB\n Name: docker-desktop\n ID: HN4Y:T3NM:PXHK:Y6X5:XW7H:ZFCX:FPUS:5BZZ:KLER:24WB:6EFH:B6BS\n Docker Root Dir: /var/lib/docker\n Debug Mode: true\n  File Descriptors: 30\n  Goroutines: 46\n  System Time: 2019-11-21T10:47:33.8906462Z\n  EventsListeners: 2\n HTTP Proxy: gateway.docker.internal:3128\n HTTPS Proxy: gateway.docker.internal:3129\n Registry: https://index.docker.io/v1/\n Labels:\n Experimental: false\n Insecure Registries:\n  127.0.0.0/8\n Live Restore Enabled: false\n Product License: Community Engine\n</code></pre> <pre><code>$ docker pull ubuntu:latest\nlatest: Pulling from library/ubuntu\n7ddbc47eeb70: Pull complete\nc1bbdc448b72: Pull complete\n8c3b70e39044: Pull complete\n45d437916d57: Pull complete\nDigest: sha256:6e9f67fa63b0323e9a1e587fd71c561ba48a034504fb804fd26fd8800039835d\nStatus: Downloaded newer image for ubuntu:latest\ndocker.io/library/ubuntu:latest\n\n$ docker image ls\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\navillasenorh/cheers2019   latest              415686aae5f6        4 days ago          4.01MB\n&lt;none&gt;                    &lt;none&gt;              7702daeafbab        4 days ago          356MB\nubuntu                    latest              775349758637        2 weeks ago         64.2MB\ngolang                    1.11-alpine         e116d2efa2ab        3 months ago        312MB\n\n\n$ docker container run -it ubuntu:latest /bin/bash\nroot@dc672cdb77cc:/# ps -elf\nF S UID        PID  PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD\n4 S root         1     0  0  80   0 -  4626 -      11:01 pts/0    00:00:00 /bin/bash\n0 R root        13     1  0  80   0 -  8599 -      11:05 pts/0    00:00:00 ps -elf\n</code></pre> <p>-it flag switchs your shell into the terminal of the container</p> <p>control + P + Q (p and q in sequence, not simultaneously): exits the container without terminating it (back to shell of host machine)</p> <pre><code>$ docker container ls # shows processes running inside container\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\ndc672cdb77cc        ubuntu:latest       \"/bin/bash\"         8 minutes ago       Up 8 minutes                            trusting_chandrasekhar\n</code></pre> <p>To enter again:</p> <pre><code>$ docker container exec -it trusting_chandrasekhar bash\nroot@dc672cdb77cc:/# ps -elf\nF S UID        PID  PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD\n4 S root         1     0  0  80   0 -  4626 -      11:01 pts/0    00:00:00 /bin/bash\n4 S root        14     0  0  80   0 -  4626 -      11:14 pts/1    00:00:00 bash\n0 R root        23    14  0  80   0 -  8599 -      11:14 pts/1    00:00:00 ps -elf\n</code></pre> <p>control + P + Q again</p> <p>To stop container:</p> <pre><code>$ docker container stop trusting_chandrasekhar\n$ docker container rm trusting_chandrasekhar\n\n$ docker container ls -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n</code></pre> <p>EXAMPLE</p> <pre><code>$ git clone https://github.com/nigelpoulton/psweb.git\n$ cd psweb/\n$ cat Dockerfile\n$ docker image build -t test:latest .\n$ $ docker image ls\nREPOSITORY                TAG                 IMAGE ID            CREATED              SIZE\ntest                      latest              ac4605aff0f1        About a minute ago   71.5MB\navillasenorh/cheers2019   latest              415686aae5f6        4 days ago           4.01MB\n&lt;none&gt;                    &lt;none&gt;              7702daeafbab        4 days ago           356MB\nubuntu                    latest              775349758637        2 weeks ago          64.2MB\nalpine                    latest              965ea09ff2eb        4 weeks ago          5.55MB\ngolang                    1.11-alpine         e116d2efa2ab        3 months ago         312MB\n\n$ docker container run -d --name web1 --publish 8080:8080 test:latest\n</code></pre>"},{"location":"tools/docker/#x-windows-applications-in-docker","title":"X-windows applications in Docker","text":"<p>Example of how to create an image with <code>Firefox</code> and send the display to macOS host running X-windows:</p> <p><code>Dockerfile</code>:</p> <pre><code>FROM ubuntu:latest\nRUN apt-get update &amp;&amp; \\\n    apt-get install firefox -y\nCMD /usr/bin/firefox\n</code></pre> <p>To create the Docker image named <code>myfirefox</code> from the <code>Dockerfile</code>, go to the directory of the <code>Dockerfile</code> and type:</p> <pre><code>$ docker build -t myfirefox .\n</code></pre> <p>Set \"Allow connections from network clients\" in <code>XQuartz</code> Preferences (Security tab):</p> <p></p> <p>(Probably you need to logout and login again to activate changes)</p> <p>How to run:</p> <pre><code>$ xhost + 127.0.0.1         # authorize connetions only from localhost (also known as loopback address)\n$ docker run --rm -d -e DISPLAY=host.docker.internal:0 myfirefox\n</code></pre>"},{"location":"tools/git/","title":"Git","text":"<p>Includes <code>git</code>, <code>GitHub</code>, <code>GitLab</code>, and <code>BitBucket</code>.</p>"},{"location":"tools/git/#initialization","title":"Initialization","text":"<pre><code>$ git config --global user.name \"Antonio Villasenor\"\n$ git config --global user.email \"antonio.villasenor@csic.es\"\n$ git config --global color.ui true\n</code></pre>"},{"location":"tools/git/#global-gitignore-in-addition-to-gitignore-in-each-repository","title":"Global .gitignore (in addition to .gitignore in each repository)","text":"<pre><code>$ vi ~/.gitignore\n$ git config --global core.excludesfile ~/.gitignore\n</code></pre>"},{"location":"tools/git/#save-password-for-github","title":"Save password for GitHub","text":"<pre><code>$ git config --global credential.helper store\n</code></pre> <p>After entering for the first time GitHub username and password, this creates a <code>.git-credentials</code> file with this contents:</p> <pre><code>https://avillasenorh:personal_access_token@github.com\n</code></pre>"},{"location":"tools/git/#configure-bitbucket","title":"Configure BitBucket","text":"<p>This is now outdated:</p> <p>Generate SSH key</p> <pre><code>$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/antonio/.ssh/id_rsa):\nCreated directory '/Users/antonio/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /Users/antonio/.ssh/id_rsa.\nYour public key has been saved in /Users/antonio/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX antonio@dhcp195.ictja.csic.es\nThe key's randomart image is:\n+---[RSA 2048]----+\n...\n+----[SHA256]-----+\n\n$ ls ~/.ssh\nid_rsa      id_rsa.pub\n</code></pre> <p>Preferences &gt; BitBucket settings &gt; SSH keys &gt; Add Key</p>"},{"location":"tools/git/#create-a-repository-with-existing-source-code-in-a-new-repository-directory","title":"Create a repository with existing source code in a new repository directory","text":"<ul> <li> <p>Go to GitHub web page and create the repository with a README.md and a .gitignore</p> </li> <li> <p>Go to ~/devel and clone the repository</p> </li> </ul> <pre><code>$ cd ~/devel\n$ git clone https://github.com/avillasenorh/repository\n</code></pre> <p>This will create a directory called \u201crepository\u201d with README.md, .gitignore, and .git directory</p> <ul> <li>Copy source code to repository directory</li> </ul> <pre><code>$ cd repository\n$ cp -r source_directory/* .\n\n$ git add -A\n$ git status\n$ git commit -m \u201cInitial commit of source code\u201d         # local commit\n$ git push                                              # send to remote repository (GitHub or Bitbucket)\n</code></pre>"},{"location":"tools/git/#create-a-repository-with-existing-source-code-in-existing-source-directory","title":"Create a repository with existing source code in existing source directory","text":"<p>create a directory called first_repo and make it a repository</p> <p>to send it to GitHub:</p> <pre><code>$ git remote add origin https://github.com/gforsyth/first_repo.git\n$ git push -u origin master\n</code></pre>"},{"location":"tools/git/#installationconfiguration-2015-02-20","title":"Installation/configuration 2015-02-20","text":"<p>Install Git git-2.2.1-intel-universal-mavericks.dmg change path to include /usr/local/git/bin change path for applications not from command line: % setup git PATH for non-terminal programs.sh (creates ~/.MacOSX/environment.plist)</p> <pre><code>$ git config --global user.name \"Antonio Villasenor\"\n$ git config --global user.email \"antonio.villasenor@csic.es\"\n$ git config --global color.ui true\n</code></pre> <p>Install GitHub GitHub for Mac 199.zip (unzip and move GitHub.app to Applications folder) Open GitHub and login Install GitHub command line tools</p> <p>git config --global credential.helper osxkeychain</p> <p>This causes GitHub to send an email with SSH key:</p> <p>The following SSH key was added to your account:</p> <p>GitHub for Mac - Antonio\u2019s iMac b1:9e:c4:80:5b:d0:b7:1d:b4:ba:ac:6b:3a:7f:7d:b3</p> <p>If you believe this key was added in error, you can remove the key and disable access at the following location:</p> <p>https://github.com/settings/ssh</p> <p>Now for example from GitHub application I can clone a repository existing in GitHub to my local disk  (in directory ~/devel)</p> <p>How to work with Git/GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"First commit of let-utils repository\"\n[master (root-commit) 038747f] First commit of let-utils repository\n 1 file changed, 177 insertions(+)\n create mode 100644 init1d.c\n\n\n$ git clone https://github.com/avillasenorh/github-test.git\n$ cd github-test/\n$ cp ~/src/util_LET/init1d.c .\n\n$ vi README.md\n$ git commit\n$ git add -A\n$ git commit -m \"First commit from local directory\"\n$ git push\n</code></pre>"},{"location":"tools/git/#installationconfiguration-2014-12-23","title":"Installation/configuration 2014-12-23","text":"<p>MacBook Pro 15\" Retina OS X 10.9.5 (Mavericks)</p> <p>Old version of Git already available:</p> <p>which git /usr/bin/git git --version git version 1.9.3 (Apple Git-50)</p> <p>Download installer from http://git-scm.com/download/mac git-2.2.1-intel-universal-mavericks.dmg</p> <p>Add /usr/local/git/bin to $PATH in .cshrc</p> <pre><code>$ which git\n/usr/local/git/bin/git\n$ git --version\ngit version 2.2.1\n\n$ git config --global user.name \"Antonio Villasenor\"\n$ git config --global user.email \"antonio@ictja.csic.es\"\n$ git config --global color.ui true\n</code></pre> <p>Setup a GitHub account with same email address</p> <pre><code>ssh-keygen -t rsa -C 'antonio@ictja.csic.es'\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/antonio/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /Users/antonio/.ssh/id_rsa.\nYour public key has been saved in /Users/antonio/.ssh/id_rsa.pub.\nThe key fingerprint is:\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX antonio@ictja.csic.es\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|                 |\n+-----------------+\n\n\n$ eval \"$(ssh-agent -s)\"\nAgent pid 35117\n\n$ssh-add ~/.ssh/id_rsa\nEnter passphrase for /Users/antonio/.ssh/id_rsa:\nIdentity added: /Users/antonio/.ssh/id_rsa (/Users/antonio/.ssh/id_rsa)\n\n$ cat ~/.ssh/id_rsa.pub\nssh-rsa XXXXXXXXXXXXX\n\n$ cat ~/.ssh/id_rsa.pub | pbcopy\n</code></pre> <p>Now go to GitHub web page and login to your account (avillasenorh) Go to Personal Settings page &gt; SSH keys Add SSH key Enter a title: \"Antonio's MacBook Pro\" Paste clipboard (ssh key copied to clipboard using pbcopy) in \"Key\" Click on \"Add key\"</p> <p>To test that process worked, go back to terminal and type:</p> <pre><code>$ ssh -T git@github.com\nWarning: Permanently added the RSA host key for IP address '192.30.252.129' to the list of known hosts.\nHi avillasenorh! You've successfully authenticated, but GitHub does not provide shell access.\n\n$ git add .\n$ git commit -m \"First commit of let-utils repository\"\n[master (root-commit) 038747f] First commit of let-utils repository\n 1 file changed, 177 insertions(+)\n create mode 100644 init1d.c\n\n    75  16:14   git clone https://github.com/avillasenorh/github-test.git\n    76  16:14   ls\n    77  16:14   cd github-test/\n    78  16:14   ls\n    79  16:14   git commit\n    80  16:14   h\n    81  16:14   cp ~/src/util_LET/init1d.c .\n    82  16:14   ls\n    83  16:14   vi README.md\n    84  16:15   git commit\n    85  16:15   git add -A\n    86  16:15   git commit\n    87  16:15   git commit\n    88  16:16   git commit -m \"First commit from local directory\"\n    89  16:18   git push\n</code></pre>"},{"location":"tools/git/#macbook-air","title":"MacBook Air","text":"<pre><code>which git\n/usr/bin/git\n32 pcanto:/Users/antonio &gt; git --version\ngit version 1.9.3 (Apple Git-50)\n33 pcanto:/Users/antonio &gt; vi .cshrc\n34 pcanto:/Users/antonio &gt; source !$\nsource .cshrc\n35 pcanto:/Users/antonio &gt; git --version\ngit version 2.2.1\n36 pcanto:/Users/antonio &gt; git config --global user.name \"Antonio Villasenor\"\n37 pcanto:/Users/antonio &gt; git config --global user.email \"antonio@ictja.csic.es\"\n38 pcanto:/Users/antonio &gt; git config --global color.ui true\n39 pcanto:/Users/antonio &gt; ssh-keygen -t rsa -C 'antonio@ictja.csic.es'\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/antonio/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /Users/antonio/.ssh/id_rsa.\nYour public key has been saved in /Users/antonio/.ssh/id_rsa.pub.\nThe key fingerprint is:\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX antonio@ictja.csic.es\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|                 |\n+-----------------+\n\n\nbash\nbash-3.2$ eval \"$(ssh-agent -s)\"\nAgent pid 79771\nbash-3.2$ ssh-add ~/.ssh/id_rsa\nEnter passphrase for /Users/antonio/.ssh/id_rsa:\nIdentity added: /Users/antonio/.ssh/id_rsa (/Users/antonio/.ssh/id_rsa)\nbash-3.2$ cat ~/.ssh/id_rsa.pub\nssh-rsa AAAAB3...\nbash-3.2$ cat ~/.ssh/id_rsa.pub | pbcopy\nbash-3.2$ ssh -T git@github.com\nThe authenticity of host 'github.com (192.30.252.130)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'github.com,192.30.252.130' (RSA) to the list of known hosts.\nHi avillasenorh! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre>"},{"location":"tools/git/#gitgithub-old-installation","title":"Git/GitHub (old installation)","text":"<p>https://help.github.com/articles/set-up-git</p> <p>Download and Install Git git-1.8.1.3-intel-universal-snow-leopard</p> <p>Username and email:</p> <pre><code>$ git config --global user.name avillasenorh\n$ git config --global user.email avillasenorh@yahoo.es\n</code></pre> <p>Password caching:</p> <pre><code>$ git credential-osxkeychain\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\n$ curl -s -O http://github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain\n$ chmod u+x git-credential-osxkeychain\n$ sudo mv git-credential-osxkeychain /usr/bin\n$ git config --global credential.helper osxkeychain\n$ git credential-osxkeychain\nUsage: git credential-osxkeychain &lt;get|store|erase&gt;\n</code></pre>"},{"location":"tools/parallel/","title":"Parallel","text":"<p>Simple run: a command that reads an argument:</p> <pre><code>$ parallel echo ::: A B C\nB\nC\nA\n</code></pre> <p>This is equivalent to:</p> <pre><code>$ parallel echo {} ::: A B C\n$ parallel echo {1} ::: A B C\n</code></pre> <p><code>parallel</code> can also read 2 arguments:</p>"},{"location":"tools/tmux/","title":"tmux","text":"<pre><code>$ tmux attach   # recover work!\n</code></pre> <p>If I exit tmux cleanly (e.g. ^D)</p> <pre><code>$ tmux attach\nno sessions\n</code></pre> <p>Change prefix from ^B to something else</p>"},{"location":"tools/tmux/#panes","title":"Panes","text":"<p><code>^B + \"</code></p> <p><code>^B + %</code></p> <p><code>^B + x</code> (exit) but ^D is faster</p> <p><code>^B + arrow</code> to change from pane to pane</p> <p><code>^B + z</code> : zooms on one pane (z again uzooms)</p> <p>resize panes</p> <p><code>^B</code> (do not release ^) and use arrows to resized</p>"},{"location":"tools/tmux/#windows","title":"Windows","text":"<p><code>^B + c</code> : create a new window</p> <p><code>^B + n,p</code> : next, previous window </p> <p><code>^B + &amp;</code> : kill window</p> <p><code>^B + ,</code> : rename window</p>"},{"location":"tools/tmux/#sessions","title":"Sessions","text":"<p>Disconnect for a session:</p> <p><code>^B + d</code></p> <pre><code>$ tmux attach # connect to a session\n</code></pre> <p>or</p> <pre><code>$ tmux a\n\n$ tmux list-sessions\n</code></pre> <p>or</p> <pre><code>$ tmux ls\n\n\n$ tmux attach -t 1 # connect to a session when we have more than one (do not call inside tmux! exit first!\n                   # nested sessions are dangerous\n</code></pre> <p>or</p> <pre><code>$tmux a -t 1\n</code></pre> <p><code>^B + $</code> : rename session</p> <p>Create and name a session:</p> <pre><code>$ tmux new -s \"session_name\" (don't make too long or it truncates name)\n</code></pre> <p>Toggle between sessions</p> <p><code>^B + s</code> (move arrow keys to select session and press ENTER)</p>"},{"location":"tools/tmux/#tmux-configuration","title":"tmux configuration","text":""},{"location":"tools/vim/","title":"Vim","text":"<p>Use vim to edit files over the network using ssh on a Linux/Unix/OSX/BSD:</p> <pre><code>$ vim scp://user@server//home/user/file\n</code></pre> <p>Vim as IDE</p> <pre><code>$ cp /usr/share/vim/vim73/vimrc_example.vim ~/.vimrc\n</code></pre> <p>The important commands in <code>.vimrc</code> for syntax are:</p> <pre><code>set nocompatible\nsyntax on\n</code></pre> <p>In order to recognize <code>.f</code> and <code>.f90</code></p> <pre><code>$ vi /usr/share/vim/vim73/ftplugin/fortran.vim (insert these commands):\n</code></pre> <pre><code>let s:extfname = expand(\"%:e\")\nif s:extfname ==? \"f90\"\n    let fortran_free_source=1\n    unlet! fortran_fixed_source\nelse\n    let fortran_fixed_source=1\n    unlet! fortran_free_source\nendif\n</code></pre> <pre><code>$ vi ~/.vimrc\n</code></pre> <p>move the block of text with \u201csyntax on\u201d: after the block of text with the instruction \u201cfiletype plugin indent on\u201d</p> <pre><code>\" Switch syntax highlighting on, when the terminal has colors\n\" Also switch on highlighting the last used search pattern.\nif &amp;t_Co &gt; 2 || has(\"gui_running\")\n  syntax on\n  set hlsearch\nendif\n\nset shiftwidth=4\nset tabstop=4\n</code></pre> <p>Other vim tips:</p> <p><code>:r !pwd</code> (or another command, such as \"date\" or \"ls -1\"</p> <p>Make a list of numbers in vim:</p> <pre><code>:put=range(1,5)\n:put=range(1,10,2)\n</code></pre> <p>See vim help:</p> <pre><code>:help :put\n:help range()\n</code></pre>"},{"location":"unix/admin/","title":"Admin","text":"<p>Umount a non-responsive NFS file system:</p> <pre><code>$ sudo umount -f -l /filesystem\n</code></pre> <p>Ubuntu commands for creating and deleting users</p> <pre><code>$ sudo addgroup --gid 1001 seismo\n$ sudo addgroup --gid 3850 sismi\n\n$ sudo adduser --uid 3801 --ingroup sismi --shell /bin/tcsh jdiaz\n$ sudo adduser --uid 3807 --ingroup sismi mario (bash shell)\n\n$ sudo adduser --home /data9/INPUT input (non-standard home directory)\n</code></pre> <p>Remove an user and all its files (Ubuntu)</p> <pre><code>$ sudo deluser --remove-all-files user &amp; (can take some time, so better send to background)\n</code></pre> <p>Get IPs and MAC addresses in a local network</p> <pre><code>$ ifconfig | grep broadcast | arp -a\n</code></pre>"},{"location":"unix/admin/#ssh-keys","title":"SSH keys","text":"<p>Install a public key to login remotely</p> <pre><code>$ ssh-keygen -b 4096 -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/antonio/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /Users/antonio/.ssh/id_rsa.\nYour public key has been saved in /Users/antonio/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:Lfbjv4MWIq0MRc7nkL8KYcIGLiEEYyfuTD3NuzkV9Uk antonio@passavol2.cmima.csic.es\nThe key's randomart image is:\n+---[RSA 4096]----+\n|++ .     . E     |\n|+.+ o . . o .    |\n|+o o * o   o     |\n|*+  . B o.       |\n|.++ oo BS .      |\n|.. o..=.=o.      |\n|    .* o ooo     |\n|     .+ ..o..    |\n|      .. ...oo   |\n+----[SHA256]-----+\n</code></pre> <pre><code>$ ssh-copy-id antonio@edge3.ictja.csic.es\n/opt/local/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/Users/antonio/.ssh/id_rsa.pub\"\nThe authenticity of host 'edge3.ictja.csic.es (193.144.102.105)' can't be established.\nECDSA key fingerprint is SHA256:eMm9bMReccDbOesNDlt9Lf6VMYuv1XlccefWC8zynaA.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\n/opt/local/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/opt/local/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nantonio@edge3.ictja.csic.es's password:\n\nNumber of key(s) added:        1\n\nNow try logging into the machine, with:   \"ssh 'antonio@edge3.ictja.csic.es'\"\nand check to make sure that only the key(s) you wanted were added.\n</code></pre>"},{"location":"unix/admin/#disable-suspend-and-hibernation","title":"Disable suspend and hibernation","text":"<p>Instructions in this link.</p> <pre><code>$ sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target\n\nCreated symlink /etc/systemd/system/sleep.target \u2192 /dev/null.\nCreated symlink /etc/systemd/system/suspend.target \u2192 /dev/null.\nCreated symlink /etc/systemd/system/hibernate.target \u2192 /dev/null.\nCreated symlink /etc/systemd/system/hybrid-sleep.target \u2192 /dev/null.\n</code></pre> <p>Verify changes:</p> <pre><code>$ sudo systemctl status sleep.target suspend.target hibernate.target hybrid-sleep.target\n</code></pre> <p>and reboot (or $ sudo systemctl restart systemd-logind.service)</p> <p>Re-enable suspend and hibernation:</p> <pre><code>$ sudo systemctl unmask sleep.target suspend.target hibernate.target hybrid-sleep.target\n\nRemoved /etc/systemd/system/sleep.target.\nRemoved /etc/systemd/system/suspend.target.\nRemoved /etc/systemd/system/hibernate.target.\nRemoved /etc/systemd/system/hybrid-sleep.target.\n</code></pre> <p>Verify:</p> <pre><code>$ sudo systemctl status sleep.target suspend.target hibernate.target hybrid-sleep.target\n</code></pre>"},{"location":"unix/admin/#mysql","title":"MySQL","text":"<p>Install MySQL from command line (not tested)</p> <pre><code>$ sudo apt-get -y install mysql-server mysql-client\n$ sudo mysql_secure_installation\n</code></pre> <p>(Probably this does not install \"dev\" package with include and libraries for MySQL)</p> <p>Setup password for mysql root</p> <pre><code>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root_password';\n</code></pre>"},{"location":"unix/admin/#mount-exfat-volumes-in-ubuntu-linux","title":"Mount exFAT volumes in Ubuntu Linux","text":"<p>Ubuntu by default is not able to mount disks formatted in exFAT</p> <pre><code>$ sudo apt-get install exfat-fuse exfat-utils\n</code></pre>"},{"location":"unix/admin/#better-linux-tools-for-sysadmin","title":"Better Linux tools for sysadmin","text":"<pre><code>htop/atop &gt; top\nss &gt; netstat\nip &gt; ifconfig\ndig &gt; nslookup\nmtr &gt; ping+traceroute\ncollectl &gt; sar\n</code></pre>"},{"location":"unix/admin/#update-gcc","title":"Update GCC","text":"<p>Default version of gcc/g++ in xlr8 (Ubuntu 14.04 LTS) is 5.4.0</p> <p>Need at least version 7 to compile Mirmex</p> <p>To fix some problems with corrupted packages:</p> <pre><code>$ sudo rm -vf /var/lib/apt/lists/*\n$ sudo apt-get update\n</code></pre> <p>(still gives an error about Google Earth, but the rest seems to work fine)</p> <pre><code>$ sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n\n$ sudo apt-get update\n\n$ sudo apt install gcc-7 g++-7\n\n$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70 \\\n --slave /usr/bin/g++ g++ /usr/bin/g++-7 \\\n --slave /usr/bin/gcov gcov /usr/bin/gcov-7\n</code></pre> <p>(Modified from https://linuxize.com/post/how-to-install-gcc-compiler-on-ubuntu-18-04/):</p> <pre><code>sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9\n</code></pre> <p>WARNING!!!: gfortran not updated to version 7!!!</p>"},{"location":"unix/commands/","title":"UNIX tips and commands","text":"<p>\"The Enlightened Ones say that. . .</p> <ul> <li>You should never use C if you can do it with a script;</li> <li>You should never use a script if you can do it with awk;</li> <li>Never use awk if you can do it with sed;</li> <li> <p>Never use sed if you can do it with grep.\u201c</p> <p>$ man hier      # describes Unix directory structure $ man builtin   # describes built-in commands $ compgen -b    # list built-in commands $ compgen -c    # list available commands and aliases</p> </li> </ul>"},{"location":"unix/commands/#command-line-shortcuts","title":"Command-line shortcuts","text":"<p><code>Ctrl-u</code> to delete current command, <code>Ctrl-l</code> to \"clear\" output <code>Ctrl+r</code> : Backward search <code>Ctrl+s</code> : Pause output <code>Ctrl+q</code> : Resume output after Ctrl+s <code>Ctrl+a</code> : move to the BOL <code>Ctrl+e</code> : move to the EOL <code>Ctrl+k</code> : delete all text from the cursor to EOL <code>Ctrl+_</code> : undo</p> <p>Move:</p> <p><code>Ctrl + A</code>      -&gt; beginning of line <code>Alt  + B</code>      -&gt; beginning of word <code>Ctrl + B</code>      -&gt; previous character</p> <p><code>Ctrl + F</code>      -&gt; next character <code>Alt  + F</code>      -&gt; end of word <code>Ctrl + E</code>      -&gt; end of line</p> <p>Delete:</p> <p><code>Ctrl + U</code>      -&gt; to beginning of line <code>Ctrl + W</code>      -&gt; to beginning of word</p> <p><code>Alt  + D</code>      -&gt; to end of word <code>Ctrl + K</code>      -&gt; to end of line</p> <p>(Alt shortcuts do not work on iTerm2)</p> <p>open long and complicated Linux or Unix commands in a text editor. Press:</p> <p><code>Ctrl + x</code> <code>Ctrl + e</code></p>"},{"location":"unix/commands/#arguments","title":"Arguments","text":"<p><code>!^</code> is the first argument of the previous command <code>!$</code> is the last argument of the previous command</p>"},{"location":"unix/commands/#prompt","title":"Prompt","text":"<p>Show terminal colors:</p> <pre><code>$ printf \"\\e[%dm%d dark\\e[0m \\e[%d;1m%d bold\\e[0m\\n\" {30..37}{,,,}\n</code></pre>"},{"location":"unix/commands/#human-readable-path","title":"Human readable path:","text":"<pre><code>$ echo \"${PATH//:/$'\\n'}\"\n</code></pre> <p>In order to write this as an alias, replace <code>'</code> with <code>'\"'\"'</code>:</p> <pre><code>alias human_path='echo \"${PATH//:/$'\"'\"'\\n'\"'\"'}\"'\n</code></pre>"},{"location":"unix/commands/#history","title":"history","text":"<p>Clear your <code>bash</code> history:</p> <pre><code>$ history -c &amp;&amp; history -w\n</code></pre>"},{"location":"unix/commands/#pwd","title":"pwd","text":"<pre><code>$ pwd -L        # logical (e.g. soft link)\n$ pwd -P        # physical\n</code></pre>"},{"location":"unix/commands/#type","title":"type","text":"<pre><code>$ type ls\nls is aliased to `ls -GFh'\n$ type cd\ncd is a shell builtin\n\n$ type -a ls\nls is aliased to `ls -GFh'\nls is /bin/ls\n</code></pre>"},{"location":"unix/commands/#which","title":"which","text":""},{"location":"unix/commands/#stat","title":"stat","text":"<pre><code>$ stat -x gmt.conf\n  File: \"gmt.conf\"\n  Size: 3192         FileType: Regular File\n  Mode: (0644/-rw-r--r--)         Uid: (  501/ antonio)  Gid: (   20/   staff)\nDevice: 1,8   Inode: 16647540    Links: 1\nAccess: Thu Sep 15 10:12:53 2016\nModify: Mon Jun  8 14:45:18 2015\nChange: Mon Jun  8 14:45:18 2015\n</code></pre>"},{"location":"unix/commands/#file","title":"file","text":"<pre><code>$ file gmt.conf\ngmt.conf: ASCII text\n$ file -b gmt.conf\nASCII text\n</code></pre>"},{"location":"unix/commands/#ls","title":"ls","text":"<p>To expand a wildcard whithout doing an \"ls\"</p> <pre><code>$ echo .*\n$ echo .[!.]*\n</code></pre> <p>To list the files in another directory that match more than one pattern:</p> <pre><code>$ ls -l /etc/{*.conf,*.rc,*.sh}\n</code></pre> <p>List all directories starting with an uppercase letter:</p> <pre><code>$ ls -1d [[:upper:]]*\n</code></pre> <p>List only subdirectories:</p> <pre><code>$ \\ls -d */\n</code></pre> <p>To rename all <code>*.bak</code> to <code>*.txt</code> on a Linux/Unix/OSX (bash shell)</p> <pre><code>$ for j in *.bak; do mv -v -- \"$j\" \"${j%.bak}.txt\"; done\n</code></pre> <p>Quick comparing of 2 dirs:</p> <pre><code>$ diff -y &lt;(ls -l ${DIR1}) &lt;(ls -l ${DIR2})\n</code></pre> <p>Alternative:</p> <pre><code>$ diff --brief --recursive dir1 dir2\n</code></pre> <p>Enter special characthers (such as ^G = bell)</p> <p>press ctrl-v and then special character (e.g. ctrl-G)</p> <p>Define a variable and run a script. The variable is only used inside the script</p> <pre><code>$ MYVAR=value ./script.sh\n</code></pre>"},{"location":"unix/commands/#paste","title":"paste","text":"<p>Concatenate files column-wise</p> <pre><code>paste -d'|' &lt;(seq 3) &lt;(seq 4 5) &lt;(seq 6 8)\n1|4|6\n2|5|7\n3||8\n</code></pre>"},{"location":"unix/commands/#eval","title":"eval","text":"<p>use eval to define environmental variables:</p> <pre><code>$ eval $( command_that_generates_variables) [not tested]\n</code></pre> <p>Print a variable between quotation marks: These 3 commands produce the same output:</p> <pre><code>$ echo \"SACAUX is \"\\\"$SACAUX\\\"\n$ echo SACAUX is \\\"$SACAUX\\\"\n$ echo \"SACAUX is \\\"$SACAUX\\\"\"\nSACAUX is \"/usr/local/sac/lib/aux\"\n</code></pre>"},{"location":"unix/commands/#xdg-opeon","title":"xdg-opeon","text":"<p><code>xdg-open</code> will open a file from the command line using the application associated with its file extension.</p>"},{"location":"unix/commands/#tar","title":"tar","text":"<p>First see structure of tar file with</p> <pre><code>$ tar tvzf latest.tar.gz | more\n\n$ tar xvzf latest.tar.gz -C /directory/ --strip=1 # eliminates first directory from tar\n</code></pre>"},{"location":"unix/commands/#rsync","title":"rsync","text":"<pre><code>$ rsync -avc orig dest\n</code></pre> <p>To check only: (I have not tried this!!!)</p> <pre><code>$ rsync -niaHc /origfolder/ /copyfolder   ( \"/\" after origfolder is important!!!)\n</code></pre> <pre><code>-n do not copy (\"dry run\")\n-i itemise the differences\n-a preserve (i.e. compare since we have -n) permissions, ownerships, symbolic links, etc. and recurse down directories\n-H preserve hard links\n-c compare checksums\n</code></pre> <p>Reproduce a directory structure but without copying files</p> <pre><code>$ rsync -av -f\"+ */\" -f\"- *\" \"$source\" \"$target\"\n</code></pre>"},{"location":"unix/commands/#a2ps","title":"a2ps","text":"<pre><code>$ a2ps -R --font-size=8 --columns=1 -M A4 README.txt\n</code></pre> <p>-o ouput.ps            -&gt; writes output to a PostScript file -P printer             -&gt; send to an specified printer -P display             -&gt; send to gv (does not work in MacOS X) -M Letter</p>"},{"location":"unix/commands/#sort-uniq","title":"sort, uniq","text":"<p>Show which lines are repeated in a sorted file:</p> <pre><code>$ uniq -d sorted_file\n</code></pre> <p>Find duplicated lines</p> <pre><code>$ sort file | uniq -d\n</code></pre>"},{"location":"unix/commands/#find","title":"find","text":"<pre><code>$ find .          # find all files hanging from .\n$ find . -print   # same\n\n$ find . ! -name \"*.txt\" -print               # find files that do not match pattern\n\n$ find .  -name \"*${str}*\" -printf '%P\\n'     # get rid of annoying \"./\" (not for MacOS X :-(\n\n$ find .  -name \"*${str}*\" -print | cut -c3-  # trick to do the same by starting at 3rd character\n\n$ find . \\( -name \"*.txt\" -o -name \"*.pdf\" \\) -print   # use OR (-o)\n</code></pre> <p>-path looks for matches in full path, while -name only in file name -maxdepth -mindepth specify directory depth</p> <p>-type  : f = file, d = directory, l = link, ...</p> <p>-atime : access time -mtime : modification time (content) -ctime : change time (metadata: permissions, ownership)</p> <pre><code>$ find . -type f -atime -7 -print   # files accessed WITHIN the last 7 days\n$ find . -type f -atime  7 -print   # files accessed EXACTLY 7 days ago \n$ find . -type f -atime +7 -print   # files accessed EARLIER than 7 days ago\n</code></pre> <p>-amin, -mmin, -cmin : same but in minutes</p> <pre><code>$ find . -type f -newer file.txt -print   # finds file.txt with earliest modification time\n\n$ find . -type f -size +2k       # Files having size greater than 2 kilobytes\n$ find . -type f -size -2k       # Files having size less than 2 kilobytes\n$ find . -type f -size 2k        # Files having size 2 kilobytes\n</code></pre> <p>can also use k, M, G</p> <pre><code>$ find . -type f -perm 644 -print  # can be useful to change permissions of miniSEED files in arclink structure\n$ find . -type f -name \"*.php\" ! -perm 644 -print  # this one too\n$ find . -type f -user iber -print\n</code></pre> <p>Executing commands and actions with find!!!!</p> <pre><code>$ find . -type f -name \"*.SAC\" -exec /bin/rm -f {} \\;\n\n$ find . -type f -user root -exec chown iber {} \\; # runs a chown command for each file\n\n$ find . -type f -user root -exec chown iber {} \\+ # runs a single chown command for all files\n\n$ find . -type f -name \"*.c\" -exec cat {} \\;&gt;all_c_files.txt # concatenate all C files in a single file (note &gt;, not &gt;&gt; !!)\n\n$ find . -type f -mtime +10 -name \"*.txt\" -exec cp {} OLD  \\;\n\n$ find . -type f -name \"*.txt\" -exec printf \"Text file: %s\\n\" {} \\;\n\n$ find devel/source_path  \\( -name \".git\" -prune \\) -o \\( -type f -print\\) # ignore directory .git\n\n$ find / -type f -printf '%T+ %p\\n' | sort | head -n 1   # Find oldest file in your filesystem\n</code></pre> <p>Option <code>-maxdepth 1</code> indicates not to go into subdirectories</p> <p>The find action <code>-printf '%P\\n'</code> prints the name without the starting directory, meaning no ./ is present to need to be stripped.</p> <pre><code>$ find . -maxdepth 1 -type d -name \"[012]???\" -printf \"%P\\n\"              # does not work in macOS\n$ find . -maxdepth 1 -type d -name \"[012]???\" -print | sed \"s|^\\./||\"     # works everywhere\n$ find . -maxdepth 1 -type d -name \"[012]???\" -print | cut -c3-\n\n$ find * -maxdepth 0 -type d -name \"[012]???\" -print                      # this also works!!!! but maxdepth is 0!!!\n</code></pre> <p>Find empty directories and remove them:</p> <pre><code>$ find . -type d -empty -delete\n</code></pre> <p>Consolidate (\"flatten\") all subdirectories in one directory</p> <pre><code>$ find TargetDirectory/ -mindepth 2 -type f -exec mv -i '{}' TargetDirectory/ ';'\n</code></pre>"},{"location":"unix/commands/#cut","title":"cut","text":"<pre><code>$ echo a:b:c | cut -d: -f1\n</code></pre>"},{"location":"unix/commands/#tr","title":"tr","text":"<pre><code>$ tr '\\r' '\\n' &lt; mac-format-file.txt      # fix carriage return problem for files created with GUI Mac applications\n</code></pre>"},{"location":"unix/commands/#nl","title":"nl","text":"<p>Numbers lines in a text file</p>"},{"location":"unix/commands/#csplit","title":"csplit","text":"<p>splits file in parts using matching patterns</p> <pre><code>$ csplit -k -s -n 4 $QAFI '/^&gt;/' '/^&gt;/' \"{1000}\"\n</code></pre> <pre><code>-k : do not remove output files if an error occurs\n-n : number of digits in output xx* files\n-s : do not output to stdout the number of lines of each file\n</code></pre>"},{"location":"unix/commands/#ed","title":"ed","text":"<p>Addresses:</p> <pre><code>i       : line i\n$       : last line\n1,$ = % : all lines in file\ni,j     : lines i through j\n.       : current line\n</code></pre> <p>Commands:</p> <pre><code>:0r $HOME/data             : read file in at top of current file\n:g/Name:/s/tom/Tom/        : substitute tom for Tom in lines that match /Name:/\n:1,10s/yes/no/g            : Substitute on first 10 lines\n:%s/[Hh]ello/Hi/gc         : Confirm global substitutions\n:s/Fortran/\\U&amp;/ 3          : Confirm global substitutions Uppercase \u201cFortran\u201d on next 3 lines\n</code></pre> <p>Example of multiple <code>ed</code> commands:</p> <pre><code>ed map.sh &lt;&lt; EOF\ng/^ps/s//gmt &amp;/p\ng/10 0 1 LB/s///p\n/pstext/\ns:G0/0/0:G255 -F+f10p,Helvetica+jLB:p\nw\nq\nEOF\n</code></pre>"},{"location":"unix/commands/#grep-awk","title":"grep-awk","text":"<p>Use <code>pgrep</code> instead of <code>grep</code></p> <p>Equivalent <code>grep</code> and <code>awk</code> commands for pattern matching:</p> <pre><code>$ grep a input | grep b | grep -v c | grep d\n$ awk '/a/ &amp;&amp; /b/ &amp;&amp; !/c/ &amp;&amp; /d/' input\n</code></pre> <p>Print every 10th line from a file:</p> <pre><code>$ awk '!(NR % 10)' file\n</code></pre>"},{"location":"unix/commands/#camel-case-and-underscore","title":"camel case and underscore","text":"<pre><code>$ echo \"hello_world\" | sed -r 's/([a-z]+)_([a-z])([a-z]+)/\\1\\U\\2\\L\\3/'\n$ echo thisIsATest | sed -r 's/([A-Z])/_\\L\\1/g'\n</code></pre>"},{"location":"unix/commands/#ssh-related-commands","title":"ssh-related commands","text":"<pre><code>$ sudo port install openssh +ssh-copy-id\n\n$ ssh-keygen -b 4096 -t rsa\n</code></pre> <p>To install key in another server:</p> <pre><code>$ ssh-copy-id -i ~/.ssh/id_rsa.pub antonio@xlr8.ictja.csic.es [will ask for password]\n</code></pre>"},{"location":"unix/commands/#terminal-multiplexers","title":"Terminal multiplexers","text":"<p>Keep your terminal sessions alive and well under <code>Linux/*BSD/macOS</code> and Unix-like systems.</p> <ol> <li>screen (GNU)</li> <li>dtach</li> <li>tmux (BSD)</li> <li>byobu</li> <li>abduco</li> <li>dvtm</li> <li>mtm</li> </ol>"},{"location":"unix/commands/#miscellaneous-commands","title":"Miscellaneous commands","text":"<pre><code>seq         : generates sequence of numbers\n\nrev         : reverses lines of a file (or stdin)\n\npr          : convert text files for printing\n\nuntil       : $ until cd /usr/src/usr.bin/vi ; do sleep 1; done # repeat command until it works\n\nfeh         : view image files\n\n              feh -F -Y -z -D 3.5 *.jpg\n\n              feh \n              -F full screen\n              -Y hide pointer\n              -z randomize\n              -D seconds\n\n              commands: ctrl + delete (fn + ctrl + backspace) = deletes file from disk\n\n                        h = pause/continue\n                        p = previous image\n                        n = next image\n\n</code></pre>"},{"location":"unix/commands/#ffmpeg","title":"ffmpeg","text":"<p>Here is how to create a slideshow from images (1.jpg,2.jpg..,8.jpg) with FFmpeg on your Linux or Unix box:</p> <pre><code>$ ffmpeg -y -r 1/3 -framerate 1 -i %1d.jpg  -c:v libx264 -vf fps=5 -pix_fmt yuv420p out.mp4\n</code></pre>"},{"location":"unix/commands/#od-octal-dump","title":"od: octal dump","text":"<p>To output the contents of a binary file interpreted as floats (e.g. PStomo model file). Repeated lines are indicated by an asterisk <code>*</code>.</p> <pre><code>$ od -f pm.0\n0000000     4.720000e+00    4.720000e+00    4.720000e+00    4.720000e+00\n*\n0006740     5.080000e+00    5.080000e+00    5.080000e+00    5.080000e+00\n*\n0015700     5.440000e+00    5.440000e+00    5.440000e+00    5.440000e+00\n*\n0024640     5.800000e+00    5.800000e+00    5.800000e+00    5.800000e+00\n*\n0033600     6.160000e+00    6.160000e+00    6.160000e+00    6.160000e+00\n*\n0042540     6.520000e+00    6.520000e+00    6.520000e+00    6.520000e+00\n*\n0051500     6.880000e+00    6.880000e+00    6.880000e+00    6.880000e+00\n*\n0060440     7.240000e+00    7.240000e+00    7.240000e+00    7.240000e+00\n*\n0067400     7.600000e+00    7.600000e+00    7.600000e+00    7.600000e+00\n*\n0076340     7.960000e+00    7.960000e+00    7.960000e+00    7.960000e+00\n*\n0105300     8.200000e+00    8.200000e+00    8.200000e+00    8.200000e+00\n*\n0230500\n</code></pre> <p>To output all lines included repeated ones:</p> <pre><code>$ od -f -v pm.0\n0000000     4.720000e+00    4.720000e+00    4.720000e+00    4.720000e+00\n0000020     4.720000e+00    4.720000e+00    4.720000e+00    4.720000e+00\n0000040     4.720000e+00    4.720000e+00    4.720000e+00    4.720000e+00\n0000060     4.720000e+00    4.720000e+00    4.720000e+00    4.720000e+00\n0000100     4.720000e+00    4.720000e+00    4.720000e+00    4.720000e+00\n...\n</code></pre> <p>In Linux version -w controls the number of bytes per line in output</p> <pre><code>$ god -f -v -w4 pm.0\n0000000            4.72\n0000004            4.72\n0000010            4.72\n0000014            4.72\n0000020            4.72\n0000024            4.72\n0000030            4.72\n</code></pre> <p>Option address=none does not print the address:</p> <pre><code>$ god -f -v -w4 -An pm.0\n\n        5.106375\n        5.106778\n        5.107523\n       5.1090393\n       5.1125073\n</code></pre>"},{"location":"unix/commands/#download-videos","title":"Download videos","text":"<p>Twitter videos can be downloaded here and here.</p> <p>To download YouTube videos you can use the <code>youtube-dl</code> program (installed using MacPorts):</p> <pre><code>$ youtube-dl command-line tool\n</code></pre> <p>10 PRINT</p> <pre><code>$ env LC_ALL=C tr -c -d '/\\' &lt; /dev/random  (or /dev/urandom)\n</code></pre>"},{"location":"unix/commands/#unix-options","title":"Unix options","text":"<pre><code>Option  Typical meaning\n\n-a  All, append\n-b  Buffer,block size, batch\n-c  Command, check\n-d  Debug, delete, directory\n-D  Define\n-e  Execute, edit\n-f  File, force\n-h  Headers, help\n-i  Initialize\n-I  Include\n-k  Keep, kill\n-l  List, long, load\n-m  Message\n-n  Number, not\n-o  Output\n-p  Port, protocol\n-q  Quiet\n-r  Recurse, reverse\n-s  Silent, subject\n-t  Tag\n-u  User\n-v  Verbose\n-V  Version\n-w  Width, warning\n-x  Enable debugging, extract\n-y  Yes\n-z  Enable compression\n</code></pre>"},{"location":"unix/dotfiles/","title":"Dotfiles","text":""},{"location":"unix/dotfiles/#bash_aliases","title":".bash_aliases","text":"<p>Aliases can be included in the <code>.bashrc</code> file or better in a separate file commonly  named <code>.bash_aliases</code>. This file is executed from <code>.bashrc</code>:</p> <pre><code># Alias definitions.\n# You may want to put all your additions into a separate file like\n# ~/.bash_aliases, instead of adding them here directly.\n# See /usr/share/doc/bash-doc/examples in the bash-doc package.\n\nif [ -f ~/.bash_aliases ]; then\n    . ~/.bash_aliases\nfi\n</code></pre> <p>Typical aliases for ls and grep:</p> <pre><code># some ls aliases\nalias ls='ls -GFh'\nalias la='ls -A'\nalias ll='ls -alF'\nalias lh='ls -alt | head -20'\nalias l='ls -CF'\n\n# some grep aliases\nalias grep='grep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias egrep='egrep --color=auto'\n</code></pre> <p>Some utilities:</p> <pre><code>alias human_path='echo \"${PATH//:/$'\"'\"'\\n'\"'\"'}\"'\n</code></pre> <p>Alias with common options for commands:</p> <pre><code>alias feh='feh -F -Y -z -Z -D 5.0'\nalias gvl='/opt/local/bin/gv --orientation=landscape'\nalias sac='$SACHOME/bin/sac $SACAUX/macros/init.m'\n</code></pre> <p>Specific aliases for macOS:</p> <pre><code>alias te='open -a textedit'\n</code></pre>"},{"location":"unix/dotfiles/#vimrc","title":".vimrc","text":"<pre><code>set nocompatible\nsyntax on\n\"syntax files are located in /usr/share/vim/vim82/syntax\nlet g:markdown_fenced_languages = ['bash', 'c', 'cpp', 'fortran', 'python']\n\n\"set number\n\"set cursorline\nset cursorcolumn\nset ruler\n\nset expandtab\nset tabstop=4 shiftwidth=4\nset autoindent\n\nautocmd BufNewFile *.sh 0r ~/skeletons/bash.sh\n\"autocmd BufNewFile *.awk 0r ~/skeletons/template.awk\n\"autocmd BufNewFile readme.md 0r ~/skeletons/readme.md\n\"autocmd BufNewFile *.gmt6 0r ~/skeletons/gmt6.sh\n</code></pre>"},{"location":"unix/dotfiles/#login-shell","title":"Login shell","text":"<ol> <li>run <code>/etc/profile</code> (not run in an interactive shell)</li> </ol> <pre><code>$ cat /etc/profile\n# System-wide .profile for sh(1)\n\nif [ -x /usr/libexec/path_helper ]; then\n    eval `/usr/libexec/path_helper -s`\nfi\n\nif [ \"${BASH-no}\" != \"no\" ]; then\n    [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc\nfi\n</code></pre> <p>Last command runs <code>/etc/bashrc</code></p> <pre><code>$ cat /etc/bashrc\n# System-wide .bashrc file for interactive bash(1) shells.\nif [ -z \"$PS1\" ]; then\n   return\nfi\n\nPS1='\\h:\\W \\u\\$ '\n# Make bash check its window size after a process completes\nshopt -s checkwinsize\n\n[ -r \"/etc/bashrc_$TERM_PROGRAM\" ] &amp;&amp; . \"/etc/bashrc_$TERM_PROGRAM\"\n</code></pre> <p>Setups <code>PS1</code> prompt and checks window size (only for <code>$TERM_PROGRAM == Apple_Termimal</code>)</p> <ol> <li>Then one of:</li> </ol> <pre><code>~/.bash_profile         # this one is read only by bash\n~/.bash_login\n~/.profile          # this one is read by all shells, not only bash\n</code></pre> <p>These are local login items.</p> <ol> <li>And finally (depending on system???)</li> </ol> <p><code>~/.bashrc</code></p> <p>To keep the environment consistent between non-login and login shells, source the <code>.bashrc</code> from <code>.bash_profile</code></p> <pre><code>if [ -f ~/.bashrc ]; then\n        . ~/.bashrc\nfi\n</code></pre>"},{"location":"unix/dotfiles/#not-a-login-shell","title":"Not a login shell","text":"<p>[0. run /etc/bash.bashrc ?]</p> <ol> <li>run .bashrc</li> </ol> <p>There is a template for .bashrc in /etc/bashrc</p> <pre><code>$ cat /etc/bashrc\n# System-wide .bashrc file for interactive bash(1) shells.\nif [ -z \"$PS1\" ]; then\n   return\nfi\n\nPS1='\\h:\\W \\u\\$ '\n# Make bash check its window size after a process completes\nshopt -s checkwinsize\n\n[ -r \"/etc/bashrc_$TERM_PROGRAM\" ] &amp;&amp; . \"/etc/bashrc_$TERM_PROGRAM\"\n</code></pre>"},{"location":"unix/dotfiles/#macos","title":"macOS","text":"<p>Apparentely the OSX Apple Terminal and iTerm2 always open a login shell. Character (login or non-login) can be determined by leading \"-\" in $0 (need to make sure):</p> <p>% echo $0 -/bin/tcsh $ bash $ echo $0 bash</p>"},{"location":"unix/dotfiles/#non-interactive-shell","title":"Non-interactive shell","text":"<p>Executes the commands in the startup file indicated by variable BASH_ENV The default value of this variable is usually undefined</p> <p>This means that in a bash shell script no configuration file is executed??? Then variables are inherited from the shell that calls it??</p> <p>Common cases (options --login, --noprofile, --rcfile, --norc, not used)</p> <p>Interactive, Login:      /etc/profile, (~/.bash_profile | ~/.bash_login | ~/.profile), [~/.bashrc] Interactive, Non-Login:  /etc/bash.bashrc, ~/.bashrc Non-Interactive:         $BASH_ENV   (This means all variables inherited from parent shell?                                       What if shell is called from at, cron, etc?)</p> <p>In OS X all terminal applications open a login shell. Therefore all parameters must be in ~/.bash_profile or make that ~/.bash_profile sources ~/.bashrc</p> <p>In OS X /etc/bash.bashrc does not exist</p>"},{"location":"unix/dotfiles/#shell-options","title":"Shell options","text":"<pre><code>$ shopt (lists shell options)\n</code></pre> <p>an important one is \"huponexit\" (background jobs continue to run when closing shell)</p>"},{"location":"unix/installation/","title":"Installation","text":""},{"location":"unix/installation/#generic","title":"generic","text":"<p>Install compilers and development tools:</p> <pre><code>$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install build-essential\n$ sudo apt-get install gfortran (?)\n$ sudo apt-get install autotools-dev\n$ sudo apt-get install autoconf\n</code></pre> <p>Better use <code>apt</code>?</p>"},{"location":"unix/installation/#overflow","title":"overflow","text":"<p>Intel compilers (and MPI?)</p> <p>MPI</p> <pre><code>$ sudo apt-get install openmpi-bin openmpi-common openmpi-doc libopenmpi-dev\n</code></pre> <p>Google Earth Pro</p> <p>To install <code>deb</code> package beter use <code>gdebi</code> instead of <code>$ sudo dpkg -i example.deb</code></p> <pre><code>$ sudo apt install gdebi-core # [ wget ] [If you don't have gdebi nor wget]\n$ wget https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb\n$ sudo gdebi google-earth-pro-stable_current_amd64.deb \n$ google-earth-pro\n</code></pre> <p>Paraview</p>"},{"location":"unix/installation/#cuda-11","title":"CUDA 11","text":"<p>Installation Guide</p> <p>CUDA Quick Start Guide</p> <p>Linux &gt; x86_64 &gt; Ubuntu &gt; 16.04 &gt; deb (local)</p> <pre><code>wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-ubuntu1604.pin\nsudo mv cuda-ubuntu1604.pin /etc/apt/preferences.d/cuda-repository-pin-600\nwget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda-repo-ubuntu1604-11-0-local_11.0.1-450.36.06-1_amd64.deb\nsudo dpkg -i cuda-repo-ubuntu1604-11-0-local_11.0.1-450.36.06-1_amd64.deb\nsudo apt-key add /var/cuda-repo-ubuntu1604-11-0-local/7fa2af80.pub\nsudo apt-get update\nsudo apt-get -y install cuda\n</code></pre> <p>Linux &gt; x86_64 &gt; Ubuntu &gt; 18.04 &gt; deb (local)</p> <pre><code>wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin\nsudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600\nwget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda-repo-ubuntu1804-11-0-local_11.0.1-450.36.06-1_amd64.deb\nsudo dpkg -i cuda-repo-ubuntu1804-11-0-local_11.0.1-450.36.06-1_amd64.deb\nsudo apt-key add /var/cuda-repo-ubuntu1804-11-0-local/7fa2af80.pub\nsudo apt-get update\nsudo apt-get -y install cuda\n</code></pre> <p>Linux &gt; x86_64 &gt; Ubuntu &gt; 16.04 &gt; runfile</p> <pre><code>wget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda_11.0.1_450.36.06_linux.run\nsudo sh cuda_11.0.1_450.36.06_linux.run\n</code></pre> <p>Linux &gt; x86_64 &gt; Ubuntu &gt; 18.04 &gt; runfile</p> <pre><code>wget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda_11.0.1_450.36.06_linux.run\nsudo sh cuda_11.0.1_450.36.06_linux.run\n</code></pre>"},{"location":"unix/installation/#xlr8","title":"xlr8","text":"<pre><code>$ sudo synaptic\n</code></pre> <p>gv gfortran gmt (including all coastlines)</p> <pre><code>$ sudo addgroup --gid 1001 seismo\nAdding group `seismo' (GID 1001) ...\nDone.\n</code></pre> <pre><code>$ sudo adduser --uid 1001 --ingroup seismo antonio\nAdding user `antonio' ...\nAdding new user `antonio' (1001) with group `seismo' ...\nCreating home directory `/home/antonio' ...\nCopying files from `/etc/skel' ...\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully\nChanging the user information for antonio\nEnter the new value, or press ENTER for the default\n    Full Name []: Antonio Villasenor\n    Room Number []: 313\n    Work Phone []: 934095410\n    Home Phone []:\n    Other []:\n</code></pre>"},{"location":"unix/installation/#install-nvidia-gpu-drivers","title":"Install NVIDIA GPU drivers","text":"<p>[Installation of GPU driver was done by Anima] Instructions here</p> <p>Most current driver at 2017-09-15: nvidia-diag-driver-local-repo-ubuntu1604-384.66_1.0-1_amd64.deb</p> <pre><code>$ sudo dpkg -i nvidia-diag-driver-local-repo-ubuntu1604-384.66_1.0-1_amd64.deb\n$ sudo apt-get update\n$ apt-get install cuda-drivers\n</code></pre> <p>[reboot]</p> <p>Find out driver version:</p> <pre><code>$ nvidia-smi\nWed Oct 10 15:08:28 2018\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 410.48                 Driver Version: 410.48                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  Tesla P100-PCIE...  Off  | 00000000:81:00.0 Off |                    0 |\n| N/A   32C    P0    28W / 250W |      0MiB / 12198MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n</code></pre>"},{"location":"unix/installation/#install-cuda-drivers-and-cuda-toolkit","title":"Install CUDA drivers and CUDA Toolkit","text":"<p>[Checks in http://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html]</p> <pre><code>$ sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb\n$ sudo apt-get update\n$ sudo apt-get install cuda\n</code></pre> <p>Install CUDA 9.0</p> <pre><code>$ sudo dpkg -i cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.deb\n$ sudo apt-key add /var/cuda-repo-9-0-local/7fa2af80.pub\n$ sudo apt-get update           # if you do this it installs latest cuda\n$ sudo apt-get install cuda\n</code></pre> <p>[gives may warnings, including system not bootable!!??]</p> <p>Try again usin runfile:</p> <pre><code>$ sudo sh cuda_9.0.176_384.81_linux.run\n</code></pre> <p>Check CUDA version:</p> <pre><code>$ nvcc -V\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2018 NVIDIA Corporation\nBuilt on Sat_Aug_25_21:08:01_CDT_2018\nCuda compilation tools, release 10.0, V10.0.130\n</code></pre> <p>Changing symbolic link to /usr/local/cuda:</p> <pre><code>antonio@xlr8 ~ $ nvcc -V\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2017 NVIDIA Corporation\nBuilt on Fri_Sep__1_21:08:03_CDT_2017\nCuda compilation tools, release 9.0, V9.0.176\n</code></pre>"},{"location":"unix/installation/#install-intel-compilers","title":"Install Intel compilers","text":"<p>$ ./install_GUI.sh (not as sudo, it will ask later for password) [install it as trial!] [options: disable IA32 - if not 32-bit libraries error, and compiler does not install]</p>"},{"location":"unix/installation/#mpi","title":"MPI","text":"<p>OpenMPI: synaptic -&gt; openmpi-bin libopenmpi-dev (selecting the second one also selects the first one)</p> <p>Intel: $ tar xvzf l_mpi_2017.2.174.tgz $ cd l_mpi_2017.2.174.tgz $ sudo ./install.sh [enter defaults] Install location: /opt/intel/parallel_studio_xe_2017.2.050</p>"},{"location":"unix/installation/#install-pgi-compiler","title":"Install PGI compiler","text":"<p>$ tar xvzf pgilinux-2017-175-x86_64.tar.gz $ sudo ./install</p> <p>[installs PGI CUDA but not MPI]</p> <p>$ cd /opt/pgi [rename or delete license.dat] [copy license.dat provided by CSIC]</p> <p>Edit .bashrc</p> <p>export PGI=/opt/pgi; export PATH=/opt/pgi/linux86-64/17.5/bin:$PATH; export MANPATH=$MANPATH:/opt/pgi/linux86-64/17.5/man; export LM_LICENSE_FILE=$LM_LICENSE_FILE:/opt/pgi/license.dat;</p> <p>Command pgi_license_tool can manage licenses</p> <p>$ sudo ln -s /lib64/ld-linux-x86-64.so.2 /lib64/ld-lsb-x86-64.so.3 $ pgi_license_tool [option 4 = do nothing ]</p>"},{"location":"unix/installation/#install-python","title":"Install Python","text":"<p>Install python 3.5 with last installer that came with 3.5 by default (Anaconda3-4.2.0)</p> <p>$ bash Anaconda3-4.2.0-Linux-x86_64.sh</p> <p>$ conda update conda $ conda update anaconda $ conda install accelerate</p>"},{"location":"unix/installation/#setup-github-for-git","title":"Setup GitHub for git","text":"<pre><code>$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/antonio/.ssh/id_rsa):\nCreated directory '/home/antonio/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/antonio/.ssh/id_rsa.\nYour public key has been saved in /home/antonio/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXs antonio@xlr8\nThe key's randomart image is:\n+---[RSA 2048]----+\n|                 |\n+----[SHA256]-----+\n</code></pre> <p>NO PASSPHRASE!!!!</p> <pre><code>$ cat ~/.ssh/id_rsa.pub\n</code></pre> <p>[go to Bitbucket web page, Settings &gt; \"SSH keys &gt; Add Key\" and add public key]</p> <p>To check that it worked:</p> <pre><code>$ ssh -T git@bitbucket.org\nThe authenticity of host 'bitbucket.org (104.192.143.2)' can't be established.\nRSA key fingerprint is SHA256:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'bitbucket.org,104.192.143.2' (RSA) to the list of known hosts.\nlogged in as avillasenorh.\n</code></pre> <p>You can use git or hg to connect to Bitbucket. Shell access is disabled.</p> <pre><code>$ cd\n$ mkdir bin scripts devel\n$ cd devel\n$ git clone git@bitbucket.org:avillasenorh/noise-processing.git\n$ git clone git@bitbucket.org:avillasenorh/psim-tools.git\n$ git clone git@bitbucket.org:avillasenorh/let.git\n</code></pre>"},{"location":"unix/installation/#install-locally-fftw","title":"Install locally FFTW","text":"<pre><code>$ cd\n$ mkdir -p lib/fftw\n</code></pre> <p>[download fftw-3.3.6-pl2.tar.gz]</p> <pre><code>$ cd\n$ cd src\n$ tar xvzf .../fftw-3.3.6-pl2.tar.gz\n$ cd fftw-3.3.6-pl2\n$ ./configure --prefix=/home/antonio/lib/fftw\n$ make\n$ make check\n(basic tests passed)\n$ make install\n.\n.\n.\n----------------------------------------------------------------------\nLibraries have been installed in:\n   /home/antonio/lib/fftw/lib\n\nIf you ever happen to want to link against installed libraries\nin a given directory, LIBDIR, you must either use libtool, and\nspecify the full pathname of the library, or use the '-LLIBDIR'\nflag during linking and do at least one of the following:\n   - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable\n     during execution\n   - add LIBDIR to the 'LD_RUN_PATH' environment variable\n     during linking\n   - use the '-Wl,-rpath -Wl,LIBDIR' linker flag\n   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\n\nSee any operating system documentation about shared libraries for\nmore information, such as the ld(1) and ld.so(8) manual pages.\n----------------------------------------------------------------------\n.\n.\n.\n</code></pre>"},{"location":"unix/installation/#install-packages-with-synaptic","title":"Install packages with Synaptic","text":"<ul> <li>gcc/gfortran</li> <li>gv</li> <li>GMT5</li> <li>libncurses-dev for CPS</li> <li>zlib for mseed2sac</li> </ul>"}]}