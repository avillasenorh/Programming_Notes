{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my notes on Programming and Software This is a collection of my notes about Programming languages and tools (code formatters, linters, documentation, Makefiles) and software packages. These notes were originally a large number of text files, but have been collected in a single repository and formatted using MkDocs . Antonio Villase\u00f1or (2021).","title":"Welcome to my notes on Programming and Software"},{"location":"#welcome-to-my-notes-on-programming-and-software","text":"This is a collection of my notes about Programming languages and tools (code formatters, linters, documentation, Makefiles) and software packages. These notes were originally a large number of text files, but have been collected in a single repository and formatted using MkDocs . Antonio Villase\u00f1or (2021).","title":"Welcome to my notes on Programming and Software"},{"location":"documentation/doxygen/","text":"Doxygen Doxygen is a tool to generate documentation from source code. It can be installed for macOS using a dmg file provided in the downloads page . Doxygen for C projects If Doxygen has been installed with a dmg file, the executable will be located in the /Applications folder. It is then useful to generate an alias for the executable so it can be run from the command line: $ alias doxygen='/Applications/Doxygen.app/Contents/Resources/doxygen' Go to source directory and generate configuration file: $ cd src/project $ mkdir docs $ doxygen -g project.cfg Edit project.cfg and change the following parameters: 35c35 < PROJECT_NAME = \"C date-time\" --- > PROJECT_NAME = \"My Project\" 47c47 < PROJECT_BRIEF = \"Utilities to handle dates and times using standard C structures and functions\" --- > PROJECT_BRIEF = 61c61 < OUTPUT_DIRECTORY = /Users/antonio/Dropbox/src/tests/C_time/docs --- > OUTPUT_DIRECTORY = 208c208 < JAVADOC_BANNER = YES --- > JAVADOC_BANNER = NO 272c272 < OPTIMIZE_OUTPUT_FOR_C = YES --- > OPTIMIZE_OUTPUT_FOR_C = NO 464c464 < EXTRACT_ALL = YES --- > EXTRACT_ALL = NO To search for source code in subdirectories: RECURSIVE = YES For Python use: OPTIMIZE_OUTPUT_JAVA = YES (instead of OPTIMIZE_OUTPUT_FOR_C) To generate documentation: $ doxygen project.cfg $ open docs/html/index.html Example of documentation of a function: /** ** @brief Print a @c timespec structure into a string using the ISO8601 format ** ** ISO 8061 format is: YYYY-MM-DDTHH:MM:SS.FFFFFFFFF ** ** @param[out] sdate string with date-time in ISO 8601 format ** @param[in] ts timespec structure containing a valid date-time */ Doxygen for Python projects Contrary to the official documentation, \"special commands\" are supported in docstrings. To do this the docstring must start with \"\"\"! (not tested!!!) Example: def area(l, w): \"\"\"! Calculate the area in sqm @param l length @param w width @return area @todo throw error if l<0 or w<0 \"\"\" return l*w","title":"Doxygen"},{"location":"documentation/doxygen/#doxygen","text":"Doxygen is a tool to generate documentation from source code. It can be installed for macOS using a dmg file provided in the downloads page .","title":"Doxygen"},{"location":"documentation/doxygen/#doxygen-for-c-projects","text":"If Doxygen has been installed with a dmg file, the executable will be located in the /Applications folder. It is then useful to generate an alias for the executable so it can be run from the command line: $ alias doxygen='/Applications/Doxygen.app/Contents/Resources/doxygen' Go to source directory and generate configuration file: $ cd src/project $ mkdir docs $ doxygen -g project.cfg Edit project.cfg and change the following parameters: 35c35 < PROJECT_NAME = \"C date-time\" --- > PROJECT_NAME = \"My Project\" 47c47 < PROJECT_BRIEF = \"Utilities to handle dates and times using standard C structures and functions\" --- > PROJECT_BRIEF = 61c61 < OUTPUT_DIRECTORY = /Users/antonio/Dropbox/src/tests/C_time/docs --- > OUTPUT_DIRECTORY = 208c208 < JAVADOC_BANNER = YES --- > JAVADOC_BANNER = NO 272c272 < OPTIMIZE_OUTPUT_FOR_C = YES --- > OPTIMIZE_OUTPUT_FOR_C = NO 464c464 < EXTRACT_ALL = YES --- > EXTRACT_ALL = NO To search for source code in subdirectories: RECURSIVE = YES For Python use: OPTIMIZE_OUTPUT_JAVA = YES (instead of OPTIMIZE_OUTPUT_FOR_C) To generate documentation: $ doxygen project.cfg $ open docs/html/index.html Example of documentation of a function: /** ** @brief Print a @c timespec structure into a string using the ISO8601 format ** ** ISO 8061 format is: YYYY-MM-DDTHH:MM:SS.FFFFFFFFF ** ** @param[out] sdate string with date-time in ISO 8601 format ** @param[in] ts timespec structure containing a valid date-time */","title":"Doxygen for C projects"},{"location":"documentation/doxygen/#doxygen-for-python-projects","text":"Contrary to the official documentation, \"special commands\" are supported in docstrings. To do this the docstring must start with \"\"\"! (not tested!!!) Example: def area(l, w): \"\"\"! Calculate the area in sqm @param l length @param w width @return area @todo throw error if l<0 or w<0 \"\"\" return l*w","title":"Doxygen for Python projects"},{"location":"documentation/latex/","text":"LaTeX LaTeX is a powerful document creation software. It is particularly useful for long documents and also for displaying math. Documentation software such as Mkdocs and Sphinx accept LaTeX code. Basic document structure % Preamble \\documentclass[12pt, a4paper]{article} \\usepackage[utf8]{inputenc} % not needed in modern LaTeX releases \\usepackage{authblk} \\usepackage{graphicx} \\graphicspath{ {Figures/} } % Title and author(s) \\title{Skeleton for LaTeX articles} \\author[1]{Antonio Villase\u00f1or} \\author[2,3]{Another Author} \\affil[1]{Institute of Marine Sciences (ICM), CSIC, Pg. Maritim de la Barceloneta 37-49, E-08003 Barcelona, Spain} \\affil[2]{Some Institute} \\affil[3]{Some University} \\date{\\today} % write today's date (default) % Body of the document with numbered and un-numbered sections and bibliography \\begin{document} \\maketitle \\newpage \\begin{abstract} \\end{abstract} \\section{Introduction} \\section{Data} \\section{Methods} \\section{Results} \\section{Discussion} \\section{Conclusions} \\section*{Data and Resources} % asterisk disables numbering of this section \\section*{Acknowledgments} \\bibliography{references} % generate reference list using file references.bib \\end{document} Preamble Sets the type of document (article, book, etc), and all the packages that will be used. The first element is the document class. To create the simplest document use for example: \\documentclass{minimal} \\begin{document} Minimal document. \\end{document} Typical packages: geometry : set page size and margins inputenc : allows to use accented characters directly fontenc : ? amsmath , amssymb , amsfonts , latexsym : AMS symbols and math mathptmx : use times as default font, and provide maths support (outdated?) authblk : handle authors and affiliations babel : use other languages lineno : add line numbers graphicx : handle figures (extended version of graphic ) Example of a preamble using the above packages: \\documentclass[a4paper, 12pt]{article} \\usepackage{amsmath,amssymb,amsfonts,latexsym} %\\usepackage[utf8]{inputenc} \\usepackage[latin1]{inputenc} \\usepackage[T1]{fontenc} # better than default encoding OT1 (?) \\usepackage{authblk} \\usepackage{graphicx} \\graphicspath{ {Figures/} } \\usepackage{lineno} \\linenumbers Citations The standard LaTeX command \\cite does not have enough flexibility and should be avoided. Instead use the non-standard commands \\citep and \\citet provided by the natbib package. To use the natbib package, the following line must be added in the preamble: \\usepackage[round, semicolon, sort&compress, authoryear]{natbib} # round, semicolon, and authoryear are default options To cite using textual notation as in: Allen (1978) use: \\citet{Allen1978} To cite using parenthetical notation as in: (Allen, 1978) use: \\citep{Allen1978} To cite between parenthesis with text after citation: (Allen, 1978, p. 100) use: \\citep[p.~100]{Allen1978} To cite between parenthesis with text before citation: (e.g., Allen, 1978) use: \\citep[e.g.,][]{Allen1978} To cite between parenthesis with text before and after citation: (see Allen, 1978, chap. 2) use: \\citep[see][chap.~2]{Allen1978} Commands \\citep*{many_authors} and \\citet*{many_authors} lists all the authors instead of the abbreviated list. E.g., (Johnson, Lewis, and Watson, 1990) .","title":"LaTeX"},{"location":"documentation/latex/#latex","text":"LaTeX is a powerful document creation software. It is particularly useful for long documents and also for displaying math. Documentation software such as Mkdocs and Sphinx accept LaTeX code.","title":"LaTeX"},{"location":"documentation/latex/#basic-document-structure","text":"% Preamble \\documentclass[12pt, a4paper]{article} \\usepackage[utf8]{inputenc} % not needed in modern LaTeX releases \\usepackage{authblk} \\usepackage{graphicx} \\graphicspath{ {Figures/} } % Title and author(s) \\title{Skeleton for LaTeX articles} \\author[1]{Antonio Villase\u00f1or} \\author[2,3]{Another Author} \\affil[1]{Institute of Marine Sciences (ICM), CSIC, Pg. Maritim de la Barceloneta 37-49, E-08003 Barcelona, Spain} \\affil[2]{Some Institute} \\affil[3]{Some University} \\date{\\today} % write today's date (default) % Body of the document with numbered and un-numbered sections and bibliography \\begin{document} \\maketitle \\newpage \\begin{abstract} \\end{abstract} \\section{Introduction} \\section{Data} \\section{Methods} \\section{Results} \\section{Discussion} \\section{Conclusions} \\section*{Data and Resources} % asterisk disables numbering of this section \\section*{Acknowledgments} \\bibliography{references} % generate reference list using file references.bib \\end{document}","title":"Basic document structure"},{"location":"documentation/latex/#preamble","text":"Sets the type of document (article, book, etc), and all the packages that will be used. The first element is the document class. To create the simplest document use for example: \\documentclass{minimal} \\begin{document} Minimal document. \\end{document} Typical packages: geometry : set page size and margins inputenc : allows to use accented characters directly fontenc : ? amsmath , amssymb , amsfonts , latexsym : AMS symbols and math mathptmx : use times as default font, and provide maths support (outdated?) authblk : handle authors and affiliations babel : use other languages lineno : add line numbers graphicx : handle figures (extended version of graphic ) Example of a preamble using the above packages: \\documentclass[a4paper, 12pt]{article} \\usepackage{amsmath,amssymb,amsfonts,latexsym} %\\usepackage[utf8]{inputenc} \\usepackage[latin1]{inputenc} \\usepackage[T1]{fontenc} # better than default encoding OT1 (?) \\usepackage{authblk} \\usepackage{graphicx} \\graphicspath{ {Figures/} } \\usepackage{lineno} \\linenumbers","title":"Preamble"},{"location":"documentation/latex/#citations","text":"The standard LaTeX command \\cite does not have enough flexibility and should be avoided. Instead use the non-standard commands \\citep and \\citet provided by the natbib package. To use the natbib package, the following line must be added in the preamble: \\usepackage[round, semicolon, sort&compress, authoryear]{natbib} # round, semicolon, and authoryear are default options To cite using textual notation as in: Allen (1978) use: \\citet{Allen1978} To cite using parenthetical notation as in: (Allen, 1978) use: \\citep{Allen1978} To cite between parenthesis with text after citation: (Allen, 1978, p. 100) use: \\citep[p.~100]{Allen1978} To cite between parenthesis with text before citation: (e.g., Allen, 1978) use: \\citep[e.g.,][]{Allen1978} To cite between parenthesis with text before and after citation: (see Allen, 1978, chap. 2) use: \\citep[see][chap.~2]{Allen1978} Commands \\citep*{many_authors} and \\citet*{many_authors} lists all the authors instead of the abbreviated list. E.g., (Johnson, Lewis, and Watson, 1990) .","title":"Citations"},{"location":"documentation/mkdocs/","text":"MkDocs MkDocs is a Python package to generate documentation of software projects. It uses Markdown documents to generate the web pages. It is ideal for documenting the use of sofware packages, tutorials, and notes like these. Unlike other documentation packages (to my understanding), it does not extract information from the source code files. Installation using pipx The task of creating and activating an environment to install a Python app can be simplified using pipx . This tool installs and runs Python applications from isolated environments. Once installed, these applications can be run from the command line without the need to activate the environment. The virtual environments are usually in ~/.local/pipx/venvs and the applications are soft links in ~/.local/bin . This last directory must be included in the $PATH environmental variable. The applications are installed using the command pipx install : $ pipx install mkdocs Sometimes the applications require additional packages (e.g. to add some functionalities). It is possible to install additional packages in an existing pipx application using pipx runpip . To install the python-markdown-math package that adds $ pipx runpip mkdocs install python-markdown-math Installation using conda $ conda create -n mkdocs python=3.8 $ source activate mkdocs $ pip install mkdocs $ pip install python-markdown-math $ mkdocs --version mkdocs, version 1.1.2 from /Users/antonio/opt/anaconda3/envs/mkdocs/lib/python3.8/site-packages/mkdocs (Python 3.8) Getting started To create a directory for documentation files: $ mkdocs new mkdocs_test INFO - Creating project directory: mkdocs_test INFO - Writing config file: mkdocs_test/mkdocs.yml INFO - Writing initial docs: mkdocs_test/docs/index.md creates a directory called mkdocs_test with the following files: mkdocs.yml docs/ docs/index.md To create documetation files in a directory already exists: $ cd my_project $ mkdocs new . INFO - Writing config file: ./mkdocs.yml INFO - Writing initial docs: ./docs/index.md Originally the mkdocs.yml: Initially the docs/index.md file contains the following: # Welcome to MkDocs For full documentation visit [mkdocs.org](https://www.mkdocs.org). ## Commands * `mkdocs new [dir-name]` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server. * `mkdocs build` - Build the documentation site. * `mkdocs -h` - Print help message and exit. ## Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. To create web page and server $ mkdocs serve & $ open http://127.0.0.1:8000/ This allows to preview web page as you work on it (web page is automatically refreshed) When done, to generate the web site: $ mkdocs build Creates directory \"site\" whith index.html, css, ... $ mkdocs build --clean # removes unused files If you don't want to keep it in git, edit .gitignore and add: site/ Documentation web page can be deployed to GitHub!!! Editing basic files and adding pages Change site_name in mkdocs.yml: site_name: My Docs Add pages $ curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md This adds an \"About\" pull down menu from main page. Specify pull down menus and menu names in mkdocs.yml (add nav: - do not used tabs for indentation!) MkDocs creates menu items from file names in docs/ directory, but it is better to specify it explicitly in mkdocs.yml site_name: C++ test programs and libraries nav: - Home: index.md - About: about.md - Tutorials: tutorials.md - Parameters: parameters.md #theme: readthedocs Each section can have subsections. Names (section and Markdown files) can be between single quotes. Deploy documentation to GitHub In GitHub create a repository PStomo_documentation and initialize it with a README Clone repository into local machine: $ git clone https://github.com/avillasenorh/PStomo_documentation.git Copy mkdocs.yml and docs/ to local repository $ cp -r mkdocs.yml docs ..../PStomo_documentation/. Generate site $ cd PStomo_documentation $ mkdocs build [--clean] $ git add -A $ git commit -m \"Initial build\" $ git push $ mkdocs gh-deploy Creates web site: https://avillasenorh.github.io/PStomo_documentation/ Add math equations to mkdocs To add the capability of displaying mathematical equations, the python-markdown-math package is required. The file mkdocs.yml must be edited so it can use the Markdownn extensions from this package. This is done adding the following lines: site_name: My Docs extra_javascript: - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML markdown_extensions: - mdx_math Test web page editing docs/index.md: # MathJax Test Page When \\(a \\ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ Produces the following output: When a \\ne 0 , there are two solutions to ax^2 + bx + c = 0 and they are x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. Resources The best MkDocs plugins and customizations Mermaid diagrams using text and code ( GitHub ) Material for MkDocs MkDocs is the Perfect Open Source Documentation Software MkDocs Wiki MkDocs GitBook theme MkDocs plugins mkdocstrings","title":"MkDocs"},{"location":"documentation/mkdocs/#mkdocs","text":"MkDocs is a Python package to generate documentation of software projects. It uses Markdown documents to generate the web pages. It is ideal for documenting the use of sofware packages, tutorials, and notes like these. Unlike other documentation packages (to my understanding), it does not extract information from the source code files.","title":"MkDocs"},{"location":"documentation/mkdocs/#installation-using-pipx","text":"The task of creating and activating an environment to install a Python app can be simplified using pipx . This tool installs and runs Python applications from isolated environments. Once installed, these applications can be run from the command line without the need to activate the environment. The virtual environments are usually in ~/.local/pipx/venvs and the applications are soft links in ~/.local/bin . This last directory must be included in the $PATH environmental variable. The applications are installed using the command pipx install : $ pipx install mkdocs Sometimes the applications require additional packages (e.g. to add some functionalities). It is possible to install additional packages in an existing pipx application using pipx runpip . To install the python-markdown-math package that adds $ pipx runpip mkdocs install python-markdown-math","title":"Installation using pipx"},{"location":"documentation/mkdocs/#installation-using-conda","text":"$ conda create -n mkdocs python=3.8 $ source activate mkdocs $ pip install mkdocs $ pip install python-markdown-math $ mkdocs --version mkdocs, version 1.1.2 from /Users/antonio/opt/anaconda3/envs/mkdocs/lib/python3.8/site-packages/mkdocs (Python 3.8)","title":"Installation using conda"},{"location":"documentation/mkdocs/#getting-started","text":"To create a directory for documentation files: $ mkdocs new mkdocs_test INFO - Creating project directory: mkdocs_test INFO - Writing config file: mkdocs_test/mkdocs.yml INFO - Writing initial docs: mkdocs_test/docs/index.md creates a directory called mkdocs_test with the following files: mkdocs.yml docs/ docs/index.md To create documetation files in a directory already exists: $ cd my_project $ mkdocs new . INFO - Writing config file: ./mkdocs.yml INFO - Writing initial docs: ./docs/index.md Originally the mkdocs.yml: Initially the docs/index.md file contains the following: # Welcome to MkDocs For full documentation visit [mkdocs.org](https://www.mkdocs.org). ## Commands * `mkdocs new [dir-name]` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server. * `mkdocs build` - Build the documentation site. * `mkdocs -h` - Print help message and exit. ## Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Getting started"},{"location":"documentation/mkdocs/#to-create-web-page-and-server","text":"$ mkdocs serve & $ open http://127.0.0.1:8000/ This allows to preview web page as you work on it (web page is automatically refreshed) When done, to generate the web site: $ mkdocs build Creates directory \"site\" whith index.html, css, ... $ mkdocs build --clean # removes unused files If you don't want to keep it in git, edit .gitignore and add: site/ Documentation web page can be deployed to GitHub!!!","title":"To create web page and server"},{"location":"documentation/mkdocs/#editing-basic-files-and-adding-pages","text":"Change site_name in mkdocs.yml: site_name: My Docs Add pages $ curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md This adds an \"About\" pull down menu from main page. Specify pull down menus and menu names in mkdocs.yml (add nav: - do not used tabs for indentation!) MkDocs creates menu items from file names in docs/ directory, but it is better to specify it explicitly in mkdocs.yml site_name: C++ test programs and libraries nav: - Home: index.md - About: about.md - Tutorials: tutorials.md - Parameters: parameters.md #theme: readthedocs Each section can have subsections. Names (section and Markdown files) can be between single quotes.","title":"Editing basic files and adding pages"},{"location":"documentation/mkdocs/#deploy-documentation-to-github","text":"In GitHub create a repository PStomo_documentation and initialize it with a README Clone repository into local machine: $ git clone https://github.com/avillasenorh/PStomo_documentation.git Copy mkdocs.yml and docs/ to local repository $ cp -r mkdocs.yml docs ..../PStomo_documentation/. Generate site $ cd PStomo_documentation $ mkdocs build [--clean] $ git add -A $ git commit -m \"Initial build\" $ git push $ mkdocs gh-deploy Creates web site: https://avillasenorh.github.io/PStomo_documentation/","title":"Deploy documentation to GitHub"},{"location":"documentation/mkdocs/#add-math-equations-to-mkdocs","text":"To add the capability of displaying mathematical equations, the python-markdown-math package is required. The file mkdocs.yml must be edited so it can use the Markdownn extensions from this package. This is done adding the following lines: site_name: My Docs extra_javascript: - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML markdown_extensions: - mdx_math Test web page editing docs/index.md: # MathJax Test Page When \\(a \\ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ Produces the following output: When a \\ne 0 , there are two solutions to ax^2 + bx + c = 0 and they are x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.","title":"Add math equations to mkdocs"},{"location":"documentation/mkdocs/#resources","text":"The best MkDocs plugins and customizations Mermaid diagrams using text and code ( GitHub ) Material for MkDocs MkDocs is the Perfect Open Source Documentation Software MkDocs Wiki MkDocs GitBook theme MkDocs plugins mkdocstrings","title":"Resources"},{"location":"documentation/sphinx/","text":"Sphinx Sphinx is a Python package to generate documentation of software projects. By default it uses rst format but now it can also use Markdown . does not extract information from the source code files. Installation using pipx $ pipx install sphinx # check Sometimes the applications installed with pipx require additional packages (e.g. to add some functionalities, such as additional themes, ...). It is possible to install additional packages in an existing pipx application using pipx runpip . To install the myst-parser package that adds capability to use Markdown documents: $ pipx runpip sphinx install myst-parser Other useful packages art the Read the Docs and Furo themes: $ pipx runpip sphinx install sphinx_rtd_theme $ pipx runpip sphinx install furo To use Markdown and Read the Docs theme: import sphinx_rtd_theme ... extensions = [ \"myst_parser\", \"sphinx_rtd_theme\", ] ... html_theme = \"sphinx_rtd_theme\" To use the Furo theme simply: html_theme = \"furo\" Changing from reStructuredText to Markdown Once added the myst_parser extension in conf.py we can change index.rst for index.md . An initial file index.rst looks like: .. test documentation master file, created by sphinx-quickstart ... Welcome to test's documentation! ================================ .. toctree:: :maxdepth: 2 :caption: Contents: Indices and tables ================== * :ref:`genindex` * :ref:`modindex` * :ref:`search` The equivalent Markdown file index.md would be: % test documentation master file, created by % sphinx-quickstart # Welcome to test's documentation! ```{toctree} :maxdepth: 2 :caption: \"Contents:\" ``` # Indices and tables - {ref}`genindex` - {ref}`modindex` - {ref}`search` ## Inserting figures Local and remote figures can be inserted using standard Markdown syntax: ```markdown ![remote logo here](https://..../logo.png) ![local logo here](logo.png) Myst-Sphinx also allows more options but first you need to add and extension in conf.py : myst_enable_extensions = [ \"colon_fence\", ] You can use rest: ```{image} logo.png :alt: local logo here :class: bg-primary :width: 200px :align: center ``` You can also use HTML: :::{figure-md} logo-target :class: myclass <img src=\"logo.png\" alt=\"local logo here\" class=\"bg-primary\" width=\"300px\"> Here Python logo ::: Download You can download the file logo.png for offline use. {download}`logo.png` {download}`the logo <logo.png>` Normal markdown link text this gets the text from the linked document title Some roles Define role somewhere in your documents as: (investors)= Then use this to refer to {ref}`investors` This might work to change your linked text: {ref}`another text <investors>` Code blocks Normal markdown: ```python print(\"hola\") ``` myst ```{code-block} python :linenos: print(\"hola\") ``` Code from file: This includes the entire file: ```{literalinclude} my_file.py ``` For more options: ```{literalinclude} my_file.py :emphasize-lines: 2-3 ```","title":"Sphinx"},{"location":"documentation/sphinx/#sphinx","text":"Sphinx is a Python package to generate documentation of software projects. By default it uses rst format but now it can also use Markdown . does not extract information from the source code files.","title":"Sphinx"},{"location":"documentation/sphinx/#installation-using-pipx","text":"$ pipx install sphinx # check Sometimes the applications installed with pipx require additional packages (e.g. to add some functionalities, such as additional themes, ...). It is possible to install additional packages in an existing pipx application using pipx runpip . To install the myst-parser package that adds capability to use Markdown documents: $ pipx runpip sphinx install myst-parser Other useful packages art the Read the Docs and Furo themes: $ pipx runpip sphinx install sphinx_rtd_theme $ pipx runpip sphinx install furo To use Markdown and Read the Docs theme: import sphinx_rtd_theme ... extensions = [ \"myst_parser\", \"sphinx_rtd_theme\", ] ... html_theme = \"sphinx_rtd_theme\" To use the Furo theme simply: html_theme = \"furo\"","title":"Installation using pipx"},{"location":"documentation/sphinx/#changing-from-restructuredtext-to-markdown","text":"Once added the myst_parser extension in conf.py we can change index.rst for index.md . An initial file index.rst looks like: .. test documentation master file, created by sphinx-quickstart ... Welcome to test's documentation! ================================ .. toctree:: :maxdepth: 2 :caption: Contents: Indices and tables ================== * :ref:`genindex` * :ref:`modindex` * :ref:`search` The equivalent Markdown file index.md would be: % test documentation master file, created by % sphinx-quickstart # Welcome to test's documentation! ```{toctree} :maxdepth: 2 :caption: \"Contents:\" ``` # Indices and tables - {ref}`genindex` - {ref}`modindex` - {ref}`search` ## Inserting figures Local and remote figures can be inserted using standard Markdown syntax: ```markdown ![remote logo here](https://..../logo.png) ![local logo here](logo.png) Myst-Sphinx also allows more options but first you need to add and extension in conf.py : myst_enable_extensions = [ \"colon_fence\", ] You can use rest: ```{image} logo.png :alt: local logo here :class: bg-primary :width: 200px :align: center ``` You can also use HTML: :::{figure-md} logo-target :class: myclass <img src=\"logo.png\" alt=\"local logo here\" class=\"bg-primary\" width=\"300px\"> Here Python logo :::","title":"Changing from reStructuredText to Markdown"},{"location":"documentation/sphinx/#download","text":"You can download the file logo.png for offline use. {download}`logo.png` {download}`the logo <logo.png>` Normal markdown link text this gets the text from the linked document title","title":"Download"},{"location":"documentation/sphinx/#some-roles","text":"Define role somewhere in your documents as: (investors)= Then use this to refer to {ref}`investors` This might work to change your linked text: {ref}`another text <investors>`","title":"Some roles"},{"location":"documentation/sphinx/#code-blocks","text":"Normal markdown: ```python print(\"hola\") ``` myst ```{code-block} python :linenos: print(\"hola\") ``` Code from file: This includes the entire file: ```{literalinclude} my_file.py ``` For more options: ```{literalinclude} my_file.py :emphasize-lines: 2-3 ```","title":"Code blocks"},{"location":"gmt/gmt5/","text":"GMT5 Recipes for GMT5 Initial configuration $ gmt defaults > gmt.conf Reduce fonts sizes (defaults too large) # # FONT Parameters # FONT_ANNOT_PRIMARY = 10p,Helvetica,black FONT_ANNOT_SECONDARY = 12p,Helvetica,black FONT_LABEL = 14p,Helvetica,black FONT_LOGO = 8p,Helvetica,black FONT_TITLE = 14p,Helvetica,black Set map frame to plain MAP_FRAME_TYPE = plain Specifying line sytle Line style is specified with the -W option: -Wwidth,color,style Values of width can be: thinnest (0.25p), thinner (0.5p), thin (0.75p), or thick (1p). color can be specified with name or R/G/B style : dott[ed] or . dash[ed] or - dotdash or .- dashdot or -. string:offset (e.g. 4_8_5_8:2p ) For more complex line styles we can also used the annotated line symbol -Sq pstext format $ gmt pstext -J -R -F+f12p,Helvetica,black+jLB -W1.5p -G255 -K -O f: 12p font size Helvetica font black color j: theJustify LB (left bottom) a: angle -W1.5p = outline -Gwhite (255) = box background -D0.3/0.3 = add offset from x,y coordinates (e.g. lower left corner) psscale format $ gmt psscale -Cvp.cpt -Dx8c/-1c+w12c/0.5c+jTC+h+e -Bx+l\"label\" x8c/-1c = plot scale at fixed plot coordinates 8c/1c w12c/0.5c = scale size is 12c long by 0.5c wide jTC = justification is top-center h = plot a horizontal scale e = plot end triangles Close a GMT Postscript file $ gmt psxy -R -J -T -O >> $psfile Set label with decimal degrees gmt set FORMAT_GEO_MAP ddd.xF New label format -B[p|s][x|y|z][a|f|g]<tick>[m][l|p] -B[p|s][x|y|z][+l<label>][+p<prefix>][+u<unit>] -B[<axes>][+b][+g<fill>][+o<lon>/<lat>][+t<title>] Examples: -Bxa${xa}f${xt}g${xg} -Bya${ya}f${yt}g${yg}${axis} -BWeSn+t\"${label}\" -Bxa${xa}f${xt}g${xg}+l\"x label\" -Bya${ya}f${yt}g${yg}+l\"y label\" -BWeSn+t\"${label}\" Make water semitransparent gmt pscoast ... -S200 -t30 Then must convert to pdf in order to see transparency Pens, transparency, etc (not tested!!!!) -W0.25p+s : interpolates curve with splines! -t : transparency for this layer (command?). Only visible in PDF format => use psconvert 0 = opaque 100 = fully transparent chech PS_TRANSPARENCY in gmt.def color or fill specifications may append @transparency to change the PDF transparency level Convert shapefile to GMT Directly: $ org2ogr -f \u201cGMT\u201d output.gmt input.shp In two steps (in case direct conversion gives an error, e.g. Vectors not supported) $ ogr2ogr -f \u201cKML\u201d example.kml example.shp $ org2ogr -f \u201cGMT\u201d example.gmt example.kml gmt2kml Simple symbols: awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Gfred -Fs -I$icon -T\"Title\" > stations.kml Symbols with labels: awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Gfred -Fs -N- -I$icon -T\"Title\" > stations.kml awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Fs -Sc1.5 -Gfgreen -I$icon -N- -Sn0.8 -Gnpink -T\"Title\" > stations.kml -Fs -Sc1.5 -Gfgreen: plot symbol (x,y in file), size and fill -N- -Sn0.75 -Gngray: label in 3rd column, size (relative to 1), fill color -Gn- : turn off labels [works?] -Fs = symbol : x y [label] -Fe = event : x y [label] time -Ft = timespan : x y [label] tstart tstop/\"NaN\" -Fl = line -Fp = polygon -Fw = wiggle For stations/OBSs one could use -As0.0 to get altitude \"Clamped to sea floor/ground\" [works?] (see https://developers.google.com/kml/documentation/altitudemode) For Clamped to sea floor to work must change: <kml xmlns=\"http://www.opengis.net/kml/2.2\"> with: <kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\"> To get rid of subfolders in kml file, comment or delete everything between and first : </Style> <Folder> <name>stdin</name> <Folder> <name>Point Set 0</name> <Placemark> and also closing tags List of Google Maps icons: triangle donut square open-diamond polygon star target volcano earthquake placemark_circle placemark_circle_highlight placemark_square placemark_square_highlight","title":"GMT5"},{"location":"gmt/gmt5/#gmt5","text":"Recipes for GMT5","title":"GMT5"},{"location":"gmt/gmt5/#initial-configuration","text":"$ gmt defaults > gmt.conf Reduce fonts sizes (defaults too large) # # FONT Parameters # FONT_ANNOT_PRIMARY = 10p,Helvetica,black FONT_ANNOT_SECONDARY = 12p,Helvetica,black FONT_LABEL = 14p,Helvetica,black FONT_LOGO = 8p,Helvetica,black FONT_TITLE = 14p,Helvetica,black Set map frame to plain MAP_FRAME_TYPE = plain","title":"Initial configuration"},{"location":"gmt/gmt5/#specifying-line-sytle","text":"Line style is specified with the -W option: -Wwidth,color,style Values of width can be: thinnest (0.25p), thinner (0.5p), thin (0.75p), or thick (1p). color can be specified with name or R/G/B style : dott[ed] or . dash[ed] or - dotdash or .- dashdot or -. string:offset (e.g. 4_8_5_8:2p ) For more complex line styles we can also used the annotated line symbol -Sq","title":"Specifying line sytle"},{"location":"gmt/gmt5/#pstext-format","text":"$ gmt pstext -J -R -F+f12p,Helvetica,black+jLB -W1.5p -G255 -K -O f: 12p font size Helvetica font black color j: theJustify LB (left bottom) a: angle -W1.5p = outline -Gwhite (255) = box background -D0.3/0.3 = add offset from x,y coordinates (e.g. lower left corner)","title":"pstext format"},{"location":"gmt/gmt5/#psscale-format","text":"$ gmt psscale -Cvp.cpt -Dx8c/-1c+w12c/0.5c+jTC+h+e -Bx+l\"label\" x8c/-1c = plot scale at fixed plot coordinates 8c/1c w12c/0.5c = scale size is 12c long by 0.5c wide jTC = justification is top-center h = plot a horizontal scale e = plot end triangles","title":"psscale format"},{"location":"gmt/gmt5/#close-a-gmt-postscript-file","text":"$ gmt psxy -R -J -T -O >> $psfile","title":"Close a GMT Postscript file"},{"location":"gmt/gmt5/#set-label-with-decimal-degrees","text":"gmt set FORMAT_GEO_MAP ddd.xF","title":"Set label with decimal degrees"},{"location":"gmt/gmt5/#new-label-format","text":"-B[p|s][x|y|z][a|f|g]<tick>[m][l|p] -B[p|s][x|y|z][+l<label>][+p<prefix>][+u<unit>] -B[<axes>][+b][+g<fill>][+o<lon>/<lat>][+t<title>] Examples: -Bxa${xa}f${xt}g${xg} -Bya${ya}f${yt}g${yg}${axis} -BWeSn+t\"${label}\" -Bxa${xa}f${xt}g${xg}+l\"x label\" -Bya${ya}f${yt}g${yg}+l\"y label\" -BWeSn+t\"${label}\"","title":"New label format"},{"location":"gmt/gmt5/#make-water-semitransparent","text":"gmt pscoast ... -S200 -t30 Then must convert to pdf in order to see transparency","title":"Make water semitransparent"},{"location":"gmt/gmt5/#pens-transparency-etc-not-tested","text":"-W0.25p+s : interpolates curve with splines! -t : transparency for this layer (command?). Only visible in PDF format => use psconvert 0 = opaque 100 = fully transparent chech PS_TRANSPARENCY in gmt.def color or fill specifications may append @transparency to change the PDF transparency level","title":"Pens, transparency, etc (not tested!!!!)"},{"location":"gmt/gmt5/#convert-shapefile-to-gmt","text":"Directly: $ org2ogr -f \u201cGMT\u201d output.gmt input.shp In two steps (in case direct conversion gives an error, e.g. Vectors not supported) $ ogr2ogr -f \u201cKML\u201d example.kml example.shp $ org2ogr -f \u201cGMT\u201d example.gmt example.kml","title":"Convert shapefile to GMT"},{"location":"gmt/gmt5/#gmt2kml","text":"Simple symbols: awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Gfred -Fs -I$icon -T\"Title\" > stations.kml Symbols with labels: awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Gfred -Fs -N- -I$icon -T\"Title\" > stations.kml awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Fs -Sc1.5 -Gfgreen -I$icon -N- -Sn0.8 -Gnpink -T\"Title\" > stations.kml -Fs -Sc1.5 -Gfgreen: plot symbol (x,y in file), size and fill -N- -Sn0.75 -Gngray: label in 3rd column, size (relative to 1), fill color -Gn- : turn off labels [works?] -Fs = symbol : x y [label] -Fe = event : x y [label] time -Ft = timespan : x y [label] tstart tstop/\"NaN\" -Fl = line -Fp = polygon -Fw = wiggle For stations/OBSs one could use -As0.0 to get altitude \"Clamped to sea floor/ground\" [works?] (see https://developers.google.com/kml/documentation/altitudemode) For Clamped to sea floor to work must change: <kml xmlns=\"http://www.opengis.net/kml/2.2\"> with: <kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\"> To get rid of subfolders in kml file, comment or delete everything between and first : </Style> <Folder> <name>stdin</name> <Folder> <name>Point Set 0</name> <Placemark> and also closing tags List of Google Maps icons: triangle donut square open-diamond polygon star target volcano earthquake placemark_circle placemark_circle_highlight placemark_square placemark_square_highlight","title":"gmt2kml"},{"location":"gmt/gmt6/","text":"GMT6 Differences to previous versions Modern mode Default: use .nc extension for netCDF grids instead of old-style native grid format .grd initial configuration $ gmt defaults -D > ~/gmt.conf Reduce fonts sizes (defaults too large) # # FONT Parameters # FONT_ANNOT_PRIMARY = 10p,Helvetica,black FONT_ANNOT_SECONDARY = 12p,Helvetica,black FONT_LABEL = 14p,Helvetica,black FONT_TITLE = 14p,Helvetica,black Set map frame to plain MAP_FRAME_TYPE = plain subplots gmt set GMT_COMPATIBILITY 6 gmt set FORMAT_GEO_MAP ddd.x plot_size=\"?\" gmt begin location ps gmt subplot begin 3x1 -Ff16c/25c -A gmt coast -JM${plot_size} -R... -Bx... -By... -BWeSn -Df ... gmt coast -JM${plot_size} -R... -Bx... -By... -BWeSn -Df ... -c gmt coast -JM${plot_size} -R... -Bx... -By... -BWeSn -Df ... -c gmt subplot end gmt end show Get region from a netCDF grid file gmt grdinfo grid_file -I- Color palette gmt colorbar -DJMR -By+l\"meters\" -B1000 # if you set -Ccpt previously you don't have to set it here Earth Relief Grids GMT6 global earth relief grids page . To extract topography/bathymetry of a region: $ gmt grdcut @earth_relief_rru -Rlon1/lon2/lat1/lat2 -Goutput.nc u = s for seconds, m for minutes, d for degrees 01s = SRTM1S (30 m) 03s = SRTM3S (90 m) 15s = SRTM15+V2 (Tozer et al., Earth Space Sci., 2019) (~450 m) The rest are downsampled versions of 15s 30s = ~ 1 km 1m = 1.8 km With grids >= 15s the global file is downloaded to ~/.gmt/server . With grids 03s and 01s, only the tiles inside the region are donwloaded. To delete all the data in ~/.gmt/server : $ gmt clear data All global grids are gridline-registered except the 15s that is pixel-registered (check!!) Ilumination for Earth Relief Grids $ gmt grdimage grid_file -I+nt.4 -Ccpt_file Options for grdcontour Plot contours only larger that 100 km - Q100k Set contour interval -C1000 -Wcthinnest,blue # contours without annotations -A1000 -Wathin,black # contours with annotations File Formats GMT6 file formats page . Grid files Default = netCDF (.nc extension)","title":"GMT6"},{"location":"gmt/gmt6/#gmt6","text":"","title":"GMT6"},{"location":"gmt/gmt6/#differences-to-previous-versions","text":"Modern mode Default: use .nc extension for netCDF grids instead of old-style native grid format .grd","title":"Differences to previous versions"},{"location":"gmt/gmt6/#initial-configuration","text":"$ gmt defaults -D > ~/gmt.conf Reduce fonts sizes (defaults too large) # # FONT Parameters # FONT_ANNOT_PRIMARY = 10p,Helvetica,black FONT_ANNOT_SECONDARY = 12p,Helvetica,black FONT_LABEL = 14p,Helvetica,black FONT_TITLE = 14p,Helvetica,black Set map frame to plain MAP_FRAME_TYPE = plain","title":"initial configuration"},{"location":"gmt/gmt6/#subplots","text":"gmt set GMT_COMPATIBILITY 6 gmt set FORMAT_GEO_MAP ddd.x plot_size=\"?\" gmt begin location ps gmt subplot begin 3x1 -Ff16c/25c -A gmt coast -JM${plot_size} -R... -Bx... -By... -BWeSn -Df ... gmt coast -JM${plot_size} -R... -Bx... -By... -BWeSn -Df ... -c gmt coast -JM${plot_size} -R... -Bx... -By... -BWeSn -Df ... -c gmt subplot end gmt end show","title":"subplots"},{"location":"gmt/gmt6/#get-region-from-a-netcdf-grid-file","text":"gmt grdinfo grid_file -I-","title":"Get region from a netCDF grid file"},{"location":"gmt/gmt6/#color-palette","text":"gmt colorbar -DJMR -By+l\"meters\" -B1000 # if you set -Ccpt previously you don't have to set it here","title":"Color palette"},{"location":"gmt/gmt6/#earth-relief-grids","text":"GMT6 global earth relief grids page . To extract topography/bathymetry of a region: $ gmt grdcut @earth_relief_rru -Rlon1/lon2/lat1/lat2 -Goutput.nc u = s for seconds, m for minutes, d for degrees 01s = SRTM1S (30 m) 03s = SRTM3S (90 m) 15s = SRTM15+V2 (Tozer et al., Earth Space Sci., 2019) (~450 m) The rest are downsampled versions of 15s 30s = ~ 1 km 1m = 1.8 km With grids >= 15s the global file is downloaded to ~/.gmt/server . With grids 03s and 01s, only the tiles inside the region are donwloaded. To delete all the data in ~/.gmt/server : $ gmt clear data All global grids are gridline-registered except the 15s that is pixel-registered (check!!)","title":"Earth Relief Grids"},{"location":"gmt/gmt6/#ilumination-for-earth-relief-grids","text":"$ gmt grdimage grid_file -I+nt.4 -Ccpt_file","title":"Ilumination for Earth Relief Grids"},{"location":"gmt/gmt6/#options-for-grdcontour","text":"Plot contours only larger that 100 km - Q100k Set contour interval -C1000 -Wcthinnest,blue # contours without annotations -A1000 -Wathin,black # contours with annotations","title":"Options for grdcontour"},{"location":"gmt/gmt6/#file-formats","text":"GMT6 file formats page .","title":"File Formats"},{"location":"gmt/gmt6/#grid-files","text":"Default = netCDF (.nc extension)","title":"Grid files"},{"location":"gmt/pygmt/","text":"pyGMT Common usage import pygmt fig = pygmt.Figure() fig.coast(region='g', projection='R20/8i', shorelines=True, water='ligthblue', land='gray', frame=True, resolution='i') fig.show() # for notebooks fig.show(method='external') # output in Preview How to set plotting region: region = [45, 55, 135, 145] # rectangular region region = 'g' # globe region = 'EG' # country (Egypt) fig.plot(x=, y=, style='a0.2i', color='red', pen='black', label=f'red') frame=True frame=0 # also False? frame='a5f1' If the data are labelled: fig.legend() # plots a legend similar to Matplotlib Pass arguments to a Figure method KWARGS = dict(grid='@earth_relief_10m', region='g', projection='R-130/5i', frame=0, ) fig = pygmt.Figure() fig.grdimage(**KWARGS) fig.grdimage(shading=True, **KWARGS) grdimage can also use an object to plot (not necessarily a file name): import xarray as xr data = xr.DataArray(....) fig.grdimage(data, fname=True, ..., cmap='inferno', Q=True) # Q=True in NaN make it transparent fig.colorbar(frame='+l\"velocity\"') Modules not available in pyGMT: with pygmt.clib.Session() as session: session.call_module('meca', f'all the options here') there is a trick to create a temporary file, use it and delete it. with pygmt.helpers.GMTTempFile() as temp_file: with open(temp_file.name, 'w') as f: f.write('vaules') with pygmt.clib.... uset temp_file.name in arguments to session.call_module(....)","title":"pyGMT"},{"location":"gmt/pygmt/#pygmt","text":"","title":"pyGMT"},{"location":"gmt/pygmt/#common-usage","text":"import pygmt fig = pygmt.Figure() fig.coast(region='g', projection='R20/8i', shorelines=True, water='ligthblue', land='gray', frame=True, resolution='i') fig.show() # for notebooks fig.show(method='external') # output in Preview How to set plotting region: region = [45, 55, 135, 145] # rectangular region region = 'g' # globe region = 'EG' # country (Egypt) fig.plot(x=, y=, style='a0.2i', color='red', pen='black', label=f'red') frame=True frame=0 # also False? frame='a5f1' If the data are labelled: fig.legend() # plots a legend similar to Matplotlib","title":"Common usage"},{"location":"gmt/pygmt/#pass-arguments-to-a-figure-method","text":"KWARGS = dict(grid='@earth_relief_10m', region='g', projection='R-130/5i', frame=0, ) fig = pygmt.Figure() fig.grdimage(**KWARGS) fig.grdimage(shading=True, **KWARGS) grdimage can also use an object to plot (not necessarily a file name): import xarray as xr data = xr.DataArray(....) fig.grdimage(data, fname=True, ..., cmap='inferno', Q=True) # Q=True in NaN make it transparent fig.colorbar(frame='+l\"velocity\"')","title":"Pass arguments to a Figure method"},{"location":"gmt/pygmt/#modules-not-available-in-pygmt","text":"with pygmt.clib.Session() as session: session.call_module('meca', f'all the options here') there is a trick to create a temporary file, use it and delete it. with pygmt.helpers.GMTTempFile() as temp_file: with open(temp_file.name, 'w') as f: f.write('vaules') with pygmt.clib.... uset temp_file.name in arguments to session.call_module(....)","title":"Modules not available in pyGMT:"},{"location":"macos/admin/","text":"Admin Boot modes WD MyCloud NAS: Finder > Connect to server (cmd + k) smb://wdmycloud Disk Utility (old) Disk Utility has many formats: OS X Extended (Journaled): for casual Mac user OS X Extended (Case-sensitive, Journaled): for using with Mac Servers MS-DOS (FAT): outdated MS file system, can be used for PC/Mac compatibility but with files less than 4Gb ExFAT: more modern MS file system any file size can be used It also has schemes for when you erase a drive: GUID Partition Map (modern Macs and Windows PC) Master Boot Record (old Windows PC) Apple Partition Map (old PowerPC Macs) Command line settings Remove the Auto-Hide Dock Delay: $ defaults write com.apple.Dock autohide-delay -float 0 && killall Dock Make Hidden App Icons Translucent in the Dock: $ defaults write com.apple.Dock showhidden -bool YES && killall Dock Stop Full Names from Copying with Email Addresses in OS X Mail: $ defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false Enable Text Selection in Quick Look Windows: (does not work in El Capitan) $ defaults write com.apple.finder QLEnableTextSelection -bool TRUE;killall Finder (El Capitan) Hide sidebar in Preview when opening a file $ cd ~/Library/Containers/com.apple.Preview/Data/Library/Preferences/ $ defaults write com.apple.Preview PVPDFSuppressSidebarOnOpening true Always Show Hidden Files in the Finder: $ defaults write com.apple.finder AppleShowAllFiles -bool YES && killall Finder or $ defaults write com.apple.finder AppleShowAllFiles True; killall Finder $ defaults write com.apple.finder AppleShowAllFiles False; killall Finder (to restore) Hide Desktop Icons Completely: $ defaults write com.apple.finder CreateDesktop -bool false && killall Finder Change the Default Screen Shot Image Type: $ defaults write com.apple.screencapture type jpg && killall SystemUIServer Set Plain Text As The Default Format In TextEdit $ defaults write com.apple.TextEdit RichText -int 0 Prevent Textedit from saving by default to iCloud $ defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false Override the auto-detection performed by setting `force.LANG' defaults setting if you use a non-standard setup (e.g. different language than formats) $ defaults write org.R-project.R force.LANG en_US.UTF-8 Show only open apps in dock $ defaults write com.apple.dock static-only -bool TRUE; killall Dock $ defaults write com.apple.dock static-only -bool FALSE; killall Dock # restore to original state Stop Adobe Creative Cloud app form auto-launching on login (loaded by default on /Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist ) $ launchctl unload -w /Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist to set it back again: $ launchctl load -w /Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist Set, disable, and check sleep status $ sudo systemsetup -setcomputersleep 60 $ sudo systemsetup -setcomputersleep Never $ sudo systemsetup -getcomputersleep Computer Sleep: Never MySQL on macOS Install MySQL on a Mac OX X Get the appropriate DMG file from: http://dev.mysql.com/downloads/mysql/ If you need MySQL for PQLX make sure that you get a Development Release if not Generally Available (GA) Releases are ok Click on the pkg installer and follow the instructions To start the MySQL server, launch System Preferences Uninstall MySql on a Mac OS X http://community.jaspersoft.com/wiki/uninstall-mysql-mac-os-x To completely uninstall MySql OS X it is neccessary to remove numerous files. Symptom: You unable to install an older version of MySql even though you thought you have removed everything. Resolution: To uninstall MySQL and completely remove it (including all databases) from your Mac do the following: Open a terminal window Use mysqldump to backup your databases to text files! Stop the database server (e.g. System Preferences) sudo rm /usr/local/mysql sudo rm -rf /usr/local/mysql* sudo rm -rf /Library/StartupItems/MySQLCOM sudo rm -rf /Library/PreferencePanes/My* edit /etc/hostconfig and remove the line MYSQLCOM=-YES- rm -rf ~/Library/PreferencePanes/My* sudo rm -rf /Library/Receipts/mysql* sudo rm -rf /Library/Receipts/MySQL* sudo rm -rf /private/var/db/receipts/*mysql* The last three lines are particularly important as otherwise, you can't install an older version of MySQL even though you think that you've completely deleted the newer version!","title":"Admin"},{"location":"macos/admin/#admin","text":"","title":"Admin"},{"location":"macos/admin/#boot-modes","text":"","title":"Boot modes"},{"location":"macos/admin/#wd-mycloud-nas","text":"Finder > Connect to server (cmd + k) smb://wdmycloud","title":"WD MyCloud NAS:"},{"location":"macos/admin/#disk-utility-old","text":"Disk Utility has many formats: OS X Extended (Journaled): for casual Mac user OS X Extended (Case-sensitive, Journaled): for using with Mac Servers MS-DOS (FAT): outdated MS file system, can be used for PC/Mac compatibility but with files less than 4Gb ExFAT: more modern MS file system any file size can be used It also has schemes for when you erase a drive: GUID Partition Map (modern Macs and Windows PC) Master Boot Record (old Windows PC) Apple Partition Map (old PowerPC Macs)","title":"Disk Utility (old)"},{"location":"macos/admin/#command-line-settings","text":"Remove the Auto-Hide Dock Delay: $ defaults write com.apple.Dock autohide-delay -float 0 && killall Dock Make Hidden App Icons Translucent in the Dock: $ defaults write com.apple.Dock showhidden -bool YES && killall Dock Stop Full Names from Copying with Email Addresses in OS X Mail: $ defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false Enable Text Selection in Quick Look Windows: (does not work in El Capitan) $ defaults write com.apple.finder QLEnableTextSelection -bool TRUE;killall Finder (El Capitan) Hide sidebar in Preview when opening a file $ cd ~/Library/Containers/com.apple.Preview/Data/Library/Preferences/ $ defaults write com.apple.Preview PVPDFSuppressSidebarOnOpening true Always Show Hidden Files in the Finder: $ defaults write com.apple.finder AppleShowAllFiles -bool YES && killall Finder or $ defaults write com.apple.finder AppleShowAllFiles True; killall Finder $ defaults write com.apple.finder AppleShowAllFiles False; killall Finder (to restore) Hide Desktop Icons Completely: $ defaults write com.apple.finder CreateDesktop -bool false && killall Finder Change the Default Screen Shot Image Type: $ defaults write com.apple.screencapture type jpg && killall SystemUIServer Set Plain Text As The Default Format In TextEdit $ defaults write com.apple.TextEdit RichText -int 0 Prevent Textedit from saving by default to iCloud $ defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false Override the auto-detection performed by setting `force.LANG' defaults setting if you use a non-standard setup (e.g. different language than formats) $ defaults write org.R-project.R force.LANG en_US.UTF-8 Show only open apps in dock $ defaults write com.apple.dock static-only -bool TRUE; killall Dock $ defaults write com.apple.dock static-only -bool FALSE; killall Dock # restore to original state Stop Adobe Creative Cloud app form auto-launching on login (loaded by default on /Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist ) $ launchctl unload -w /Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist to set it back again: $ launchctl load -w /Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist Set, disable, and check sleep status $ sudo systemsetup -setcomputersleep 60 $ sudo systemsetup -setcomputersleep Never $ sudo systemsetup -getcomputersleep Computer Sleep: Never","title":"Command line settings"},{"location":"macos/admin/#mysql-on-macos","text":"Install MySQL on a Mac OX X Get the appropriate DMG file from: http://dev.mysql.com/downloads/mysql/ If you need MySQL for PQLX make sure that you get a Development Release if not Generally Available (GA) Releases are ok Click on the pkg installer and follow the instructions To start the MySQL server, launch System Preferences Uninstall MySql on a Mac OS X http://community.jaspersoft.com/wiki/uninstall-mysql-mac-os-x To completely uninstall MySql OS X it is neccessary to remove numerous files. Symptom: You unable to install an older version of MySql even though you thought you have removed everything. Resolution: To uninstall MySQL and completely remove it (including all databases) from your Mac do the following: Open a terminal window Use mysqldump to backup your databases to text files! Stop the database server (e.g. System Preferences) sudo rm /usr/local/mysql sudo rm -rf /usr/local/mysql* sudo rm -rf /Library/StartupItems/MySQLCOM sudo rm -rf /Library/PreferencePanes/My* edit /etc/hostconfig and remove the line MYSQLCOM=-YES- rm -rf ~/Library/PreferencePanes/My* sudo rm -rf /Library/Receipts/mysql* sudo rm -rf /Library/Receipts/MySQL* sudo rm -rf /private/var/db/receipts/*mysql* The last three lines are particularly important as otherwise, you can't install an older version of MySQL even though you think that you've completely deleted the newer version!","title":"MySQL on macOS"},{"location":"macos/installation/","text":"Installation macOS Catalina (January 2020) Updates Change preferences Dock > Position on screen: Left Dock > Minimize windows into application icon Mouse > Secondary click (Click on right side) Siri > Do not show in menu bar Language & Region > Advanced: change decimal character to \".\" Finder > Preferences > Advanced > Show all filename extensions Finder > Preferences > Advanced > Do not show warning changing extensions Finder > Preferences > Advanced > Keep folders on top when sorting by name Finder > Preferences > Show Hard disks (add HDD to sidebar and hide Hard disks again) Finder > Preferences > Do not show CDs, DVDs, and iPods Finder > Preferences > New Finder window show: Desktop Finder > Preferences > Sidebar: remove not used Safari > View > Show Favorites Bar Safari > Preferences > New windows open with: Top Sites (populate top sites) Safari > Preferences > Top Sites show: 6 sites Safari > Preferences > File download location: Desktop Safari > Preferences > uncheck \"Open safe files after downloading\" TextEdit > Format > Make Plain Text Remove from Dock unwanted applications Remove Floating Thumbnail from Screen Shot: Cmd + Shift + 5 > Options > Show Floating Thumbnail (uncheck) Change shell to bash: $ chsh -s /bin/bash $ export BASH_SILENCE_DEPRECATION_WARNING=1 Setup Mail Install Xcode from App Store Launch Xcode and install components Launch Terminal and type: $ xcode-select --install # agree to license $ gcc --version From App Store Applications in iMac Pro [ Remove Garage Band and iMovie ] Adobe Reader Anaconda Autofirma DjView Dropbox Google Chrome Google Earth Pro iTerm2 Keynote, Numbers, Pages Macports Mendeley Microsoft Excel, PowerPoint, Word OneDrive Papers Paraview Spotify The Unarchiver VirtualBox Xcode Additional Applications in MacBook Air Brave Browser jAmaSeis Julia (alternative installation?) Mathpix Pocket qBitorrent QGIS3 Scratch Desktop Simple Comic VLC Devel apps: Docker VirtualBox Vagrant GRASS QGIS Other software XQuartz GCC compilers Macports gv gmt5 coreutils (check that includes gawk) a2ps ImageMagick GraphicsMagick feh wget inetutils (ftp, telnet) openssh ffmepg parallel [+ libgfortran3 ] [+ openmpi ] Seismology SAC SEISAN CPS rdseed mstools ObsPy / pyrocko Install XQuartz https://www.xquartz.org [Restart] Install Applications iterm2 https://www.iterm2.com Preferences > Profiles > Colors (fff8f0 background, black foreground) Preferences > Profiles > Window: 132 x 60 Dropbox https://www.dropbox.com/install [ DropboxInstaller.dmg ] Office 365 [ remove unused apps: OneNote, ... ] QGIS Firefox Google Earth Pro VLC [ Microsoft_Office_16.33.20011301_Installer.pkg ] DjView [ DjVuLibre-3.5.27+DjView-4.10.6-qt57c-intel64.dmg ] Spotify [ SpotifyInstaller.zip ] VirtualBox Vagrant Docker Desktop [ Docker.dmg ] Papers papers_3423_587.dmg + P3-ADUN-IWEF-EFUS-UPIN Mendeley Desktop [ install plugin for Word ] MacTeX TeXstudio Mathpix Snipping Tool Brave https://brave.com qBittorrent jAmaSeis Simple Comic Scratch Desktop GMT If GMT installation with MacPorts fails, GMT can also be installed as an app with a dmg file To run GMT from the command line (not using the app): Add the following environmental variables: export GMTHOME=/Applications/GMT-6.0.0.app/Contents/Resources export PROJ_LIB=$GMTHOME/share/proj6 export MAGICK_CONFIGURE_PATH=$GMTHOME/lib/GraphicsMagick-1.3.33/config Add ${GMTHOME}/bin to $PATH C/C++ and Fortran http://hpc.sourceforge.net $ sudo tar xvzf gcc-X.X-bin.tar.gz -C /. For the compiler to find the system headers on Catalina, you may have to specify an additional include path: -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include Java Install Java SE (standard Edition) JDK: https://www.oracle.com/java/technologies/javase-downloads.html jdk-14.0.2_osx-x64_bin.dmg Git https://www.git-scm.com Download pkg from https://git-scm.com and install $ git config --global user.name \"Antonio Villasenor\" $ git config --global user.email \"antonio.villasenor@csic.es\" $ git config --global color.ui true $ ssh-keygen -b 4096 -t rsa [default location, no passphrase] $ cat ~/.ssh/id_rsa.pub | pbcopy [ copy key to clipboard ] git completion/prompt source ~/.git-completion.bash # colors! red=\"\\[\\033[0;31m\\]\" green=\"\\[\\033[0;32m\\]\" blue=\"\\[\\033[0;34m\\]\" purple=\"\\[\\033[0;35m\\]\" cyan=\"\\[\\033[0;36m\\]\" reset=\"\\[\\033[0m\\]\" source ~/.git-prompt.sh export GIT_PS1_SHOWDIRTYSTATE=1 export PS1=\"$cyan\\u@pcanto$green\\$(__git_ps1)$blue \\W $ $reset\" Login to Bitbucket and add key $ cd $ mkdir devel $ cd devel $ git clone git@bitbucket.org:avillasenorh/let.git $ git clone git@bitbucket.org:avillasenorh/psim-tools.git $ git clone git@bitbucket.org:avillasenorh/noise-processing.git $ git clone git@bitbucket.org:avillasenorh/gtomo.git Login to GitHub and add key [create .gitignore] $ git config --global core.excludesfile ~/.gitignore $ ssh-keygen [ -b 4096 -t rsa ] $ eval \"$(ssh-agent -s)\" $ ssh-add ~/.ssh/id_rsa $ cat ~/.ssh/id_rsa.pub | pbcopy Login to BitBucket (https://bitbucket.org/account/signin/) Preferences > BitBucket settings > SSH keys > Add Key Description: Mac Paste Key: cmd + V $ cd $ mkdir devel $ cd devel $ git clone git@bitbucket.org:avillasenorh/noise-processing.git $ git clone git@bitbucket.org:avillasenorh/psim-tools.git $ git clone git@bitbucket.org:avillasenorh/let.git $ git clone git@bitbucket.org:avillasenorh/gtomo.git Python Install Anaconda distribution Obspy $ conda create -n obspy python=3.7 anaconda [ apparently \"basemap\" does not work in 3.8 ] $ conda activate obspy $ conda install basemap $ conda install -c conda-forge obspy [ $ conda install -c conda-forge cartopy ] TensorFlow 2 $ conda create -n tf anaconda [ defaults to 3.7 ] $ conda activate tf $ pip -V [ warning: TensorFlow 2 packages require pip version > 19.0 ] $ pip install tensorflow $ pip install keras If you later want to install ObsPy for DL picker: $ conda list hdf5 [ installed ] $ conda list h5py [ installed ] $ conda list graphviz [ not installed ] $ conda install graphviz $ conda list pydot [ not installed ] $ conda install pydot $ conda install -c conda-forge obspy Intel distribution for Python (IDP) Do not do \"conda config --add channels intel\" because this will cause all your Continuum packages to be replaced with Intel builds, if available. Rather specify \"-c intel --no-update-deps\" [last option deprecated?] $ conda create -n idp intelpython3_full python=3 -c intel INSTALLED PACKAGE OF SCIKIT-LEARN CAN BE ACCELERATED USING DAAL4PY. PLEASE SET 'USE_DAAL4PY_SKLEARN' ENVIRONMENT VARIABLE TO 'YES' TO ENABLE THE ACCELERATION. FOR EXAMPLE: $ USE_DAAL4PY_SKLEARN=YES Julia Version installed: Long-term support (LTS) release: v1.0.5 (Sep 9, 2019) Download dmg file from https://julialang.org/downloads/ and install (drag to /Applications) Make a symbolic link: $ ln -s /Applications/Julia-<version>.app/Contents/Resources/julia/bin/julia /usr/local/bin/julia Or install Julia Pro (comes with Juno IDE) JuliaPro-1.0.5-2_build-54.pkg $ sudo ln -s /Applications/JuliaPro-1.0.5-2.app/Contents/Resources/julia/Contents/Resources/julia/bin/julia \\ /usr/local/bin/julia Python and Obspy $ conda create -n obspy python=3.7 $ conda activate obspy (obspy)$ conda install -c conda-forge obspy (obspy)$ conda list basemap # not installed if conda-forge not added to default channels (obspy)$ conda install basemap (obspy)$ conda update -c conda-forge obspy $ conda create -n mlcourse python=3.7 anaconda $ conda activate mlcourse P _ Create .Prc in home directory: P=/usr/local/P TOMO=/data/models/GTOMO cd $P/data/P.coldef33d axnu 0 1 set shell set dpi 300 ns 1 1 nd 1 1 Copy P directory to /usr/local Add $P/usrc and $P/Pexec to path in .bashrc export P=/usr/local/P PROGSPATH=${P}/usrc:${P}/Pexec CPS $ tar xvzf NP330.Jun-22-2018.tgz $ ./Setup OSX40 $ ./C > compile.log 2>&1 & $ tail -f compile.log SEISAN $ cd / $ sudo mkdir seismo $ sudo chown antonio:staff seismo $ cd seismo $ tar xvzf ..../seisan_macosx_v11.0.tar.gz $ cd COM [edit SEISAN.bash] export SEISARCH=\"macosx\" export SEISAN_TOP=\"/seismo\" fix bad syntax in python aliases [edit .bashrc] export SEISAN=/seismo add source $SEISAN/COM/SEISAN.bash add ${SEISAN_TOP}/PRO to $PATH Compiled version requires libgfortran.3.dylib (current version is libgfortran.3.dylib) $ cd /usr/local/lib $ sudo ln -s /Users/antonio/anaconda3/pkgs/libgfortran-3.0.1-h93005f0_2/lib/libgfortran.3.dylib mstools src/mstools $ mkdir -p ~/bin $ mkdir -p ~/man/man1 $ ./compile_all.sh > compile.log 2>&1 check that the programs work how to access the man pages","title":"Installation"},{"location":"macos/installation/#installation","text":"macOS Catalina (January 2020) Updates Change preferences Dock > Position on screen: Left Dock > Minimize windows into application icon Mouse > Secondary click (Click on right side) Siri > Do not show in menu bar Language & Region > Advanced: change decimal character to \".\" Finder > Preferences > Advanced > Show all filename extensions Finder > Preferences > Advanced > Do not show warning changing extensions Finder > Preferences > Advanced > Keep folders on top when sorting by name Finder > Preferences > Show Hard disks (add HDD to sidebar and hide Hard disks again) Finder > Preferences > Do not show CDs, DVDs, and iPods Finder > Preferences > New Finder window show: Desktop Finder > Preferences > Sidebar: remove not used Safari > View > Show Favorites Bar Safari > Preferences > New windows open with: Top Sites (populate top sites) Safari > Preferences > Top Sites show: 6 sites Safari > Preferences > File download location: Desktop Safari > Preferences > uncheck \"Open safe files after downloading\" TextEdit > Format > Make Plain Text Remove from Dock unwanted applications Remove Floating Thumbnail from Screen Shot: Cmd + Shift + 5 > Options > Show Floating Thumbnail (uncheck) Change shell to bash: $ chsh -s /bin/bash $ export BASH_SILENCE_DEPRECATION_WARNING=1 Setup Mail","title":"Installation"},{"location":"macos/installation/#install-xcode-from-app-store","text":"Launch Xcode and install components Launch Terminal and type: $ xcode-select --install # agree to license $ gcc --version","title":"Install Xcode from App Store"},{"location":"macos/installation/#from-app-store","text":"Applications in iMac Pro [ Remove Garage Band and iMovie ] Adobe Reader Anaconda Autofirma DjView Dropbox Google Chrome Google Earth Pro iTerm2 Keynote, Numbers, Pages Macports Mendeley Microsoft Excel, PowerPoint, Word OneDrive Papers Paraview Spotify The Unarchiver VirtualBox Xcode Additional Applications in MacBook Air Brave Browser jAmaSeis Julia (alternative installation?) Mathpix Pocket qBitorrent QGIS3 Scratch Desktop Simple Comic VLC Devel apps: Docker VirtualBox Vagrant GRASS QGIS Other software XQuartz GCC compilers Macports gv gmt5 coreutils (check that includes gawk) a2ps ImageMagick GraphicsMagick feh wget inetutils (ftp, telnet) openssh ffmepg parallel [+ libgfortran3 ] [+ openmpi ] Seismology SAC SEISAN CPS rdseed mstools ObsPy / pyrocko","title":"From App Store"},{"location":"macos/installation/#install-xquartz","text":"https://www.xquartz.org [Restart]","title":"Install XQuartz"},{"location":"macos/installation/#install-applications","text":"iterm2 https://www.iterm2.com Preferences > Profiles > Colors (fff8f0 background, black foreground) Preferences > Profiles > Window: 132 x 60 Dropbox https://www.dropbox.com/install [ DropboxInstaller.dmg ] Office 365 [ remove unused apps: OneNote, ... ] QGIS Firefox Google Earth Pro VLC [ Microsoft_Office_16.33.20011301_Installer.pkg ] DjView [ DjVuLibre-3.5.27+DjView-4.10.6-qt57c-intel64.dmg ] Spotify [ SpotifyInstaller.zip ] VirtualBox Vagrant Docker Desktop [ Docker.dmg ] Papers papers_3423_587.dmg + P3-ADUN-IWEF-EFUS-UPIN Mendeley Desktop [ install plugin for Word ] MacTeX TeXstudio Mathpix Snipping Tool Brave https://brave.com qBittorrent jAmaSeis Simple Comic Scratch Desktop","title":"Install Applications"},{"location":"macos/installation/#gmt","text":"If GMT installation with MacPorts fails, GMT can also be installed as an app with a dmg file To run GMT from the command line (not using the app): Add the following environmental variables: export GMTHOME=/Applications/GMT-6.0.0.app/Contents/Resources export PROJ_LIB=$GMTHOME/share/proj6 export MAGICK_CONFIGURE_PATH=$GMTHOME/lib/GraphicsMagick-1.3.33/config Add ${GMTHOME}/bin to $PATH","title":"GMT"},{"location":"macos/installation/#cc-and-fortran","text":"http://hpc.sourceforge.net $ sudo tar xvzf gcc-X.X-bin.tar.gz -C /. For the compiler to find the system headers on Catalina, you may have to specify an additional include path: -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include","title":"C/C++ and Fortran"},{"location":"macos/installation/#java","text":"Install Java SE (standard Edition) JDK: https://www.oracle.com/java/technologies/javase-downloads.html jdk-14.0.2_osx-x64_bin.dmg","title":"Java"},{"location":"macos/installation/#git","text":"https://www.git-scm.com Download pkg from https://git-scm.com and install $ git config --global user.name \"Antonio Villasenor\" $ git config --global user.email \"antonio.villasenor@csic.es\" $ git config --global color.ui true $ ssh-keygen -b 4096 -t rsa [default location, no passphrase] $ cat ~/.ssh/id_rsa.pub | pbcopy [ copy key to clipboard ] git completion/prompt source ~/.git-completion.bash # colors! red=\"\\[\\033[0;31m\\]\" green=\"\\[\\033[0;32m\\]\" blue=\"\\[\\033[0;34m\\]\" purple=\"\\[\\033[0;35m\\]\" cyan=\"\\[\\033[0;36m\\]\" reset=\"\\[\\033[0m\\]\" source ~/.git-prompt.sh export GIT_PS1_SHOWDIRTYSTATE=1 export PS1=\"$cyan\\u@pcanto$green\\$(__git_ps1)$blue \\W $ $reset\" Login to Bitbucket and add key $ cd $ mkdir devel $ cd devel $ git clone git@bitbucket.org:avillasenorh/let.git $ git clone git@bitbucket.org:avillasenorh/psim-tools.git $ git clone git@bitbucket.org:avillasenorh/noise-processing.git $ git clone git@bitbucket.org:avillasenorh/gtomo.git Login to GitHub and add key [create .gitignore] $ git config --global core.excludesfile ~/.gitignore $ ssh-keygen [ -b 4096 -t rsa ] $ eval \"$(ssh-agent -s)\" $ ssh-add ~/.ssh/id_rsa $ cat ~/.ssh/id_rsa.pub | pbcopy Login to BitBucket (https://bitbucket.org/account/signin/) Preferences > BitBucket settings > SSH keys > Add Key Description: Mac Paste Key: cmd + V $ cd $ mkdir devel $ cd devel $ git clone git@bitbucket.org:avillasenorh/noise-processing.git $ git clone git@bitbucket.org:avillasenorh/psim-tools.git $ git clone git@bitbucket.org:avillasenorh/let.git $ git clone git@bitbucket.org:avillasenorh/gtomo.git","title":"Git"},{"location":"macos/installation/#python","text":"Install Anaconda distribution Obspy $ conda create -n obspy python=3.7 anaconda [ apparently \"basemap\" does not work in 3.8 ] $ conda activate obspy $ conda install basemap $ conda install -c conda-forge obspy [ $ conda install -c conda-forge cartopy ] TensorFlow 2 $ conda create -n tf anaconda [ defaults to 3.7 ] $ conda activate tf $ pip -V [ warning: TensorFlow 2 packages require pip version > 19.0 ] $ pip install tensorflow $ pip install keras If you later want to install ObsPy for DL picker: $ conda list hdf5 [ installed ] $ conda list h5py [ installed ] $ conda list graphviz [ not installed ] $ conda install graphviz $ conda list pydot [ not installed ] $ conda install pydot $ conda install -c conda-forge obspy Intel distribution for Python (IDP) Do not do \"conda config --add channels intel\" because this will cause all your Continuum packages to be replaced with Intel builds, if available. Rather specify \"-c intel --no-update-deps\" [last option deprecated?] $ conda create -n idp intelpython3_full python=3 -c intel INSTALLED PACKAGE OF SCIKIT-LEARN CAN BE ACCELERATED USING DAAL4PY. PLEASE SET 'USE_DAAL4PY_SKLEARN' ENVIRONMENT VARIABLE TO 'YES' TO ENABLE THE ACCELERATION. FOR EXAMPLE: $ USE_DAAL4PY_SKLEARN=YES","title":"Python"},{"location":"macos/installation/#julia","text":"Version installed: Long-term support (LTS) release: v1.0.5 (Sep 9, 2019) Download dmg file from https://julialang.org/downloads/ and install (drag to /Applications) Make a symbolic link: $ ln -s /Applications/Julia-<version>.app/Contents/Resources/julia/bin/julia /usr/local/bin/julia Or install Julia Pro (comes with Juno IDE) JuliaPro-1.0.5-2_build-54.pkg $ sudo ln -s /Applications/JuliaPro-1.0.5-2.app/Contents/Resources/julia/Contents/Resources/julia/bin/julia \\ /usr/local/bin/julia","title":"Julia"},{"location":"macos/installation/#python-and-obspy","text":"$ conda create -n obspy python=3.7 $ conda activate obspy (obspy)$ conda install -c conda-forge obspy (obspy)$ conda list basemap # not installed if conda-forge not added to default channels (obspy)$ conda install basemap (obspy)$ conda update -c conda-forge obspy $ conda create -n mlcourse python=3.7 anaconda $ conda activate mlcourse","title":"Python and Obspy"},{"location":"macos/installation/#p","text":"_ Create .Prc in home directory: P=/usr/local/P TOMO=/data/models/GTOMO cd $P/data/P.coldef33d axnu 0 1 set shell set dpi 300 ns 1 1 nd 1 1 Copy P directory to /usr/local Add $P/usrc and $P/Pexec to path in .bashrc export P=/usr/local/P PROGSPATH=${P}/usrc:${P}/Pexec","title":"P"},{"location":"macos/installation/#cps","text":"$ tar xvzf NP330.Jun-22-2018.tgz $ ./Setup OSX40 $ ./C > compile.log 2>&1 & $ tail -f compile.log","title":"CPS"},{"location":"macos/installation/#seisan","text":"$ cd / $ sudo mkdir seismo $ sudo chown antonio:staff seismo $ cd seismo $ tar xvzf ..../seisan_macosx_v11.0.tar.gz $ cd COM [edit SEISAN.bash] export SEISARCH=\"macosx\" export SEISAN_TOP=\"/seismo\" fix bad syntax in python aliases [edit .bashrc] export SEISAN=/seismo add source $SEISAN/COM/SEISAN.bash add ${SEISAN_TOP}/PRO to $PATH Compiled version requires libgfortran.3.dylib (current version is libgfortran.3.dylib) $ cd /usr/local/lib $ sudo ln -s /Users/antonio/anaconda3/pkgs/libgfortran-3.0.1-h93005f0_2/lib/libgfortran.3.dylib","title":"SEISAN"},{"location":"macos/installation/#mstools","text":"src/mstools $ mkdir -p ~/bin $ mkdir -p ~/man/man1 $ ./compile_all.sh > compile.log 2>&1 check that the programs work how to access the man pages","title":"mstools"},{"location":"macos/macports/","text":"MacPorts https://www.macports.org $ sudo port [-v] selfupdate # -v for verbose $ sudo port upgrade outdated # this can take a long time $ sudo port rev-upgrade # if something goes wrong Other macports commands: $ port version $ port installed $ port search --name --glob \"gmt*\" $ port search --name --line --glob \"gmt*\" # produces better output $ port info gmt5 System tools wget curl htop tree exa : a modern replacement for ls bat : a cat clone written in Rust openssh coreutils inetutils : ftp, telnet tmux a more modern bash : currently 5.1.16 (versus 3.2 system bash ) $ sudo port install openssh +ssh-copy-id Development Some of the tools install (multiple versions of) programming languages, such as C/C++ , Python , Perl , Rust , etc. Normally those installations are only used by MacPorts to build some of its applications and packages. However they can also be used for development. For example, to make the MacPort 's Python the default Python: python39 has the following notes: To make this the default Python or Python 3 (i.e., the version run by the 'python' or 'python3' commands), run one or both of: sudo port select --set python python39 sudo port select --set python3 python39 In addition to those languages, the following development tools can also be installed: cmake gsl : GNU Scientific Library [ graphviz ]: graph visualization software [ gnuplot ]: command-line graphing utility gh : GitHub command-line tools pipx openmpi openmpi-default has the following notes: The mpicc wrapper (and friends) are installed as: /opt/local/bin/mpicc-openmpi-mp (likewise mpicxx, ...) To make openmpi-default's wrappers the default (what you get when you execute 'mpicc' etc.) please run: sudo port select --set mpi openmpi-mp-fortran Some packages install versions of Python. To make those versions the default Python/Python3: Utilities a2ps gv ffmpeg graphicsmagick [ feh not installed in Monterrey; gives error] latexdiff sudo port install ffmpeg +libgfortran3 +openmpi Packages gmt6 $ sudo port install gdal +hdf5 +netcdf +openjpeg $ sudo port install gmt6 +fftw3","title":"MacPorts"},{"location":"macos/macports/#macports","text":"https://www.macports.org $ sudo port [-v] selfupdate # -v for verbose $ sudo port upgrade outdated # this can take a long time $ sudo port rev-upgrade # if something goes wrong Other macports commands: $ port version $ port installed $ port search --name --glob \"gmt*\" $ port search --name --line --glob \"gmt*\" # produces better output $ port info gmt5","title":"MacPorts"},{"location":"macos/macports/#system-tools","text":"wget curl htop tree exa : a modern replacement for ls bat : a cat clone written in Rust openssh coreutils inetutils : ftp, telnet tmux a more modern bash : currently 5.1.16 (versus 3.2 system bash ) $ sudo port install openssh +ssh-copy-id","title":"System tools"},{"location":"macos/macports/#development","text":"Some of the tools install (multiple versions of) programming languages, such as C/C++ , Python , Perl , Rust , etc. Normally those installations are only used by MacPorts to build some of its applications and packages. However they can also be used for development. For example, to make the MacPort 's Python the default Python: python39 has the following notes: To make this the default Python or Python 3 (i.e., the version run by the 'python' or 'python3' commands), run one or both of: sudo port select --set python python39 sudo port select --set python3 python39 In addition to those languages, the following development tools can also be installed: cmake gsl : GNU Scientific Library [ graphviz ]: graph visualization software [ gnuplot ]: command-line graphing utility gh : GitHub command-line tools pipx openmpi openmpi-default has the following notes: The mpicc wrapper (and friends) are installed as: /opt/local/bin/mpicc-openmpi-mp (likewise mpicxx, ...) To make openmpi-default's wrappers the default (what you get when you execute 'mpicc' etc.) please run: sudo port select --set mpi openmpi-mp-fortran Some packages install versions of Python. To make those versions the default Python/Python3:","title":"Development"},{"location":"macos/macports/#utilities","text":"a2ps gv ffmpeg graphicsmagick [ feh not installed in Monterrey; gives error] latexdiff sudo port install ffmpeg +libgfortran3 +openmpi","title":"Utilities"},{"location":"macos/macports/#packages","text":"gmt6 $ sudo port install gdal +hdf5 +netcdf +openjpeg $ sudo port install gmt6 +fftw3","title":"Packages"},{"location":"macos/monterrey/","text":"Fresh macOS Monterrey installation 1. Go to App Store to get installer Once the download has completed it will ask you to install the update. Do not press continue, instead quit the program. 2. Format pen drive for installation Open the application Disk Utility Select View > Show all devices . This makes available the GUID partition option. Select the first option for disk format. WARNING : do not use APFS (some tutorials are wrong). Call the new partition on the pen drive Untitled . Later it will be latter renamed to \"Install macOS Monterrey\". 3. Make the pen drive bootable Enter the following command: $ sudo /Applications/Install\\ macOS\\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/Untitled Ready to start. To continue we need to erase the volume at /Volumes/Untitled. If you wish to continue type (Y) then press return: Y Erasing disk: 0%... 10%... 20%... 30%... 100% Making disk bootable... Copying to disk: 0%... 10%... 20%... 30%... 40%... 50%... 60%... 70%... 80%... 90%... 100% Install media now available at \"/Volumes/Install macOS Monterey\" 4. Allow booting from an external disk Reboot the computer in recovery mode by pressing cmd + R . This might ask you to enter the password a couple of times. Go to Utilities > Startup security utility and select Allow booting from external of removable media . Insert the pen drive in the computer and reboot again to Startup Manager by pressing the opt key, and select the Install macOS Monterrey drive. For a fresh installation you need to go first to Disk Utility and erase the disk. If not it simply upgrades the operating system. After erasing the disk select Install macOS Monterrey ( WARNING : and additional update might be required in order to use the bootable external disk). Once the installation process has started, accept the terms and select Install in Macintosh HD . 5. Install development tools bash Because of license issues, in the latest versions of macOS the default shell is zsh instead of bash . To change the default shell to bash and silence the deprecation warning open a terminal and type: $ chsh -s /bin/bash $ export BASH_SILENCE_DEPRECATION_WARNING=1 Initially (before creating/modifying the .bash_profile and .bashrc files) the $PATH environmental variable is set to: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin Because of those license issues, the version of bash provided in /bin/bash is very old (3.2, from 2007!) $ echo $BASH_VERSION 3.2.57(1)-release $ /bin/bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin21) Copyright (C) 2007 Free Software Foundation, Inc. Once you install Macports and a few packages, a newer version of bash will be available in /opt/local/bin/bash : $ /opt/local/bin/bash --version GNU bash, version 5.1.16(1)-release (x86_64-apple-darwin21.1.0) Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software; you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. To make this bash the default, add /opt/local/bin/bash to the /etc/shells file: $ sudo vi /etc/shells $ cat /etc/shells # List of acceptable shells for chpass(1). # Ftpd will not allow users to connect who are not using # one of these shells. /bin/bash /opt/local/bin/bash /bin/csh /bin/dash /bin/ksh /bin/sh /bin/tcsh /bin/zsh and then: $ chsh -s /opt/local/bin/bash To use this shell in shell scripts, replace the common shebang #!/bin/bash for: #!/usr/bin/env bash XCode Go to App Store and install XCode . Once it is installed, open it and it will install the Command line tools . If the tools are not installed automatically it can be done from the command line: $ xcode-select --install # agree to license $ gcc --version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/4.2.1 Apple clang version 13.0.0 (clang-1300.0.29.30) Target: x86_64-apple-darwin21.3.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin After the installation of XCode , the $PATH variable is expanded to: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin XQuartz Then install XQuartz for X Window support. After the installation of XQuartz the $PATH variable is expanded to: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin GCC C and Fortran compilers Install gcc and gfortran compilers from the HPC Mac OS X web page. Download the appropriate .tar.gz file (as of January 2022, the version for Monterrey was gcc-11.2-bin.tar.gz ). To install it, simply type: $ sudo tar xvf gcc-11.2-bin.tar -C /. $ gcc --version gcc (GCC) 11.2.0 Copyright (C) 2021 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. $ gfortran --version GNU Fortran (GCC) 11.2.0 Copyright (C) 2021 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Setup dotfiles At this point it is convenient to setup the .bash_profile and .bashrc files. Initially .bash_profile contains simply: # if [ -f ~/.bashrc ]; then . ~/.bashrc fi Important : unlike in Linux, in macOS all the new terminals are login terminals, so they all run .bash_profile . Macports Now we can install the Macports package manager. Download the corresponding pkg file and run the installation. This adds the following lines to the .bash_profile file: # MacPorts Installer addition on 2021-12-22_at_17:39:58: adding an appropriate PATH variable for use with MacPorts. export PATH=\"/opt/local/bin:/opt/local/sbin:$PATH\" # Finished adapting your PATH environment variable for use with MacPorts. These lines could be removed and added to the $PATH declaration in .bashrc . Python See specific section. Installing the PSF Python adds the following lines to .bash_profile : # Setting PATH for Python 3.10 # The original version is saved in .bash_profile.pysave PATH=\"/Library/Frameworks/Python.framework/Versions/3.10/bin:${PATH}\" export PATH The resulting $PATH looks like: /Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin Installing the Anaconda Python distribution adds the following lines to .bash_profile # >>> conda initialize >>> # !! Contents within this block are managed by 'conda init' !! __conda_setup=\"$('/Users/antonio/opt/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\" if [ $? -eq 0 ]; then eval \"$__conda_setup\" else if [ -f \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\" ]; then . \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\" else export PATH=\"/Users/antonio/opt/anaconda3/bin:$PATH\" fi fi unset __conda_setup # <<< conda initialize <<< And sets the $PATH variable to: /Users/antonio/opt/anaconda3/bin:/Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin However, this initializes the conda base environment for each new shell opened. To prevent this: $ conda config --set auto_activate_base false This creates a file .condarc with the following content: auto_activate_base: false Now when opening a new shell the conda base environment is not activated, and the $PATH variable is set to: /Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin This means that the PSF Python takes preference over the Anaconda Python. To change this, simply activate a conda environment: $ conda activate # activates the base environment $ conda activate seismo # activates the \"seismo\" environment","title":"Monterrey installation"},{"location":"macos/monterrey/#fresh-macos-monterrey-installation","text":"","title":"Fresh macOS Monterrey installation"},{"location":"macos/monterrey/#1-go-to-app-store-to-get-installer","text":"Once the download has completed it will ask you to install the update. Do not press continue, instead quit the program.","title":"1. Go to App Store to get installer"},{"location":"macos/monterrey/#2-format-pen-drive-for-installation","text":"Open the application Disk Utility Select View > Show all devices . This makes available the GUID partition option. Select the first option for disk format. WARNING : do not use APFS (some tutorials are wrong). Call the new partition on the pen drive Untitled . Later it will be latter renamed to \"Install macOS Monterrey\".","title":"2. Format pen drive for installation"},{"location":"macos/monterrey/#3-make-the-pen-drive-bootable","text":"Enter the following command: $ sudo /Applications/Install\\ macOS\\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/Untitled Ready to start. To continue we need to erase the volume at /Volumes/Untitled. If you wish to continue type (Y) then press return: Y Erasing disk: 0%... 10%... 20%... 30%... 100% Making disk bootable... Copying to disk: 0%... 10%... 20%... 30%... 40%... 50%... 60%... 70%... 80%... 90%... 100% Install media now available at \"/Volumes/Install macOS Monterey\"","title":"3. Make the pen drive bootable"},{"location":"macos/monterrey/#4-allow-booting-from-an-external-disk","text":"Reboot the computer in recovery mode by pressing cmd + R . This might ask you to enter the password a couple of times. Go to Utilities > Startup security utility and select Allow booting from external of removable media . Insert the pen drive in the computer and reboot again to Startup Manager by pressing the opt key, and select the Install macOS Monterrey drive. For a fresh installation you need to go first to Disk Utility and erase the disk. If not it simply upgrades the operating system. After erasing the disk select Install macOS Monterrey ( WARNING : and additional update might be required in order to use the bootable external disk). Once the installation process has started, accept the terms and select Install in Macintosh HD .","title":"4. Allow booting from an external disk"},{"location":"macos/monterrey/#5-install-development-tools","text":"","title":"5. Install development tools"},{"location":"macos/monterrey/#bash","text":"Because of license issues, in the latest versions of macOS the default shell is zsh instead of bash . To change the default shell to bash and silence the deprecation warning open a terminal and type: $ chsh -s /bin/bash $ export BASH_SILENCE_DEPRECATION_WARNING=1 Initially (before creating/modifying the .bash_profile and .bashrc files) the $PATH environmental variable is set to: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin Because of those license issues, the version of bash provided in /bin/bash is very old (3.2, from 2007!) $ echo $BASH_VERSION 3.2.57(1)-release $ /bin/bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin21) Copyright (C) 2007 Free Software Foundation, Inc. Once you install Macports and a few packages, a newer version of bash will be available in /opt/local/bin/bash : $ /opt/local/bin/bash --version GNU bash, version 5.1.16(1)-release (x86_64-apple-darwin21.1.0) Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software; you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. To make this bash the default, add /opt/local/bin/bash to the /etc/shells file: $ sudo vi /etc/shells $ cat /etc/shells # List of acceptable shells for chpass(1). # Ftpd will not allow users to connect who are not using # one of these shells. /bin/bash /opt/local/bin/bash /bin/csh /bin/dash /bin/ksh /bin/sh /bin/tcsh /bin/zsh and then: $ chsh -s /opt/local/bin/bash To use this shell in shell scripts, replace the common shebang #!/bin/bash for: #!/usr/bin/env bash","title":"bash"},{"location":"macos/monterrey/#xcode","text":"Go to App Store and install XCode . Once it is installed, open it and it will install the Command line tools . If the tools are not installed automatically it can be done from the command line: $ xcode-select --install # agree to license $ gcc --version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/4.2.1 Apple clang version 13.0.0 (clang-1300.0.29.30) Target: x86_64-apple-darwin21.3.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin After the installation of XCode , the $PATH variable is expanded to: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin","title":"XCode"},{"location":"macos/monterrey/#xquartz","text":"Then install XQuartz for X Window support. After the installation of XQuartz the $PATH variable is expanded to: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin","title":"XQuartz"},{"location":"macos/monterrey/#gcc-c-and-fortran-compilers","text":"Install gcc and gfortran compilers from the HPC Mac OS X web page. Download the appropriate .tar.gz file (as of January 2022, the version for Monterrey was gcc-11.2-bin.tar.gz ). To install it, simply type: $ sudo tar xvf gcc-11.2-bin.tar -C /. $ gcc --version gcc (GCC) 11.2.0 Copyright (C) 2021 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. $ gfortran --version GNU Fortran (GCC) 11.2.0 Copyright (C) 2021 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.","title":"GCC C and Fortran compilers"},{"location":"macos/monterrey/#setup-dotfiles","text":"At this point it is convenient to setup the .bash_profile and .bashrc files. Initially .bash_profile contains simply: # if [ -f ~/.bashrc ]; then . ~/.bashrc fi Important : unlike in Linux, in macOS all the new terminals are login terminals, so they all run .bash_profile .","title":"Setup dotfiles"},{"location":"macos/monterrey/#macports","text":"Now we can install the Macports package manager. Download the corresponding pkg file and run the installation. This adds the following lines to the .bash_profile file: # MacPorts Installer addition on 2021-12-22_at_17:39:58: adding an appropriate PATH variable for use with MacPorts. export PATH=\"/opt/local/bin:/opt/local/sbin:$PATH\" # Finished adapting your PATH environment variable for use with MacPorts. These lines could be removed and added to the $PATH declaration in .bashrc .","title":"Macports"},{"location":"macos/monterrey/#python","text":"See specific section. Installing the PSF Python adds the following lines to .bash_profile : # Setting PATH for Python 3.10 # The original version is saved in .bash_profile.pysave PATH=\"/Library/Frameworks/Python.framework/Versions/3.10/bin:${PATH}\" export PATH The resulting $PATH looks like: /Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin Installing the Anaconda Python distribution adds the following lines to .bash_profile # >>> conda initialize >>> # !! Contents within this block are managed by 'conda init' !! __conda_setup=\"$('/Users/antonio/opt/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\" if [ $? -eq 0 ]; then eval \"$__conda_setup\" else if [ -f \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\" ]; then . \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\" else export PATH=\"/Users/antonio/opt/anaconda3/bin:$PATH\" fi fi unset __conda_setup # <<< conda initialize <<< And sets the $PATH variable to: /Users/antonio/opt/anaconda3/bin:/Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin However, this initializes the conda base environment for each new shell opened. To prevent this: $ conda config --set auto_activate_base false This creates a file .condarc with the following content: auto_activate_base: false Now when opening a new shell the conda base environment is not activated, and the $PATH variable is set to: /Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin This means that the PSF Python takes preference over the Anaconda Python. To change this, simply activate a conda environment: $ conda activate # activates the base environment $ conda activate seismo # activates the \"seismo\" environment","title":"Python"},{"location":"macos/python/","text":"Python installation Initially an old system version of Python is installed: $ /usr/bin/python -V Python 2.7.18 $ /usr/bin/python WARNING: Python 2.7 is not recommended. This version is included in macOS for compatibility with legacy software. Future versions of macOS will not include Python 2.7. Instead, it is recommended that you transition to using 'python3' from within Terminal. Python 2.7.18 (default, Jan 4 2022, 17:47:56) [GCC Apple LLVM 13.0.0 (clang-1300.0.29.10) [+internal-os, ptrauth-isa=deployme on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> This is in fact a link to: /usr/bin/python@ -> ../../System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7 As stated in the warning, it is expected that macOS Monterrey Version 12.3 (early 2022) will not include this Python 2.7 distribution. There is no pip command associated with this version of Python. In /usr/bin there is also a newer version of Python: $ /usr/bin/python3 -V Python 3.8.9 $ /usr/bin/python3 Python 3.8.9 (default, Oct 26 2021, 07:25:54) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> There is a pip3 command associated with this version of Python: $ /usr/bin/pip3 -V pip 20.2.3 from /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/site-packages/pip (python 3.8) However none of these versions should be used (only used by operating systems) and do not install packages! Therefore we need to install other distributions of Python. PSF Python In addition to system python (not used) the first Python distribution to install is that of the PSF . For macOS we select a macOS 64-bit universal2 installer ( .dmg file). The installation is simple, but it requires a set of SSL root certificates: When clicking in the Install Certificates icon: $ ./Install\\ Certificates.command -- pip install --upgrade certifi Collecting certifi Downloading certifi-2021.10.8-py2.py3-none-any.whl (149 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 149 kB 4.2 MB/s Installing collected packages: certifi Successfully installed certifi-2021.10.8 WARNING: You are using pip version 21.2.4; however, version 21.3.1 is available. You should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10 -m pip install --upgrade pip' command. -- removing any existing file or link -- creating symlink to certifi certificate bundle -- setting permissions -- update complete The PSF installation adds the following lines to your .bash_profile : # Setting PATH for Python 3.10 # The original version is saved in .bash_profile.pysave PATH=\"/Library/Frameworks/Python.framework/Versions/3.10/bin:${PATH}\" export PATH The resulting $PATH variable looks like: /Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin And now we have: $ command -v python3 /Library/Frameworks/Python.framework/Versions/3.10/bin/python3 $ python3 Python 3.10.1 (v3.10.1:2cd268a3a9, Dec 6 2021, 14:28:59) [Clang 13.0.0 (clang-1300.0.29.3)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> WARNING: the python command still points to the 2.7 version, so we have to use python3 Upgrade pip/pip3 When installing the SSL root certificates we obtained a warning that a newer version of pip is available. To install this new version: $ command -v pip3 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3 $ command -v python3 /Library/Frameworks/Python.framework/Versions/3.10/bin/python3 $ pip3 --version pip 21.2.4 from /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pip (python 3.10) $ ls -l /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3 pip3 pip3.10 $ ls -l /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3 -rwxrwxr-x 1 root admin 270B Dec 22 17:48 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3* $ /Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10 -m pip install --upgrade pip Requirement already satisfied: pip in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (21.2.4) Collecting pip Downloading pip-21.3.1-py3-none-any.whl (1.7 MB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.7 MB 1.8 MB/s Installing collected packages: pip Attempting uninstall: pip Found existing installation: pip 21.2.4 Uninstalling pip-21.2.4: Successfully uninstalled pip-21.2.4 Successfully installed pip-21.3.1 $ ls -l /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3 -rwxr-xr-x 1 antonio admin 270B Dec 22 18:15 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3* $ ls -l /Library/Frameworks/Python.framework/Versions/3.10/bin/pip* -rwxr-xr-x 1 antonio admin 270B Dec 22 18:15 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip* -rwxr-xr-x 1 antonio admin 270B Dec 22 18:15 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3* -rwxr-xr-x 1 antonio admin 270B Dec 22 18:15 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3.10* $ pip3 --version pip 21.3.1 from /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pip (python 3.10) $ pip --version pip 21.3.1 from /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pip (python 3.10) Now we have: $ command -v pip /Library/Frameworks/Python.framework/Versions/3.10/bin/pip $ command -v pip3 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3 Install Anaconda Adds to .bash_profile : # >>> conda initialize >>> # !! Contents within this block are managed by 'conda init' !! __conda_setup=\"$('/Users/antonio/opt/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\" if [ $? -eq 0 ]; then eval \"$__conda_setup\" else if [ -f \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\" ]; then . \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\" else export PATH=\"/Users/antonio/opt/anaconda3/bin:$PATH\" fi fi unset __conda_setup # <<< conda initialize <<< Path now looks like: /Users/antonio/opt/anaconda3/bin:/Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin To prevent the activation of the base environment: $ conda config --set auto_activate_base false This creates a file .condarc with the following content: auto_activate_base: false Now, when opening a new shell $PATH is: /Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin Install packages with pipx $ sudo port install pipx $ pipx install black installed package black 21.12b0, installed using Python 3.9.9 These apps are now globally available - black - black-primer - blackd \u26a0\ufe0f Note: '/Users/antonio/.local/bin' is not on your PATH environment variable. These apps will not be globally accessible until your PATH is updated. Run `pipx ensurepath` to automatically add it, or manually modify your PATH in your shell's config file (i.e. ~/.bashrc). done! \u2728 \ud83c\udf1f \u2728 Modify .bashrc to add /Users/antonio/.local/bin","title":"Python installation"},{"location":"macos/python/#python-installation","text":"Initially an old system version of Python is installed: $ /usr/bin/python -V Python 2.7.18 $ /usr/bin/python WARNING: Python 2.7 is not recommended. This version is included in macOS for compatibility with legacy software. Future versions of macOS will not include Python 2.7. Instead, it is recommended that you transition to using 'python3' from within Terminal. Python 2.7.18 (default, Jan 4 2022, 17:47:56) [GCC Apple LLVM 13.0.0 (clang-1300.0.29.10) [+internal-os, ptrauth-isa=deployme on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> This is in fact a link to: /usr/bin/python@ -> ../../System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7 As stated in the warning, it is expected that macOS Monterrey Version 12.3 (early 2022) will not include this Python 2.7 distribution. There is no pip command associated with this version of Python. In /usr/bin there is also a newer version of Python: $ /usr/bin/python3 -V Python 3.8.9 $ /usr/bin/python3 Python 3.8.9 (default, Oct 26 2021, 07:25:54) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> There is a pip3 command associated with this version of Python: $ /usr/bin/pip3 -V pip 20.2.3 from /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/site-packages/pip (python 3.8) However none of these versions should be used (only used by operating systems) and do not install packages! Therefore we need to install other distributions of Python.","title":"Python installation"},{"location":"macos/python/#psf-python","text":"In addition to system python (not used) the first Python distribution to install is that of the PSF . For macOS we select a macOS 64-bit universal2 installer ( .dmg file). The installation is simple, but it requires a set of SSL root certificates: When clicking in the Install Certificates icon: $ ./Install\\ Certificates.command -- pip install --upgrade certifi Collecting certifi Downloading certifi-2021.10.8-py2.py3-none-any.whl (149 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 149 kB 4.2 MB/s Installing collected packages: certifi Successfully installed certifi-2021.10.8 WARNING: You are using pip version 21.2.4; however, version 21.3.1 is available. You should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10 -m pip install --upgrade pip' command. -- removing any existing file or link -- creating symlink to certifi certificate bundle -- setting permissions -- update complete The PSF installation adds the following lines to your .bash_profile : # Setting PATH for Python 3.10 # The original version is saved in .bash_profile.pysave PATH=\"/Library/Frameworks/Python.framework/Versions/3.10/bin:${PATH}\" export PATH The resulting $PATH variable looks like: /Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin And now we have: $ command -v python3 /Library/Frameworks/Python.framework/Versions/3.10/bin/python3 $ python3 Python 3.10.1 (v3.10.1:2cd268a3a9, Dec 6 2021, 14:28:59) [Clang 13.0.0 (clang-1300.0.29.3)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> WARNING: the python command still points to the 2.7 version, so we have to use python3","title":"PSF Python"},{"location":"macos/python/#upgrade-pippip3","text":"When installing the SSL root certificates we obtained a warning that a newer version of pip is available. To install this new version: $ command -v pip3 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3 $ command -v python3 /Library/Frameworks/Python.framework/Versions/3.10/bin/python3 $ pip3 --version pip 21.2.4 from /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pip (python 3.10) $ ls -l /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3 pip3 pip3.10 $ ls -l /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3 -rwxrwxr-x 1 root admin 270B Dec 22 17:48 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3* $ /Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10 -m pip install --upgrade pip Requirement already satisfied: pip in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (21.2.4) Collecting pip Downloading pip-21.3.1-py3-none-any.whl (1.7 MB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.7 MB 1.8 MB/s Installing collected packages: pip Attempting uninstall: pip Found existing installation: pip 21.2.4 Uninstalling pip-21.2.4: Successfully uninstalled pip-21.2.4 Successfully installed pip-21.3.1 $ ls -l /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3 -rwxr-xr-x 1 antonio admin 270B Dec 22 18:15 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3* $ ls -l /Library/Frameworks/Python.framework/Versions/3.10/bin/pip* -rwxr-xr-x 1 antonio admin 270B Dec 22 18:15 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip* -rwxr-xr-x 1 antonio admin 270B Dec 22 18:15 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3* -rwxr-xr-x 1 antonio admin 270B Dec 22 18:15 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3.10* $ pip3 --version pip 21.3.1 from /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pip (python 3.10) $ pip --version pip 21.3.1 from /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pip (python 3.10) Now we have: $ command -v pip /Library/Frameworks/Python.framework/Versions/3.10/bin/pip $ command -v pip3 /Library/Frameworks/Python.framework/Versions/3.10/bin/pip3","title":"Upgrade pip/pip3"},{"location":"macos/python/#install-anaconda","text":"Adds to .bash_profile : # >>> conda initialize >>> # !! Contents within this block are managed by 'conda init' !! __conda_setup=\"$('/Users/antonio/opt/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\" if [ $? -eq 0 ]; then eval \"$__conda_setup\" else if [ -f \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\" ]; then . \"/Users/antonio/opt/anaconda3/etc/profile.d/conda.sh\" else export PATH=\"/Users/antonio/opt/anaconda3/bin:$PATH\" fi fi unset __conda_setup # <<< conda initialize <<< Path now looks like: /Users/antonio/opt/anaconda3/bin:/Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin To prevent the activation of the base environment: $ conda config --set auto_activate_base false This creates a file .condarc with the following content: auto_activate_base: false Now, when opening a new shell $PATH is: /Users/antonio/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin","title":"Install Anaconda"},{"location":"macos/python/#install-packages-with-pipx","text":"$ sudo port install pipx $ pipx install black installed package black 21.12b0, installed using Python 3.9.9 These apps are now globally available - black - black-primer - blackd \u26a0\ufe0f Note: '/Users/antonio/.local/bin' is not on your PATH environment variable. These apps will not be globally accessible until your PATH is updated. Run `pipx ensurepath` to automatically add it, or manually modify your PATH in your shell's config file (i.e. ~/.bashrc). done! \u2728 \ud83c\udf1f \u2728 Modify .bashrc to add /Users/antonio/.local/bin","title":"Install packages with pipx"},{"location":"macos/tips/","text":"Tips Reset iCloud bookmarks: http://sheepsystems.com/discuss/YaBB.pl?num=1327319559/0#0 Screen capture cmd + SHIFT + 3 : capture entire desktop to file cmd + ctrl + SHIFT + 3 : copy entire desktop to clipboard cmd + SHIFT + 4 , selection : capture selection cmd + SHIFT + 4 , space bar : capture selected window Change the Default Screen Shot Image Type: defaults write com.apple.screencapture type jpg && killall SystemUIServer defaults write com.apple.screencapture type png && killall SystemUIServer Shortcuts Alternative shortcuts for copy, paste, etc: Cut = Ctrl+X = Shift+Delete Copy = Ctrl+C = Ctrl+Insert Paste = Ctrl+V = Shift+Insert Undo = Ctrl+Z = Alt+Backspace Safari Save Web Pages as PDF files (Mac, iPad and iPhone) javascript:pdf_url=location.href;location.href='http://pdfmyurl.com?url='+escape(pdf_url) Word Default font in Word: Cambria Change default: Formato > Fuente > Predeterminar (then click \"OK\") Format > Font > Set Default Add line numbers for manuscript: Formato > Dise\u00f1o de documento | Dise\u00f1o | N\u00fameros de l\u00ednea | Agregar numeraci\u00f3n de l\u00ednea | Continuo Default fone in TextEdit: Monaco Mail Signature with font/images in Mail: create with TextEdit an rtf file using fonts, etc copy signature from TextEdit and paste it in Mail > Preferences > Signatures Capture signature with Preview Preferences > Signatures (take picture with camera) To add signature: Use Preview. Annotations toolbar > Signature button (click and drag for signature size and location) Customize folder (or file) icon: Copy image for icon in clipboard (from preview, photoshop, ...) Open \"Get Info\" Select small icon on top (not large one in preview) Paste image To delete, select again small icon and hit delete. Do not show updates to new operating system: $ sudo softwareupdate --ignore \"macOS Catalina\" $ defaults write com.apple.systempreferences AttentionPrefBundleIDs 0 # this eliminates red circle in Dock icon $ killAll Dock To reset $ sudo softwareupdate --reset-ignored Command line tools to free space Docker: $ docker system prune --all Conda: $ conda clean --all Git: $ git gc --aggressive --prune=now Homebrew: $ brew cleanup -s Mac/Linux Cache Folder: $ rm -r ~/.cache Create space in a Time Machine disk that is almost full: $ sudo tmutil delete /Volumes/Time\\ Machine\\ Backups/Backups.backupdb/Antonio\u2019s\\ iMac/2016-0?-* Password: Deleting: /Volumes/Time Machine Backups/Backups.backupdb/Antonio\u2019s iMac/2016-01-07-125646 . . . Set file as template: Get Info > Stationery Clicking on file duplicates it. Versions in TextEdit: File > Revert Document... > Browse versions Setup a shortcut for Launchpad System Preferences > Keyboard > Keyboard shortcuts > Launchpad & Dock (double click and hit enter in \"Show Launchpad\" and introduce new shortcut, e.g. alt + cmd + l) Dropbox Make soft links to Dropbox folders: % ln -s ~/Dropbox/Documentos ~/Documentos Text notes Copy DNI, passport, etc. Folder \"Travel\" with travel documents Contacts(?): ~/Library/Application Support/Address Book Folder with photos (shared with family's iPad) Google Earth To fix error \"Unable to contact the login server\" $ rm -rf ~/Library/Caches/Google\\ Earth $ rm -rf ~/Library/Caches/com.Google.GoogleEarth* $ rm -f ~/Library/Preferences/com.google.GoogleEarth* $ rm -f ~/Library/Preferences/com.google.GECommonSettings.plist Misc commands To create the locate database (/var/db/locate.database) run the following command: $ sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist Needed another command to update it regularly?? Remove duplicate entries from \"Open with\" menu $ /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain user $ killall Finder Always Show the User Library Folder: $ chflags nohidden ~/Library/ Shortcuts cmd + tab toggle between applications cmd + ` (backtick) toggle between windows of same application cmd + shift + H Finder goes to home directory select elements in same folder ; cmd + ctrl + N ; creates a new folder and moves selected elements Delete key (delete following character): fn + backspace or ctrl + D Delete word: Delete paragraph ctrl + alt + backspace: delete previous word cmd + backspace: delete until beginning of line (dock) - show all windows Setup a shortcut for Launchpad System Preferences > Keyboard > Keyboard shortcuts > Launchpad & Dock (double click and hit enter in \"Show Launchpad\" and introduce new shortcut, e.g. alt + cmd + l) SPOTLIGHT cmd + Space open/close Spotlight search field cmd + alt + Space open/open Spotlight window (Finder) click opens document while preview press cmd key to see path, text, etc. cmd + alt shows path cmd + click opens finder window pointing to document on popover preview you can \"pre listen\", FaceTime, email, ... you can drag an element of the search to the Desktop or to an Application cmd + alt + drag creates a link in the destination folder cmd + ctrl + F = search \"filename contains\" TEXT cmd + up inicio del documento cmd + down final del documento cmd + left inicio de l\u00ednea cmd + right final de l\u00ednea alt + left inicio de palabra alt + right final de palabra SAFARI cmd + L selects url (useful to delete it or copy it) cmd + alt + F move input to search field cmd + alt + 2 show history space bar scroll down shift + space scroll up cmd + click open link in new tab of foreground cmd + shift + click open link in new tab on background cmd + shift + left/right move between tabs cmd + I mail entire web page cmd + shift + I mail link to web page cmd + shift + D add page to reading list shift + click add link to reading list (no need to open page) cmd + shift + L open reading list Look for more by checking the menus on Safari Application shortcuts Create shortcuts for specific applications: System preferences | Keyboard | Keyboard shortcuts | Application shortcuts SPACES/DESKTOPS (fn +) F8 shows/hides all Spaces/Desktops (fn +) F11 shows/hides Desktop ctrl + arrow changes Space ctrl + 1 changes to Space 1 cmd + shift + 3 captures entire screen to png file cmd + shift + 4 captures selected area to png file cmd + shift + 4 Spacebar captures selected Application window (cmd + ctrl + ... copies capture to clipborad) Do not work (in Lion) (fn +) F9 shows/hides all Applications in current Space (also minimized) if pressed after (fn +) F8 shows all Applications in all Spaces (fn +) F10 shows/hides all windows of current Application 2 fingers up/down scroll 2 fingers left/right back/next in Safari (behavior in other apps?) (both work with one finger in Magic Mouse) 3 fingers up/down opens/closes Mission Control (same as clicking Mission Control on the Dock) (does not work on Magic Mouse) 3 fingers right/left changes between full screen apps and the Desktop(s) (two fingers on the Magic Mouse) Default font in Word: Cambria Change default: Formato > Fuente > Predeterminar (then click \"OK\") Format > Font > Set Default Add line numbers for manuscript: Formato > Dise\u00f1o de documento | Dise\u00f1o | N\u00fameros de l\u00ednea | Agregar numeraci\u00f3n de l\u00ednea | Continuo Default fone in TextEdit: Monaco For work Java (not installed by default) Office, Adobe CSS5.X, Adobe Acrobat 10, EndNote Papers2 Vdl, Unarchiver iTerm2 For Home Handbrake: rip DVDs/CDs Calibre: eBooks Settings Import Gmail calendars in iCal Firefox Sync Enable home sharing (?) Mail? Command-line preferences Change capture file format from png to jpg: $ defaults write com.apple.screencapture type jpg $ killall SystemUIServer Disable all animations: $ defaults write com.apple.finder DisableAllAnimations -bool true Disable widgets: $ defaults write com.apple.dashboard mcx-disabled -boolean YES $ killall Dock Display iTunes tracks in the Dock $ defaults write com.apple.dock itunes-notifications -bool TRUE ; killall Dock Add recent items stack: $ defaults write com.apple.dock persistent-others -array-add '{ \"tile-data\" = { \"list-type\" = 1; }; \"tile-type\" = \"recents-tile\"; }' ; killall Dock Run maintenance scripts: $ ls -la /var/log/*.out -rw-r--r-- 1 root wheel 366451 Jul 10 11:34 /var/log/daily.out -rw-r--r-- 1 root wheel 1832 Jul 10 11:34 /var/log/monthly.out -rw-r--r-- 1 root wheel 3814 Jul 10 11:34 /var/log/weekly.out $ sudo periodic daily weekly monthly Searchable PDF - OCR Scanners: Fujitsu ScanSnap S1300 (includes software Abbyy FineReader) Epson WorkForce Pro (\") Abbyy FineReader DevonThink Pro Office - includes PDF manager PDFpen Prizmo for iPhone Convert EPS to PNG # EPSTOPNG ##### # convert ImageMagick # gm convert GraphicsMagick # # this script will convert an EPS to a PNG with 150 dots/inch ~ 90 dots/cm which is OK # for PowerPoint # # The background is forced to be white and the transparency removed ##### EPS=$1 BASE=`basename ${EPS} .eps` #gm convert -trim -density 150x150 -resize 1000x1000 -verbose ${BASE}.eps ${BASE}.png convert -trim -density 150x150 -resize 1000x1000 -background white -alpha remove -verbose ${BASE}.eps ${BASE}.png # EPSTOPNG30 ##### # convert ImageMagick # gm convert GraphicsMagick # # this script will convert an EPS to a PNG with 300 dots/inch ~ 120 dots/cm which is OK # for PowerPoint # # The background is forced to be white and the transparency removed ##### EPS=$1 BASE=`basename ${EPS} .eps` #gm convert -trim -density 300x300 -resize 2000x2000 -verbose ${BASE}.eps ${BASE}.png convert -trim -density 300x300 -resize 2000x2000 -background white -alpha remove -verbose ${BASE}.eps ${BASE}.png # EPSTOPNGWHITE EPS=$1 BASE=`basename ${EPS} .eps` convert -trim ${EPS} -background white -alpha remove -alpha off ${BASE}.png More tips FileVault encripts data Verify and repair disk permissions Disk utility can create partitions Textedit opens rtf, Word (doc/docx) and OpenOffice documents Can create pdf directly (Export as PDF) Can toggle between rtf and txt Can create tables and lists VoiceOver install additional voices!!! Preview can export to PDF Can add annotations to PDF Can add signature to PDF Can convert color to B/W Can make screen capture Select images and convert them to same height and width (Tools > Adjust Size) Can edit images, crop","title":"Tips"},{"location":"macos/tips/#tips","text":"Reset iCloud bookmarks: http://sheepsystems.com/discuss/YaBB.pl?num=1327319559/0#0","title":"Tips"},{"location":"macos/tips/#screen-capture","text":"cmd + SHIFT + 3 : capture entire desktop to file cmd + ctrl + SHIFT + 3 : copy entire desktop to clipboard cmd + SHIFT + 4 , selection : capture selection cmd + SHIFT + 4 , space bar : capture selected window Change the Default Screen Shot Image Type: defaults write com.apple.screencapture type jpg && killall SystemUIServer defaults write com.apple.screencapture type png && killall SystemUIServer","title":"Screen capture"},{"location":"macos/tips/#shortcuts","text":"Alternative shortcuts for copy, paste, etc: Cut = Ctrl+X = Shift+Delete Copy = Ctrl+C = Ctrl+Insert Paste = Ctrl+V = Shift+Insert Undo = Ctrl+Z = Alt+Backspace","title":"Shortcuts"},{"location":"macos/tips/#safari","text":"Save Web Pages as PDF files (Mac, iPad and iPhone) javascript:pdf_url=location.href;location.href='http://pdfmyurl.com?url='+escape(pdf_url)","title":"Safari"},{"location":"macos/tips/#word","text":"Default font in Word: Cambria Change default: Formato > Fuente > Predeterminar (then click \"OK\") Format > Font > Set Default Add line numbers for manuscript: Formato > Dise\u00f1o de documento | Dise\u00f1o | N\u00fameros de l\u00ednea | Agregar numeraci\u00f3n de l\u00ednea | Continuo Default fone in TextEdit: Monaco","title":"Word"},{"location":"macos/tips/#mail","text":"Signature with font/images in Mail: create with TextEdit an rtf file using fonts, etc copy signature from TextEdit and paste it in Mail > Preferences > Signatures Capture signature with Preview Preferences > Signatures (take picture with camera) To add signature: Use Preview. Annotations toolbar > Signature button (click and drag for signature size and location) Customize folder (or file) icon: Copy image for icon in clipboard (from preview, photoshop, ...) Open \"Get Info\" Select small icon on top (not large one in preview) Paste image To delete, select again small icon and hit delete. Do not show updates to new operating system: $ sudo softwareupdate --ignore \"macOS Catalina\" $ defaults write com.apple.systempreferences AttentionPrefBundleIDs 0 # this eliminates red circle in Dock icon $ killAll Dock To reset $ sudo softwareupdate --reset-ignored","title":"Mail"},{"location":"macos/tips/#command-line-tools-to-free-space","text":"Docker: $ docker system prune --all Conda: $ conda clean --all Git: $ git gc --aggressive --prune=now Homebrew: $ brew cleanup -s Mac/Linux Cache Folder: $ rm -r ~/.cache Create space in a Time Machine disk that is almost full: $ sudo tmutil delete /Volumes/Time\\ Machine\\ Backups/Backups.backupdb/Antonio\u2019s\\ iMac/2016-0?-* Password: Deleting: /Volumes/Time Machine Backups/Backups.backupdb/Antonio\u2019s iMac/2016-01-07-125646 . . . Set file as template: Get Info > Stationery Clicking on file duplicates it. Versions in TextEdit: File > Revert Document... > Browse versions Setup a shortcut for Launchpad System Preferences > Keyboard > Keyboard shortcuts > Launchpad & Dock (double click and hit enter in \"Show Launchpad\" and introduce new shortcut, e.g. alt + cmd + l)","title":"Command line tools to free space"},{"location":"macos/tips/#dropbox","text":"Make soft links to Dropbox folders: % ln -s ~/Dropbox/Documentos ~/Documentos Text notes Copy DNI, passport, etc. Folder \"Travel\" with travel documents Contacts(?): ~/Library/Application Support/Address Book Folder with photos (shared with family's iPad)","title":"Dropbox"},{"location":"macos/tips/#google-earth","text":"To fix error \"Unable to contact the login server\" $ rm -rf ~/Library/Caches/Google\\ Earth $ rm -rf ~/Library/Caches/com.Google.GoogleEarth* $ rm -f ~/Library/Preferences/com.google.GoogleEarth* $ rm -f ~/Library/Preferences/com.google.GECommonSettings.plist","title":"Google Earth"},{"location":"macos/tips/#misc-commands","text":"To create the locate database (/var/db/locate.database) run the following command: $ sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist Needed another command to update it regularly?? Remove duplicate entries from \"Open with\" menu $ /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain user $ killall Finder Always Show the User Library Folder: $ chflags nohidden ~/Library/","title":"Misc commands"},{"location":"macos/tips/#shortcuts_1","text":"cmd + tab toggle between applications cmd + ` (backtick) toggle between windows of same application cmd + shift + H Finder goes to home directory select elements in same folder ; cmd + ctrl + N ; creates a new folder and moves selected elements Delete key (delete following character): fn + backspace or ctrl + D Delete word: Delete paragraph ctrl + alt + backspace: delete previous word cmd + backspace: delete until beginning of line (dock) - show all windows","title":"Shortcuts"},{"location":"macos/tips/#setup-a-shortcut-for-launchpad","text":"System Preferences > Keyboard > Keyboard shortcuts > Launchpad & Dock (double click and hit enter in \"Show Launchpad\" and introduce new shortcut, e.g. alt + cmd + l)","title":"Setup a shortcut for Launchpad"},{"location":"macos/tips/#spotlight","text":"cmd + Space open/close Spotlight search field cmd + alt + Space open/open Spotlight window (Finder) click opens document while preview press cmd key to see path, text, etc. cmd + alt shows path cmd + click opens finder window pointing to document on popover preview you can \"pre listen\", FaceTime, email, ... you can drag an element of the search to the Desktop or to an Application cmd + alt + drag creates a link in the destination folder cmd + ctrl + F = search \"filename contains\"","title":"SPOTLIGHT"},{"location":"macos/tips/#text","text":"cmd + up inicio del documento cmd + down final del documento cmd + left inicio de l\u00ednea cmd + right final de l\u00ednea alt + left inicio de palabra alt + right final de palabra","title":"TEXT"},{"location":"macos/tips/#safari_1","text":"cmd + L selects url (useful to delete it or copy it) cmd + alt + F move input to search field cmd + alt + 2 show history space bar scroll down shift + space scroll up cmd + click open link in new tab of foreground cmd + shift + click open link in new tab on background cmd + shift + left/right move between tabs cmd + I mail entire web page cmd + shift + I mail link to web page cmd + shift + D add page to reading list shift + click add link to reading list (no need to open page) cmd + shift + L open reading list Look for more by checking the menus on Safari","title":"SAFARI"},{"location":"macos/tips/#application-shortcuts","text":"Create shortcuts for specific applications: System preferences | Keyboard | Keyboard shortcuts | Application shortcuts SPACES/DESKTOPS (fn +) F8 shows/hides all Spaces/Desktops (fn +) F11 shows/hides Desktop ctrl + arrow changes Space ctrl + 1 changes to Space 1 cmd + shift + 3 captures entire screen to png file cmd + shift + 4 captures selected area to png file cmd + shift + 4 Spacebar captures selected Application window (cmd + ctrl + ... copies capture to clipborad) Do not work (in Lion) (fn +) F9 shows/hides all Applications in current Space (also minimized) if pressed after (fn +) F8 shows all Applications in all Spaces (fn +) F10 shows/hides all windows of current Application 2 fingers up/down scroll 2 fingers left/right back/next in Safari (behavior in other apps?) (both work with one finger in Magic Mouse) 3 fingers up/down opens/closes Mission Control (same as clicking Mission Control on the Dock) (does not work on Magic Mouse) 3 fingers right/left changes between full screen apps and the Desktop(s) (two fingers on the Magic Mouse) Default font in Word: Cambria Change default: Formato > Fuente > Predeterminar (then click \"OK\") Format > Font > Set Default Add line numbers for manuscript: Formato > Dise\u00f1o de documento | Dise\u00f1o | N\u00fameros de l\u00ednea | Agregar numeraci\u00f3n de l\u00ednea | Continuo Default fone in TextEdit: Monaco","title":"Application shortcuts"},{"location":"macos/tips/#for-work","text":"Java (not installed by default) Office, Adobe CSS5.X, Adobe Acrobat 10, EndNote Papers2 Vdl, Unarchiver iTerm2","title":"For work"},{"location":"macos/tips/#for-home","text":"Handbrake: rip DVDs/CDs Calibre: eBooks","title":"For Home"},{"location":"macos/tips/#settings","text":"Import Gmail calendars in iCal Firefox Sync Enable home sharing (?) Mail?","title":"Settings"},{"location":"macos/tips/#command-line-preferences","text":"Change capture file format from png to jpg: $ defaults write com.apple.screencapture type jpg $ killall SystemUIServer Disable all animations: $ defaults write com.apple.finder DisableAllAnimations -bool true Disable widgets: $ defaults write com.apple.dashboard mcx-disabled -boolean YES $ killall Dock Display iTunes tracks in the Dock $ defaults write com.apple.dock itunes-notifications -bool TRUE ; killall Dock Add recent items stack: $ defaults write com.apple.dock persistent-others -array-add '{ \"tile-data\" = { \"list-type\" = 1; }; \"tile-type\" = \"recents-tile\"; }' ; killall Dock Run maintenance scripts: $ ls -la /var/log/*.out -rw-r--r-- 1 root wheel 366451 Jul 10 11:34 /var/log/daily.out -rw-r--r-- 1 root wheel 1832 Jul 10 11:34 /var/log/monthly.out -rw-r--r-- 1 root wheel 3814 Jul 10 11:34 /var/log/weekly.out $ sudo periodic daily weekly monthly","title":"Command-line preferences"},{"location":"macos/tips/#searchable-pdf-ocr","text":"Scanners: Fujitsu ScanSnap S1300 (includes software Abbyy FineReader) Epson WorkForce Pro (\") Abbyy FineReader DevonThink Pro Office - includes PDF manager PDFpen Prizmo for iPhone","title":"Searchable PDF - OCR"},{"location":"macos/tips/#convert-eps-to-png","text":"# EPSTOPNG ##### # convert ImageMagick # gm convert GraphicsMagick # # this script will convert an EPS to a PNG with 150 dots/inch ~ 90 dots/cm which is OK # for PowerPoint # # The background is forced to be white and the transparency removed ##### EPS=$1 BASE=`basename ${EPS} .eps` #gm convert -trim -density 150x150 -resize 1000x1000 -verbose ${BASE}.eps ${BASE}.png convert -trim -density 150x150 -resize 1000x1000 -background white -alpha remove -verbose ${BASE}.eps ${BASE}.png # EPSTOPNG30 ##### # convert ImageMagick # gm convert GraphicsMagick # # this script will convert an EPS to a PNG with 300 dots/inch ~ 120 dots/cm which is OK # for PowerPoint # # The background is forced to be white and the transparency removed ##### EPS=$1 BASE=`basename ${EPS} .eps` #gm convert -trim -density 300x300 -resize 2000x2000 -verbose ${BASE}.eps ${BASE}.png convert -trim -density 300x300 -resize 2000x2000 -background white -alpha remove -verbose ${BASE}.eps ${BASE}.png # EPSTOPNGWHITE EPS=$1 BASE=`basename ${EPS} .eps` convert -trim ${EPS} -background white -alpha remove -alpha off ${BASE}.png","title":"Convert EPS to PNG"},{"location":"macos/tips/#more-tips","text":"FileVault encripts data Verify and repair disk permissions Disk utility can create partitions Textedit opens rtf, Word (doc/docx) and OpenOffice documents Can create pdf directly (Export as PDF) Can toggle between rtf and txt Can create tables and lists VoiceOver install additional voices!!! Preview can export to PDF Can add annotations to PDF Can add signature to PDF Can convert color to B/W Can make screen capture Select images and convert them to same height and width (Tools > Adjust Size) Can edit images, crop","title":"More tips"},{"location":"programming/cuda/","text":"CUDA CUDA Python with Numba Numba can compile for the CPU and GPU using function decorators. For example the the @jit decorator acts on a function add by doing add = jit(add) . Not all operation/features of Python available in Numba . For example: dictionaries Numpy functions (use math. functions instead) CPU optimization in Numba This is accomplished with the @jit decorator: from numba import jit import math @jit def hypot(x, y): # Implementation from https://en.wikipedia.org/wiki/Hypot x = abs(x); y = abs(y); t = min(x, y); x = max(x, y); t = t / x; return x * math.sqrt(1+t*t)","title":"CUDA"},{"location":"programming/cuda/#cuda","text":"","title":"CUDA"},{"location":"programming/cuda/#cuda-python-with-numba","text":"Numba can compile for the CPU and GPU using function decorators. For example the the @jit decorator acts on a function add by doing add = jit(add) . Not all operation/features of Python available in Numba . For example: dictionaries Numpy functions (use math. functions instead)","title":"CUDA Python with Numba"},{"location":"programming/cuda/#cpu-optimization-in-numba","text":"This is accomplished with the @jit decorator: from numba import jit import math @jit def hypot(x, y): # Implementation from https://en.wikipedia.org/wiki/Hypot x = abs(x); y = abs(y); t = min(x, y); x = max(x, y); t = t / x; return x * math.sqrt(1+t*t)","title":"CPU optimization in Numba"},{"location":"seismology/data_requests/","text":"Data Requests Mass Downloaders Stream2segment (GFZ) https://github.com/rizac/stream2segment/blob/master/README.md Zaccarelli, R., Bindi, D., Strollo, A., Quinteros, J., & Cotton, F. (2019). Stream2segment: An Open\u2010Source Tool for Downloading, Processing, and Visualizing Massive Event\u2010Based Seismic Waveform Datasets. Seismological Research Letters, 90(5), 2028. http://doi.org/10.1785/0220180314. obspyDMT (Oxford) https://github.com/kasra-hosseini/obspyDMT Hosseini, K., & Sigloch, K. (2017). ObspyDMT: a Python toolbox for retrieving and processing large seismological data sets. Solid Earth, 8(5), 1047\u20131070. http://doi.org/10.5194/se-8-1047-2017 ObsPy mass_downloader module https://docs.obspy.org/packages/autogen/obspy.clients.fdsn.mass_downloader.html obspy.clients.fdsn - FDSN Web service client for ObsPy https://docs.obspy.org/packages/obspy.clients.fdsn.html Good for complex or larger queries: obspy.clients.fdsn.mass_downloader (for multiple data centers) FDSNWS Using web services: FDSNWS & IRISWS Station data (FDSNWS) http://service.iris.edu/fdsnws/station/1/query?... Type http_request_string in a web browser or use wget or curl from command line $ wget -O output_file \"http_request_string\" (quotation marks are important to avoid that the shell interprets special characters) Use HTTP POST All of the parameters that can be submitted with the GET method are allowed in POST with the following exceptions: startbefore, endbefore, startafter, endafter $ wget --post-file=post_request_file -O output_file http://service.iris.edu/fdsnws/station/1/query Example of post_request_file: level=channel format=text TA A25A -- BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 IU ANMO * BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 IU ANMO 10 HHZ 2010-03-25T00:00:00 2010-04-01T00:00:00 II KURK 00 BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 In general: parameter=<value> parameter=<value> parameter=<value> <network> <station> <location> <channel> <starttime> <endtime> <network> <station> <location> <channel> <starttime> <endtime> ... Event data (FDSNWS) http://service.iris.edu/fdsnws/event/1/query?... This service will not be offered long term, so it is better to go directly to ISC/NEIC Waveform data (FDSNWS) http://service.iris.edu/fdsnws/dataselect/1/query?... Same options: type URL in web browser (small requests) wget/curl (automated or scripted requests) HTTP POST (automated or scripted requests) quality= minimumlength= longestonly= ... Waveform data (IRISWS) http://service.iris.edu/irisws/timeseries/1/query?... accepts HTTP POST? Signal processing options: high, low and band-pass filter remove mean value scaling by constant value deconvolution of instrument response (with frequency limits and unit conversion) differentiation and integration decimation to lower sample rates good for complex or large queries Other IRIS web services fedcatalog : A service for federating requests for channel metadata across multiple data centers syngine : A service for synthetic seismograms timeseriesplot : A charting webservice offering timeseries graphic display in single-line or helicorder styles rotation : rotate waveform data into alternate coordinate system sacpz : instrument response information (per channel) resp : channel response information evalresp : instrument response information evaluated from IRIS metadata virtualnetwork : list of stations in a virtual network traveltime : travel times and ray parameters for seismic phases using a 1-D spherical earth model flinnengdahl : a Flinn-Engdahl region code or name for a latitude, longitude pair distaz : distance, azimuth and back-azimuth between two locations metadatachange : changes made to SEED metadata Other tools JWEED JWEED and other IRIS software use web services Fetch scripts FetchData-2016.089.txt FetchEvent-2014.340.txt FetchMetadata-2014.316.txt FetchSyn-2016.007.txt Advantages: access to other data centers (see -F option) can read from BREQ_FAST file CWBQuery Backup vdl account and cwb from edge1.ictja.csic.es Backup data files ndatapath=2 datapath=/data2/cwb/ -> edge2.icjta.csic.es:/data9/cwb2/cwb/*.ms *.idx datapath1=/data1/cwb/ -> edge2.ictja.csic.es:/data8/cwb1/cwb/*.ms *.idx Backup vdl home directory $ cd /home $ tar cvzf ~antonio/backups/vd_edge1.tgz vdl (includes .bash* files ) Older backups are: edge1.tar edge1dot.tar (hidden files and directories: .*) edge2.tar Save crontab file $ crontab -e # DO NOT EDIT THIS FILE - edit the master and reinstall. # (/tmp/crontab.31532 installed on Mon Aug 3 16:07:26 2009) # (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $) * * * * * bash scripts/chkInvToSEED 200 >>LOG/InvToSEED.log1 2>&1 * * * * * bash scripts/chkJarProcessGC TcpHoldings 200 >>LOG/TcpHoldings.log1 2>&1 * * * * * bash scripts/chkJarProcessGC QueryServer 100 \"\" \"\" -allowrestricted >> LOG/QueryServer.log1 2>&1 * * * * * bash scripts/chkJarProcessGC EdgeMom 400 >>LOG/EdgeMom.log1 2>&1 Save /etc/security/limits.conf $ cat /etc/security/limits.conf # /etc/security/limits.conf # #Each line describes a limit for a user in the form: # #<domain> <type> <item> <value> # #Where: #<domain> can be: # - an user name # - a group name, with @group syntax # - the wildcard *, for default entry # - the wildcard %, can be also used with %group syntax, # for maxlogin limit # - NOTE: group and wildcard limits are not applied to root. # To apply a limit to the root user, <domain> must be # the literal username root. # #<type> can have the two values: # - \"soft\" for enforcing the soft limits # - \"hard\" for enforcing hard limits # #<item> can be one of the following: # - core - limits the core file size (KB) # - data - max data size (KB) # - fsize - maximum filesize (KB) # - memlock - max locked-in-memory address space (KB) # - nofile - max number of open files # - rss - max resident set size (KB) # - stack - max stack size (KB) # - cpu - max CPU time (MIN) # - nproc - max number of processes # - as - address space limit (KB) # - maxlogins - max number of logins for this user # - maxsyslogins - max number of logins on the system # - priority - the priority to run user process with # - locks - max number of file locks the user can hold # - sigpending - max number of pending signals # - msgqueue - max memory used by POSIX message queues (bytes) # - nice - max nice priority allowed to raise to values: [-20, 19] # - rtprio - max realtime priority # - chroot - change root to directory (Debian-specific) # #<domain> <type> <item> <value> # #* soft core 0 #root hard core 100000 #* hard rss 10000 #@student hard nproc 20 #@faculty soft nproc 20 #@faculty hard nproc 50 #ftp hard nproc 0 #ftp - chroot /ftp #@student - maxlogins 4 vdl soft nofile 4096 vdl hard nofile 4096 # End of file Backup /etc/sudoers $ sudo visudo # /etc/sudoers # # This file MUST be edited with the 'visudo' command as root. # # See the man page for details on how to write a sudoers file. # Defaults env_reset # Host alias specification # User alias specification User_Alias APOLLOUSERS = antonio,iber,jdiaz,mario,estevet,sofia User_Alias INPUTUSERS = antonio,iber,jdiaz,mario,estevet,sofia # Cmnd alias specification Cmnd_Alias APOLLOCOMMANDS = /usr/bin/java, /bin/kill Cmnd_Alias INPUTCOMMANDS = /bin/cp, /bin/mv, /bin/rm, /bin/mkdir, /bin/rmdir, /bin/chmod APOLLOUSERS ALL=(root) NOPASSWD: APOLLOCOMMANDS INPUTUSERS ALL=(input) NOPASSWD: INPUTCOMMANDS # User privilege specification root ALL=(ALL) ALL vdl ALL=(ALL) ALL # Uncomment to allow members of group sudo to not need a password # (Note that later entries override this, so you might need to move # it further down) # %sudo ALL=NOPASSWD: ALL # Members of the admin group may gain root privileges %admin ALL=(ALL) ALL Backup mysql databases $ mysql -u root -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 4432 Server version: 5.1.72-0ubuntu0.10.04.1 (Ubuntu) Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved. . . . mysql> show databases; +--------------------+ | Database | +--------------------+ | information_schema | | DZ | | DZDATA | | DZSTATS | | DZTMP | | FB | | FBDATA | | FBSTATS | | FBTMP | | FR | | FRDATA | | FRSTATS | | FRTMP | | IB | | IBDATA | | IBSTATS | | IBTMP | | IP | | IPDATA | | IPSTATS | | IPTMP | | PQLXMETA | | TAPAS | | TAPASDATA | | TAPASSTATS | | TAPASTMP | | TEST | | TESTDATA | | TESTSTATS | | TESTTMP | | X7 | | X7DATA | | X7STATS | | X7TMP | | anss | | edge | | inv | | mysql | | status | +--------------------+ 39 rows in set (0.00 sec) mysql> quit Bye $ mysqldump -u root -pSunMysqlRoot --add-drop-table -c edge > BACKUP_SQL/edge.sql $ mysqldump -u root -pSunMysqlRoot --add-drop-table -c anss > BACKUP_SQL/anss.sql $ mysqldump -u root -pSunMysqlRoot --add-drop-table -c inv > BACKUP_SQL/inv.sql $ mysqldump -u root -pSunMysqlRoot --add-drop-table -c status > BACKUP_SQL/status.sql","title":"Data requests"},{"location":"seismology/data_requests/#data-requests","text":"","title":"Data Requests"},{"location":"seismology/data_requests/#mass-downloaders","text":"","title":"Mass Downloaders"},{"location":"seismology/data_requests/#stream2segment-gfz","text":"https://github.com/rizac/stream2segment/blob/master/README.md Zaccarelli, R., Bindi, D., Strollo, A., Quinteros, J., & Cotton, F. (2019). Stream2segment: An Open\u2010Source Tool for Downloading, Processing, and Visualizing Massive Event\u2010Based Seismic Waveform Datasets. Seismological Research Letters, 90(5), 2028. http://doi.org/10.1785/0220180314.","title":"Stream2segment (GFZ)"},{"location":"seismology/data_requests/#obspydmt-oxford","text":"https://github.com/kasra-hosseini/obspyDMT Hosseini, K., & Sigloch, K. (2017). ObspyDMT: a Python toolbox for retrieving and processing large seismological data sets. Solid Earth, 8(5), 1047\u20131070. http://doi.org/10.5194/se-8-1047-2017","title":"obspyDMT (Oxford)"},{"location":"seismology/data_requests/#obspy-mass_downloader-module","text":"https://docs.obspy.org/packages/autogen/obspy.clients.fdsn.mass_downloader.html obspy.clients.fdsn - FDSN Web service client for ObsPy https://docs.obspy.org/packages/obspy.clients.fdsn.html Good for complex or larger queries: obspy.clients.fdsn.mass_downloader (for multiple data centers)","title":"ObsPy mass_downloader module"},{"location":"seismology/data_requests/#fdsnws","text":"Using web services: FDSNWS & IRISWS","title":"FDSNWS"},{"location":"seismology/data_requests/#station-data-fdsnws","text":"http://service.iris.edu/fdsnws/station/1/query?... Type http_request_string in a web browser or use wget or curl from command line $ wget -O output_file \"http_request_string\" (quotation marks are important to avoid that the shell interprets special characters) Use HTTP POST All of the parameters that can be submitted with the GET method are allowed in POST with the following exceptions: startbefore, endbefore, startafter, endafter $ wget --post-file=post_request_file -O output_file http://service.iris.edu/fdsnws/station/1/query Example of post_request_file: level=channel format=text TA A25A -- BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 IU ANMO * BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 IU ANMO 10 HHZ 2010-03-25T00:00:00 2010-04-01T00:00:00 II KURK 00 BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 In general: parameter=<value> parameter=<value> parameter=<value> <network> <station> <location> <channel> <starttime> <endtime> <network> <station> <location> <channel> <starttime> <endtime> ...","title":"Station data (FDSNWS)"},{"location":"seismology/data_requests/#event-data-fdsnws","text":"http://service.iris.edu/fdsnws/event/1/query?... This service will not be offered long term, so it is better to go directly to ISC/NEIC","title":"Event data (FDSNWS)"},{"location":"seismology/data_requests/#waveform-data-fdsnws","text":"http://service.iris.edu/fdsnws/dataselect/1/query?... Same options: type URL in web browser (small requests) wget/curl (automated or scripted requests) HTTP POST (automated or scripted requests) quality= minimumlength= longestonly= ...","title":"Waveform data (FDSNWS)"},{"location":"seismology/data_requests/#waveform-data-irisws","text":"http://service.iris.edu/irisws/timeseries/1/query?... accepts HTTP POST? Signal processing options: high, low and band-pass filter remove mean value scaling by constant value deconvolution of instrument response (with frequency limits and unit conversion) differentiation and integration decimation to lower sample rates good for complex or large queries","title":"Waveform data (IRISWS)"},{"location":"seismology/data_requests/#other-iris-web-services","text":"fedcatalog : A service for federating requests for channel metadata across multiple data centers syngine : A service for synthetic seismograms timeseriesplot : A charting webservice offering timeseries graphic display in single-line or helicorder styles rotation : rotate waveform data into alternate coordinate system sacpz : instrument response information (per channel) resp : channel response information evalresp : instrument response information evaluated from IRIS metadata virtualnetwork : list of stations in a virtual network traveltime : travel times and ray parameters for seismic phases using a 1-D spherical earth model flinnengdahl : a Flinn-Engdahl region code or name for a latitude, longitude pair distaz : distance, azimuth and back-azimuth between two locations metadatachange : changes made to SEED metadata","title":"Other IRIS web services"},{"location":"seismology/data_requests/#other-tools","text":"","title":"Other tools"},{"location":"seismology/data_requests/#jweed","text":"JWEED and other IRIS software use web services","title":"JWEED"},{"location":"seismology/data_requests/#fetch-scripts","text":"FetchData-2016.089.txt FetchEvent-2014.340.txt FetchMetadata-2014.316.txt FetchSyn-2016.007.txt Advantages: access to other data centers (see -F option) can read from BREQ_FAST file","title":"Fetch scripts"},{"location":"seismology/data_requests/#cwbquery","text":"Backup vdl account and cwb from edge1.ictja.csic.es Backup data files ndatapath=2 datapath=/data2/cwb/ -> edge2.icjta.csic.es:/data9/cwb2/cwb/*.ms *.idx datapath1=/data1/cwb/ -> edge2.ictja.csic.es:/data8/cwb1/cwb/*.ms *.idx Backup vdl home directory $ cd /home $ tar cvzf ~antonio/backups/vd_edge1.tgz vdl (includes .bash* files ) Older backups are: edge1.tar edge1dot.tar (hidden files and directories: .*) edge2.tar Save crontab file $ crontab -e # DO NOT EDIT THIS FILE - edit the master and reinstall. # (/tmp/crontab.31532 installed on Mon Aug 3 16:07:26 2009) # (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $) * * * * * bash scripts/chkInvToSEED 200 >>LOG/InvToSEED.log1 2>&1 * * * * * bash scripts/chkJarProcessGC TcpHoldings 200 >>LOG/TcpHoldings.log1 2>&1 * * * * * bash scripts/chkJarProcessGC QueryServer 100 \"\" \"\" -allowrestricted >> LOG/QueryServer.log1 2>&1 * * * * * bash scripts/chkJarProcessGC EdgeMom 400 >>LOG/EdgeMom.log1 2>&1 Save /etc/security/limits.conf $ cat /etc/security/limits.conf # /etc/security/limits.conf # #Each line describes a limit for a user in the form: # #<domain> <type> <item> <value> # #Where: #<domain> can be: # - an user name # - a group name, with @group syntax # - the wildcard *, for default entry # - the wildcard %, can be also used with %group syntax, # for maxlogin limit # - NOTE: group and wildcard limits are not applied to root. # To apply a limit to the root user, <domain> must be # the literal username root. # #<type> can have the two values: # - \"soft\" for enforcing the soft limits # - \"hard\" for enforcing hard limits # #<item> can be one of the following: # - core - limits the core file size (KB) # - data - max data size (KB) # - fsize - maximum filesize (KB) # - memlock - max locked-in-memory address space (KB) # - nofile - max number of open files # - rss - max resident set size (KB) # - stack - max stack size (KB) # - cpu - max CPU time (MIN) # - nproc - max number of processes # - as - address space limit (KB) # - maxlogins - max number of logins for this user # - maxsyslogins - max number of logins on the system # - priority - the priority to run user process with # - locks - max number of file locks the user can hold # - sigpending - max number of pending signals # - msgqueue - max memory used by POSIX message queues (bytes) # - nice - max nice priority allowed to raise to values: [-20, 19] # - rtprio - max realtime priority # - chroot - change root to directory (Debian-specific) # #<domain> <type> <item> <value> # #* soft core 0 #root hard core 100000 #* hard rss 10000 #@student hard nproc 20 #@faculty soft nproc 20 #@faculty hard nproc 50 #ftp hard nproc 0 #ftp - chroot /ftp #@student - maxlogins 4 vdl soft nofile 4096 vdl hard nofile 4096 # End of file Backup /etc/sudoers $ sudo visudo # /etc/sudoers # # This file MUST be edited with the 'visudo' command as root. # # See the man page for details on how to write a sudoers file. # Defaults env_reset # Host alias specification # User alias specification User_Alias APOLLOUSERS = antonio,iber,jdiaz,mario,estevet,sofia User_Alias INPUTUSERS = antonio,iber,jdiaz,mario,estevet,sofia # Cmnd alias specification Cmnd_Alias APOLLOCOMMANDS = /usr/bin/java, /bin/kill Cmnd_Alias INPUTCOMMANDS = /bin/cp, /bin/mv, /bin/rm, /bin/mkdir, /bin/rmdir, /bin/chmod APOLLOUSERS ALL=(root) NOPASSWD: APOLLOCOMMANDS INPUTUSERS ALL=(input) NOPASSWD: INPUTCOMMANDS # User privilege specification root ALL=(ALL) ALL vdl ALL=(ALL) ALL # Uncomment to allow members of group sudo to not need a password # (Note that later entries override this, so you might need to move # it further down) # %sudo ALL=NOPASSWD: ALL # Members of the admin group may gain root privileges %admin ALL=(ALL) ALL Backup mysql databases $ mysql -u root -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 4432 Server version: 5.1.72-0ubuntu0.10.04.1 (Ubuntu) Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved. . . . mysql> show databases; +--------------------+ | Database | +--------------------+ | information_schema | | DZ | | DZDATA | | DZSTATS | | DZTMP | | FB | | FBDATA | | FBSTATS | | FBTMP | | FR | | FRDATA | | FRSTATS | | FRTMP | | IB | | IBDATA | | IBSTATS | | IBTMP | | IP | | IPDATA | | IPSTATS | | IPTMP | | PQLXMETA | | TAPAS | | TAPASDATA | | TAPASSTATS | | TAPASTMP | | TEST | | TESTDATA | | TESTSTATS | | TESTTMP | | X7 | | X7DATA | | X7STATS | | X7TMP | | anss | | edge | | inv | | mysql | | status | +--------------------+ 39 rows in set (0.00 sec) mysql> quit Bye $ mysqldump -u root -pSunMysqlRoot --add-drop-table -c edge > BACKUP_SQL/edge.sql $ mysqldump -u root -pSunMysqlRoot --add-drop-table -c anss > BACKUP_SQL/anss.sql $ mysqldump -u root -pSunMysqlRoot --add-drop-table -c inv > BACKUP_SQL/inv.sql $ mysqldump -u root -pSunMysqlRoot --add-drop-table -c status > BACKUP_SQL/status.sql","title":"CWBQuery"},{"location":"seismology/obspy/","text":"ObsPy Notes on using ObsPy Installation and updates of conda, pip, etc $ conda update conda $ conda update anaconda $ pip install --upgrade pip Installation of ObsPy Suggested approach, using an environment for obspy $ conda create -n obspy python=3.5 anaconda $ source activate obspy $ (obspy) conda install -c conda-forge obspy $ (obspy) conda update -c conda-forge obspy $ (obspy) obspy-runtests Another approach, adding conda-forge to list of channels $ conda config --add channels conda-forge $ conda config --add channels obspy $ conda install obspy $ conda update obspy $ obspy-runtests Other packages installed (using conda, pip, or others) $ pip install eqcorrscan Other packages to install To fix this error while running obspy-runtests: OSError: Unable to open boundary dataset file. Only the 'crude' and 'low', resolution datasets are installed by default. If you are requesting an, 'intermediate', 'high' or 'full' resolution dataset, you may need to download and install those files separately with conda install -c conda-forge basemap-data-hires . $ conda install -c conda-forge mtspec The following NEW packages will be INSTALLED: libgfortran: 3.0.0-0 conda-forge mtspec: 0.3.2-py35_1 conda-forge Other packages installed in obspy environment: $ cd LOKI-LOCATOR $ mk_anaconda.sh $ python installation.py install $ cd LatLongUTMconversion_python3/ $ python setup.py install Check if file/directory exists import os os.path.isfile(\"file\") # True for regular file, False for directory! os.path.isdir(\"directory\") os.path.exists(\"file_or_directory\") # True for existing file or directory Write to stdout and stderr sys.stdout.write(\"message\\n\") sys.stderr.write(\"error\\n\") Read a text file in Python (see Python Cookbook, page 141) Read the entire file as a single string with open('somefile.txt', 'rt') as f: data = f.read() Iterate over the lines of the file with open('somefile.txt', 'rt') as f: for line in f: to split line in columns: columns = line.split() Formatted print Comprehensive documentation and examples in: https://pyformat.info print('format string'.format(variable1, variable2, variable3, ...)) example of format string: print('{0:6} {1:03d} {2:07.4f}'.format('PAB', 5, 3.4)) PAB 005 03.4000 Run an external command in Python import subprocess subprocess.call('ls') subprocess.call(['ls', '-l']) -> writes to stdout output_str = subprocess.check_output(['ls', '-l']) -> writes to string \"output_str\" Options of subprocess.call: stdin=None -> redirects input from a file or an open pipe stdout=None -> redirects output to a file stderr=None shell=False -> sends command to the UNIX shell (to use shell shortcuts and optimizations, e.g. wildcards) then string is only one: 'ls *.py' Making day plots from obspy import read from obspy.core import UTCDateTime (if you are going to operate with time strings) st = read(\"DD.D006..HHZ.D.2016.234\") st.plot(type=\"dayplot\", outfile=\"DD.D006..HHZ.D.2016.234.raw.png\") st.filter(\"bandpass\", freqmin=3, freqmax=15, corners=3) st.plot(type=\"dayplot\", outfile=\"DD.D006..HHZ.D.2016.235.filtered.png\") st.plot(type=\"dayplot\", outfile=\"DD.D044..HHZ.D.2016.267.filtered.png\", starttime=UTCDateTime(\"2016-09-23T07:00:00.0Z\"), # set start time (exclude installation) show_y_UTC_label=False, # eliminate ugly \"local time\" label size=(2000,1200), # doubles the size of \"dayplot\" plot vertical_scaling_range=5.0E2) # clip largest signal More options in: http://docs.obspy.org/packages/autogen/obspy.core.stream.Stream.plot.html#obspy.core.stream.Stream.plot Checking for data availability using obspy-scan $ obspy-scan path = scan contents of all files in directory \"path\" and generates an interactive plot $ obspy-scan --no-x 2016/DD/*/*Z.D produces an interactive plot only for vertical components does not plot an x for the start time of each data file $ obspy-scan --no-x --print-gaps -o 2016.pdf 2016 > 2016.gaps produces a pdf file instead of an interactive plot writes gaps to stdout does not plot an x for the start time of each data file","title":"ObsPy"},{"location":"seismology/obspy/#obspy","text":"Notes on using ObsPy","title":"ObsPy"},{"location":"seismology/obspy/#installation-and-updates-of-conda-pip-etc","text":"$ conda update conda $ conda update anaconda $ pip install --upgrade pip","title":"Installation and updates of conda, pip, etc"},{"location":"seismology/obspy/#installation-of-obspy","text":"Suggested approach, using an environment for obspy $ conda create -n obspy python=3.5 anaconda $ source activate obspy $ (obspy) conda install -c conda-forge obspy $ (obspy) conda update -c conda-forge obspy $ (obspy) obspy-runtests Another approach, adding conda-forge to list of channels $ conda config --add channels conda-forge $ conda config --add channels obspy $ conda install obspy $ conda update obspy $ obspy-runtests Other packages installed (using conda, pip, or others) $ pip install eqcorrscan Other packages to install To fix this error while running obspy-runtests: OSError: Unable to open boundary dataset file. Only the 'crude' and 'low', resolution datasets are installed by default. If you are requesting an, 'intermediate', 'high' or 'full' resolution dataset, you may need to download and install those files separately with conda install -c conda-forge basemap-data-hires . $ conda install -c conda-forge mtspec The following NEW packages will be INSTALLED: libgfortran: 3.0.0-0 conda-forge mtspec: 0.3.2-py35_1 conda-forge Other packages installed in obspy environment: $ cd LOKI-LOCATOR $ mk_anaconda.sh $ python installation.py install $ cd LatLongUTMconversion_python3/ $ python setup.py install","title":"Installation of ObsPy"},{"location":"seismology/obspy/#check-if-filedirectory-exists","text":"import os os.path.isfile(\"file\") # True for regular file, False for directory! os.path.isdir(\"directory\") os.path.exists(\"file_or_directory\") # True for existing file or directory","title":"Check if file/directory exists"},{"location":"seismology/obspy/#write-to-stdout-and-stderr","text":"sys.stdout.write(\"message\\n\") sys.stderr.write(\"error\\n\")","title":"Write to stdout and stderr"},{"location":"seismology/obspy/#read-a-text-file-in-python-see-python-cookbook-page-141","text":"Read the entire file as a single string with open('somefile.txt', 'rt') as f: data = f.read() Iterate over the lines of the file with open('somefile.txt', 'rt') as f: for line in f: to split line in columns: columns = line.split()","title":"Read a text file in Python (see Python Cookbook, page 141)"},{"location":"seismology/obspy/#formatted-print","text":"Comprehensive documentation and examples in: https://pyformat.info print('format string'.format(variable1, variable2, variable3, ...)) example of format string: print('{0:6} {1:03d} {2:07.4f}'.format('PAB', 5, 3.4)) PAB 005 03.4000","title":"Formatted print"},{"location":"seismology/obspy/#run-an-external-command-in-python","text":"import subprocess subprocess.call('ls') subprocess.call(['ls', '-l']) -> writes to stdout output_str = subprocess.check_output(['ls', '-l']) -> writes to string \"output_str\" Options of subprocess.call: stdin=None -> redirects input from a file or an open pipe stdout=None -> redirects output to a file stderr=None shell=False -> sends command to the UNIX shell (to use shell shortcuts and optimizations, e.g. wildcards) then string is only one: 'ls *.py'","title":"Run an external command in Python"},{"location":"seismology/obspy/#making-day-plots","text":"from obspy import read from obspy.core import UTCDateTime (if you are going to operate with time strings) st = read(\"DD.D006..HHZ.D.2016.234\") st.plot(type=\"dayplot\", outfile=\"DD.D006..HHZ.D.2016.234.raw.png\") st.filter(\"bandpass\", freqmin=3, freqmax=15, corners=3) st.plot(type=\"dayplot\", outfile=\"DD.D006..HHZ.D.2016.235.filtered.png\") st.plot(type=\"dayplot\", outfile=\"DD.D044..HHZ.D.2016.267.filtered.png\", starttime=UTCDateTime(\"2016-09-23T07:00:00.0Z\"), # set start time (exclude installation) show_y_UTC_label=False, # eliminate ugly \"local time\" label size=(2000,1200), # doubles the size of \"dayplot\" plot vertical_scaling_range=5.0E2) # clip largest signal More options in: http://docs.obspy.org/packages/autogen/obspy.core.stream.Stream.plot.html#obspy.core.stream.Stream.plot","title":"Making day plots"},{"location":"seismology/obspy/#checking-for-data-availability-using-obspy-scan","text":"$ obspy-scan path = scan contents of all files in directory \"path\" and generates an interactive plot $ obspy-scan --no-x 2016/DD/*/*Z.D produces an interactive plot only for vertical components does not plot an x for the start time of each data file $ obspy-scan --no-x --print-gaps -o 2016.pdf 2016 > 2016.gaps produces a pdf file instead of an interactive plot writes gaps to stdout does not plot an x for the start time of each data file","title":"Checking for data availability using obspy-scan"},{"location":"seismology/seisan/","text":"SEISAN SEISAN directories COM Shell and bat scripts to define variables INC Include files INF Documentation (pdf files) ISO ?? (macro files) LIB Libraries (and its source code) PIC Pictures (used?) PRO Executables and source code SUP Supplementary programs (dataselect and SE) TMP empty CAL Instrument responses DAT Parameter files REA Phase data WAV Waveform data WOR SEISAN installation on Linux SEISAN 10.5 Installation on xlr8 (Ubuntu 16.04 LTS) Edit SEISAN.bash and add it to .bashrc $ source .bashrc # for changes to take place Compile libraries $ cd $SEISAN_TOP $ cd LIB $ make clean $ make all > make.log 2>&1 Compile programs $ pr $ make clean $ make all > make.log 2>&1 Re-create IASP91 tables $ wo $ remodl $ setbrn $ cp IASP91_linux.* ../DAT/. Run test events $ eev 199606 Installation of SEISAN 10.0 in Linux Edit /data/seismo/COM/SEISAN.csh SEISAN_TOP comment PITSA variables comment LD_LIBRARY_PATH comment path (add $SEISAN_TOP/PRO in .cshrc) Go to $SEISAN_TOP/LIB and edit Makefile Eliminate -fbounds-check option fc_gfortran = gfortran -g -c -I../INC -fdollar-ok -fno-automatic -o $@ #fc_gfortran = gfortran -g -c -I../INC -fdollar-ok -fbounds-check -fno-automatic -o $@ % make clean Go to $SEISAN_TOP/PRO and edit Makefile Eliminate -fbounds-check option fc_gfortran = gfortran -g -I../INC -fdollar-ok -fno-automatic -o $@ #fc_gfortran = gfortran -g -I../INC -fdollar-ok -fbounds-check -fno-automatic -o $@ Change INSTALL_PRO_PATH (needed?) INSTALL_PRO_PATH = /data/seismo/PRO % make clean % make all >&! log & % tail -f log Install Seisan Explorer Install qt4-make qt4-dev-tools with Synaptic % cp $SEISAN_TOP/LIB/seisan.a linux/. % qmake se.pro (creates Makefile) % make >&! log & [does not work!!] SEISAN for Dehdasht SEISAN for processing DehDasth data Set continuous data in arclink directory structure Get station coordinates and format them in HYP format: D0063045.23N 5028.63E 0 (not processed!!!) D0293043.69N 5033.91E 754 D0493047.22N 5032.94E 828 D0553042.69N 5038.32E 848 D0693053.64N 5029.77E 963 D0733050.46N 5033.17E 905 D0783046.53N 5037.44E 806 D0813044.18N 5040.46E 814 D0913047.31N 5038.41E 847 D0953055.27N 5031.62E 875 D0983052.78N 5034.19E 941 D1043048.01N 5039.30E 852 D1073045.66N 5041.85E 827 Edit configuration files STATION0.HYP, SEISAN.DEF, MULPLT.DEF IMPORTANT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! When editing SEISAN.DEF and MULPLT.DEF use FLOATING POINT values, NO integer values. Most of the errors are caused by using integer values instead of floating point values. If something does not work, check this first!!! Write values starting at column 41 3.1. STATION0.HYP change station list change 1D velocity model (once one is available) 3.2. SEISAN.DEF Define the location of the arclink directory and all the stations/channels ARC_ARCHIVE /scratch/DehDasht ARC_CHAN D006 HHEDD ARC_CHAN D006 HHNDD ARC_CHAN D006 HHZDD ARC_CHAN D029 HHEDD ... ARC_DURATION 300.0 Set cursor to cross-hair: CURSOR 0: default, 1: cross 2. Set map default dimensions and plot stations MAP_LAT_BORDER dist from center 2.0 MAP_LON_BORDER \" 2.0 EPIMAP_STATIONS plot stations 1. 3.3. MULPLT.DEF Set keys for assigning weights (depends on keyboard!!!) PHASE WEIGHT KEY = 0 PHASE WEIGHT KEY ! 1 PHASE WEIGHT KEY \" 2 PHASE WEIGHT KEY % 3 PHASE WEIGHT KEY $ 4 (weight 3 assigned pressing SHIFT + 5 !!!) Sort seismograms by distance: NSORT_DISTANCE 0: no sort, min ph. 1. Change number of channels per screen when doing manual picking NCHAN PER SCREEN # chan pr screen 3. Visually inspect continuous data First un-comment NCHAN PER SCREEN in MULPLT.DEF $ mulplt Filename, number, filenr.lis (all) Continuous SEISAN data base: cont Large SEED volume: conts Archive: arc Make a choice arc Give start time, yyyymmddhhmmss 20160822 Interval in min 15 [ select ALL with cursor ] Plot options: Interactive picking Return Multi trace plot on screen, def (0) Multi trace plot on screen (1) Multi trace plot on screen+laser(2) Multi trace plot on laser (3) Continuoues on screen (4) Continuoues on screen + laser (5) Continuoues on laser (6) Stop (q) 0 Low and high cut for filter, return for no filter 3 15 [ press \"f\" no move to next screen; click to zoom; \"p\" to save segment ] ENTER EVENT TYPE L,R OR D Second. optional character for event ID (e.g. E) Third optional character for model ID (e.g. J) L Give operator code (max 4 char) avh Give 2-5 letter data base, ,, for local dir, return for default base ,, Output channels on screen: s No output, just register: n No output, just ARC line: a Output all channels: enter a S-file name: 22-0100-10L.S201608 GO AHEAD (Y/N) y Continue plot(y/n=default) y Other parameters GMAP_ICON_MSIZE 3.0 (so events with M=0 are visible)","title":"SEISAN"},{"location":"seismology/seisan/#seisan","text":"","title":"SEISAN"},{"location":"seismology/seisan/#seisan-directories","text":"COM Shell and bat scripts to define variables INC Include files INF Documentation (pdf files) ISO ?? (macro files) LIB Libraries (and its source code) PIC Pictures (used?) PRO Executables and source code SUP Supplementary programs (dataselect and SE) TMP empty CAL Instrument responses DAT Parameter files REA Phase data WAV Waveform data WOR","title":"SEISAN directories"},{"location":"seismology/seisan/#seisan-installation-on-linux","text":"SEISAN 10.5 Installation on xlr8 (Ubuntu 16.04 LTS) Edit SEISAN.bash and add it to .bashrc $ source .bashrc # for changes to take place Compile libraries $ cd $SEISAN_TOP $ cd LIB $ make clean $ make all > make.log 2>&1 Compile programs $ pr $ make clean $ make all > make.log 2>&1 Re-create IASP91 tables $ wo $ remodl $ setbrn $ cp IASP91_linux.* ../DAT/. Run test events $ eev 199606","title":"SEISAN installation on Linux"},{"location":"seismology/seisan/#installation-of-seisan-100-in-linux","text":"Edit /data/seismo/COM/SEISAN.csh SEISAN_TOP comment PITSA variables comment LD_LIBRARY_PATH comment path (add $SEISAN_TOP/PRO in .cshrc) Go to $SEISAN_TOP/LIB and edit Makefile Eliminate -fbounds-check option fc_gfortran = gfortran -g -c -I../INC -fdollar-ok -fno-automatic -o $@ #fc_gfortran = gfortran -g -c -I../INC -fdollar-ok -fbounds-check -fno-automatic -o $@ % make clean Go to $SEISAN_TOP/PRO and edit Makefile Eliminate -fbounds-check option fc_gfortran = gfortran -g -I../INC -fdollar-ok -fno-automatic -o $@ #fc_gfortran = gfortran -g -I../INC -fdollar-ok -fbounds-check -fno-automatic -o $@ Change INSTALL_PRO_PATH (needed?) INSTALL_PRO_PATH = /data/seismo/PRO % make clean % make all >&! log & % tail -f log Install Seisan Explorer Install qt4-make qt4-dev-tools with Synaptic % cp $SEISAN_TOP/LIB/seisan.a linux/. % qmake se.pro (creates Makefile) % make >&! log & [does not work!!]","title":"Installation of SEISAN 10.0 in Linux"},{"location":"seismology/seisan/#seisan-for-dehdasht","text":"SEISAN for processing DehDasth data Set continuous data in arclink directory structure Get station coordinates and format them in HYP format: D0063045.23N 5028.63E 0 (not processed!!!) D0293043.69N 5033.91E 754 D0493047.22N 5032.94E 828 D0553042.69N 5038.32E 848 D0693053.64N 5029.77E 963 D0733050.46N 5033.17E 905 D0783046.53N 5037.44E 806 D0813044.18N 5040.46E 814 D0913047.31N 5038.41E 847 D0953055.27N 5031.62E 875 D0983052.78N 5034.19E 941 D1043048.01N 5039.30E 852 D1073045.66N 5041.85E 827 Edit configuration files STATION0.HYP, SEISAN.DEF, MULPLT.DEF IMPORTANT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! When editing SEISAN.DEF and MULPLT.DEF use FLOATING POINT values, NO integer values. Most of the errors are caused by using integer values instead of floating point values. If something does not work, check this first!!! Write values starting at column 41 3.1. STATION0.HYP change station list change 1D velocity model (once one is available) 3.2. SEISAN.DEF Define the location of the arclink directory and all the stations/channels ARC_ARCHIVE /scratch/DehDasht ARC_CHAN D006 HHEDD ARC_CHAN D006 HHNDD ARC_CHAN D006 HHZDD ARC_CHAN D029 HHEDD ... ARC_DURATION 300.0 Set cursor to cross-hair: CURSOR 0: default, 1: cross 2. Set map default dimensions and plot stations MAP_LAT_BORDER dist from center 2.0 MAP_LON_BORDER \" 2.0 EPIMAP_STATIONS plot stations 1. 3.3. MULPLT.DEF Set keys for assigning weights (depends on keyboard!!!) PHASE WEIGHT KEY = 0 PHASE WEIGHT KEY ! 1 PHASE WEIGHT KEY \" 2 PHASE WEIGHT KEY % 3 PHASE WEIGHT KEY $ 4 (weight 3 assigned pressing SHIFT + 5 !!!) Sort seismograms by distance: NSORT_DISTANCE 0: no sort, min ph. 1. Change number of channels per screen when doing manual picking NCHAN PER SCREEN # chan pr screen 3. Visually inspect continuous data First un-comment NCHAN PER SCREEN in MULPLT.DEF $ mulplt Filename, number, filenr.lis (all) Continuous SEISAN data base: cont Large SEED volume: conts Archive: arc Make a choice arc Give start time, yyyymmddhhmmss 20160822 Interval in min 15 [ select ALL with cursor ] Plot options: Interactive picking Return Multi trace plot on screen, def (0) Multi trace plot on screen (1) Multi trace plot on screen+laser(2) Multi trace plot on laser (3) Continuoues on screen (4) Continuoues on screen + laser (5) Continuoues on laser (6) Stop (q) 0 Low and high cut for filter, return for no filter 3 15 [ press \"f\" no move to next screen; click to zoom; \"p\" to save segment ] ENTER EVENT TYPE L,R OR D Second. optional character for event ID (e.g. E) Third optional character for model ID (e.g. J) L Give operator code (max 4 char) avh Give 2-5 letter data base, ,, for local dir, return for default base ,, Output channels on screen: s No output, just register: n No output, just ARC line: a Output all channels: enter a S-file name: 22-0100-10L.S201608 GO AHEAD (Y/N) y Continue plot(y/n=default) y Other parameters GMAP_ICON_MSIZE 3.0 (so events with M=0 are visible)","title":"SEISAN for Dehdasht"},{"location":"tools/cmake/","text":"CMake Python: needed for testing (?) BLAS and LAPACK MPI (OpenMPI) Eigen linear algebra template library Boost libraries (Filesystem, Python & Test) Eigen $ cd $ cd src $ mkdir -p eigen $ curl -Ls http://bitbucket.org/eigen/eigen/get/3.3.4.tar.gz | tar -xz -C eigen --strip-components=1 $ CC=gcc FC=gfortran cmake -H. -Bbuild_eigen -DCMAKE_INSTALL_PREFIX=\"$HOME/src/eigen\" [lots of warning, errors?] Get information: $ cmake --help $ cmake --build . --target help $ cmake --system-information [logfile] # lots of output, so better write to a file $ cmake --build build_eigen -- install > install.log 2> install.err Generators: Makefiles, Ninja, Visual Studio, ... $ cmake --help . . . Generators The following generators are available on this platform: Unix Makefiles = Generates standard UNIX makefiles. Ninja = Generates build.ninja files. Xcode = Generate Xcode project files. CodeBlocks - Ninja = Generates CodeBlocks project files. CodeBlocks - Unix Makefiles = Generates CodeBlocks project files. CodeLite - Ninja = Generates CodeLite project files. CodeLite - Unix Makefiles = Generates CodeLite project files. Sublime Text 2 - Ninja = Generates Sublime Text 2 project files. Sublime Text 2 - Unix Makefiles = Generates Sublime Text 2 project files. Kate - Ninja = Generates Kate project files. Kate - Unix Makefiles = Generates Kate project files. Eclipse CDT4 - Ninja = Generates Eclipse CDT 4.0 project files. Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files. Minimum CMakeLists.txt : cmake_minimum_required(VERSION 3.5 FATAL_ERROR) project(test_project LANGUAGES CXX) add_executable(hello-world hello-world.cpp) Commands for \"in-source\" build: $ cmake . $ cmake --build . Commands for \"out-of-source\" build: $ mkdir -p build && cd build $ cmake .. $ cmake --build . [non-standard alternative from \"root\" directory: $ cmake -H. -Bbuild ] Options for \"build\" $ cmake --build . --target help The following are some of the valid targets for this Makefile: ... all (the default if no target is provided) ... clean ... depend ... rebuild_cache ... edit_cache ... getjul # this is one of the executables defined in CMakeLists.txt [for more advanced projects, also \"test\", \"install\", and \"package\" ] How to invoke explicitly a generator: $ cmake -G Ninja .. Link with a static library: add_library(library_name STATIC header_files.hpp source_files.cpp) target_link_libraries(executable library_name) Build directory will contain: lib{library_name}.a Possible values: STATIC SHARED OBJECT MODULE IMPORTED = a library located outside the project (e.g. FFTW3?) INTERFACE ALIAS Define, set and output variables: set(USE_LIBRARY OFF) message(STATUS \"Compile sources into a library? ${USE_LIBRARY}\") message(\"Compile sources into a library? ${USE_LIBRARY}\") $ cmake . . . . -- Detecting CXX compile features -- Detecting CXX compile features - done -- Compile sources into a library? OFF Compile sources into a library? OFF -- Configuring done -- Generating done ... Specifying compiler: $ cmake -D CMAKE_CXX_COMPILER=clang++ ... # recommended !!! or $ env CXX=clang++ cmake ... but also inside CMakeLists.txt set(CMAKE_CXX_COMPILER \"/usr/local/bin/g++\") # before defining project!!! Build types: Debug, Release, RelWithDebInfo, MinSizeRel set(CMAKE_BUILD_TYPE Debug) or $ cmake -D CMAKE_BUILD_TYPE=Debug ... Set compiler and compiler options: OPTIONS: list(APPEND flags \"-fPIC\" \"-Wall\") add_library(library_name STATIC header_files.hpp source_files.cpp) target_compile_options(library_name PRIVATE ${flags}) target_compile_options(execuatable_name PRIVATE \"-fPIC\") target_link_libraries(executable_name library_name) set_target_properties(animals PROPERTIES CXX_STANDARD 14 CXX_EXTENSIONS OFF CXX_STANDARD_REQUIRED ON POSITION_INDEPENDENT_CODE 1) also set(CMAKE_CXX_STANDARD 11) set(CMAKE_CXX_EXTENSIONS OFF) set(CMAKE_CXX_STANDARD_REQUIRED ON) Discovering system information: Compiler ID Processor architecture Processor instruction set message(STATUS \"Configuring on/for ${CMAKE_SYSTEM_NAME}\") # must be after \"project\"!!! CMAKE_CXX_COMPILER_ID find_package(Eigen3 3.3 REQUIRED CONFIG)","title":"CMake"},{"location":"tools/cmake/#cmake","text":"Python: needed for testing (?) BLAS and LAPACK MPI (OpenMPI) Eigen linear algebra template library Boost libraries (Filesystem, Python & Test) Eigen $ cd $ cd src $ mkdir -p eigen $ curl -Ls http://bitbucket.org/eigen/eigen/get/3.3.4.tar.gz | tar -xz -C eigen --strip-components=1 $ CC=gcc FC=gfortran cmake -H. -Bbuild_eigen -DCMAKE_INSTALL_PREFIX=\"$HOME/src/eigen\" [lots of warning, errors?] Get information: $ cmake --help $ cmake --build . --target help $ cmake --system-information [logfile] # lots of output, so better write to a file $ cmake --build build_eigen -- install > install.log 2> install.err Generators: Makefiles, Ninja, Visual Studio, ... $ cmake --help . . . Generators The following generators are available on this platform: Unix Makefiles = Generates standard UNIX makefiles. Ninja = Generates build.ninja files. Xcode = Generate Xcode project files. CodeBlocks - Ninja = Generates CodeBlocks project files. CodeBlocks - Unix Makefiles = Generates CodeBlocks project files. CodeLite - Ninja = Generates CodeLite project files. CodeLite - Unix Makefiles = Generates CodeLite project files. Sublime Text 2 - Ninja = Generates Sublime Text 2 project files. Sublime Text 2 - Unix Makefiles = Generates Sublime Text 2 project files. Kate - Ninja = Generates Kate project files. Kate - Unix Makefiles = Generates Kate project files. Eclipse CDT4 - Ninja = Generates Eclipse CDT 4.0 project files. Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files. Minimum CMakeLists.txt : cmake_minimum_required(VERSION 3.5 FATAL_ERROR) project(test_project LANGUAGES CXX) add_executable(hello-world hello-world.cpp) Commands for \"in-source\" build: $ cmake . $ cmake --build . Commands for \"out-of-source\" build: $ mkdir -p build && cd build $ cmake .. $ cmake --build . [non-standard alternative from \"root\" directory: $ cmake -H. -Bbuild ] Options for \"build\" $ cmake --build . --target help The following are some of the valid targets for this Makefile: ... all (the default if no target is provided) ... clean ... depend ... rebuild_cache ... edit_cache ... getjul # this is one of the executables defined in CMakeLists.txt [for more advanced projects, also \"test\", \"install\", and \"package\" ] How to invoke explicitly a generator: $ cmake -G Ninja .. Link with a static library: add_library(library_name STATIC header_files.hpp source_files.cpp) target_link_libraries(executable library_name) Build directory will contain: lib{library_name}.a Possible values: STATIC SHARED OBJECT MODULE IMPORTED = a library located outside the project (e.g. FFTW3?) INTERFACE ALIAS Define, set and output variables: set(USE_LIBRARY OFF) message(STATUS \"Compile sources into a library? ${USE_LIBRARY}\") message(\"Compile sources into a library? ${USE_LIBRARY}\") $ cmake . . . . -- Detecting CXX compile features -- Detecting CXX compile features - done -- Compile sources into a library? OFF Compile sources into a library? OFF -- Configuring done -- Generating done ... Specifying compiler: $ cmake -D CMAKE_CXX_COMPILER=clang++ ... # recommended !!! or $ env CXX=clang++ cmake ... but also inside CMakeLists.txt set(CMAKE_CXX_COMPILER \"/usr/local/bin/g++\") # before defining project!!! Build types: Debug, Release, RelWithDebInfo, MinSizeRel set(CMAKE_BUILD_TYPE Debug) or $ cmake -D CMAKE_BUILD_TYPE=Debug ... Set compiler and compiler options: OPTIONS: list(APPEND flags \"-fPIC\" \"-Wall\") add_library(library_name STATIC header_files.hpp source_files.cpp) target_compile_options(library_name PRIVATE ${flags}) target_compile_options(execuatable_name PRIVATE \"-fPIC\") target_link_libraries(executable_name library_name) set_target_properties(animals PROPERTIES CXX_STANDARD 14 CXX_EXTENSIONS OFF CXX_STANDARD_REQUIRED ON POSITION_INDEPENDENT_CODE 1) also set(CMAKE_CXX_STANDARD 11) set(CMAKE_CXX_EXTENSIONS OFF) set(CMAKE_CXX_STANDARD_REQUIRED ON) Discovering system information: Compiler ID Processor architecture Processor instruction set message(STATUS \"Configuring on/for ${CMAKE_SYSTEM_NAME}\") # must be after \"project\"!!! CMAKE_CXX_COMPILER_ID find_package(Eigen3 3.3 REQUIRED CONFIG)","title":"CMake"},{"location":"tools/docker/","text":"Docker Install Docker Desktop. Download dmg and install. Run tutorial: $ cd $ mkdir Docker $ cd Docker $ git clone https://github.com/docker/getting-started.git $ cd getting-started $ docker build -t docker101tutorial . $ docker run -d -p 80:80 --name docker-tutorial docker101tutorial $ docker tag docker101tutorial avillasenorh/docker101tutorial $ docker push avillasenorh/docker101tutorial Login to dockerhub Docker course/book $ git clone https://github.com/docker/doodle.git $ cd doodle/cheers2019 && docker build -t avillasenorh/cheers2019 . $ docker run -it --rm avillasenorh/cheers2019 $ docker login && docker push avillasenorh/cheers2019 $ docker version ... $ docker --version $ docker-compose --version $ docker-machine --version $ notary version $ docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE avillasenorh/cheers2019 latest 415686aae5f6 4 days ago 4.01MB <none> <none> 7702daeafbab 4 days ago 356MB golang 1.11-alpine e116d2efa2ab 3 months ago 312MB $ docker system info Client: Debug Mode: false Server: Containers: 0 Running: 0 Paused: 0 Stopped: 0 Images: 8 Server Version: 19.03.4 Storage Driver: overlay2 !!!!!!!!! storage driver used (good for Ubuntu, RH >= 4.x) Backing Filesystem: extfs Supports d_type: true Native Overlay Diff: true Logging Driver: json-file Cgroup Driver: cgroupfs Plugins: Volume: local Network: bridge host ipvlan macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog Swarm: inactive Runtimes: runc Default Runtime: runc Init Binary: docker-init containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339 runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657 init version: fec3683 Security Options: seccomp Profile: default Kernel Version: 4.9.184-linuxkit Operating System: Docker Desktop OSType: linux Architecture: x86_64 CPUs: 2 Total Memory: 1.952GiB Name: docker-desktop ID: HN4Y:T3NM:PXHK:Y6X5:XW7H:ZFCX:FPUS:5BZZ:KLER:24WB:6EFH:B6BS Docker Root Dir: /var/lib/docker Debug Mode: true File Descriptors: 30 Goroutines: 46 System Time: 2019-11-21T10:47:33.8906462Z EventsListeners: 2 HTTP Proxy: gateway.docker.internal:3128 HTTPS Proxy: gateway.docker.internal:3129 Registry: https://index.docker.io/v1/ Labels: Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false Product License: Community Engine $ docker pull ubuntu:latest latest: Pulling from library/ubuntu 7ddbc47eeb70: Pull complete c1bbdc448b72: Pull complete 8c3b70e39044: Pull complete 45d437916d57: Pull complete Digest: sha256:6e9f67fa63b0323e9a1e587fd71c561ba48a034504fb804fd26fd8800039835d Status: Downloaded newer image for ubuntu:latest docker.io/library/ubuntu:latest $ docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE avillasenorh/cheers2019 latest 415686aae5f6 4 days ago 4.01MB <none> <none> 7702daeafbab 4 days ago 356MB ubuntu latest 775349758637 2 weeks ago 64.2MB golang 1.11-alpine e116d2efa2ab 3 months ago 312MB $ docker container run -it ubuntu:latest /bin/bash root@dc672cdb77cc:/# ps -elf F S UID PID PPID C PRI NI ADDR SZ WCHAN STIME TTY TIME CMD 4 S root 1 0 0 80 0 - 4626 - 11:01 pts/0 00:00:00 /bin/bash 0 R root 13 1 0 80 0 - 8599 - 11:05 pts/0 00:00:00 ps -elf -it flag switchs your shell into the terminal of the container control + P + Q (p and q in sequence, not simultaneously): exits the container without terminating it (back to shell of host machine) $ docker container ls # shows processes running inside container CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES dc672cdb77cc ubuntu:latest \"/bin/bash\" 8 minutes ago Up 8 minutes trusting_chandrasekhar To enter again: $ docker container exec -it trusting_chandrasekhar bash root@dc672cdb77cc:/# ps -elf F S UID PID PPID C PRI NI ADDR SZ WCHAN STIME TTY TIME CMD 4 S root 1 0 0 80 0 - 4626 - 11:01 pts/0 00:00:00 /bin/bash 4 S root 14 0 0 80 0 - 4626 - 11:14 pts/1 00:00:00 bash 0 R root 23 14 0 80 0 - 8599 - 11:14 pts/1 00:00:00 ps -elf control + P + Q again To stop container: $ docker container stop trusting_chandrasekhar $ docker container rm trusting_chandrasekhar $ docker container ls -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES EXAMPLE $ git clone https://github.com/nigelpoulton/psweb.git $ cd psweb/ $ cat Dockerfile $ docker image build -t test:latest . $ $ docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE test latest ac4605aff0f1 About a minute ago 71.5MB avillasenorh/cheers2019 latest 415686aae5f6 4 days ago 4.01MB <none> <none> 7702daeafbab 4 days ago 356MB ubuntu latest 775349758637 2 weeks ago 64.2MB alpine latest 965ea09ff2eb 4 weeks ago 5.55MB golang 1.11-alpine e116d2efa2ab 3 months ago 312MB $ docker container run -d --name web1 --publish 8080:8080 test:latest X-windows applications in Docker Example of how to create an image with Firefox and send the display to macOS host running X-windows: Dockerfile : FROM ubuntu:latest RUN apt-get update && \\ apt-get install firefox -y CMD /usr/bin/firefox To create the Docker image named myfirefox from the Dockerfile , go to the directory of the Dockerfile and type: $ docker build -t myfirefox . Set \"Allow connections from network clients\" in XQuartz Preferences (Security tab): (Probably you need to logout and login again to activate changes) How to run: $ xhost + 127.0.0.1 # authorize connetions only from localhost (also known as loopback address) $ docker run --rm -d -e DISPLAY=host.docker.internal:0 myfirefox","title":"Docker"},{"location":"tools/docker/#docker","text":"Install Docker Desktop. Download dmg and install. Run tutorial: $ cd $ mkdir Docker $ cd Docker $ git clone https://github.com/docker/getting-started.git $ cd getting-started $ docker build -t docker101tutorial . $ docker run -d -p 80:80 --name docker-tutorial docker101tutorial $ docker tag docker101tutorial avillasenorh/docker101tutorial $ docker push avillasenorh/docker101tutorial Login to dockerhub Docker course/book $ git clone https://github.com/docker/doodle.git $ cd doodle/cheers2019 && docker build -t avillasenorh/cheers2019 . $ docker run -it --rm avillasenorh/cheers2019 $ docker login && docker push avillasenorh/cheers2019 $ docker version ... $ docker --version $ docker-compose --version $ docker-machine --version $ notary version $ docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE avillasenorh/cheers2019 latest 415686aae5f6 4 days ago 4.01MB <none> <none> 7702daeafbab 4 days ago 356MB golang 1.11-alpine e116d2efa2ab 3 months ago 312MB $ docker system info Client: Debug Mode: false Server: Containers: 0 Running: 0 Paused: 0 Stopped: 0 Images: 8 Server Version: 19.03.4 Storage Driver: overlay2 !!!!!!!!! storage driver used (good for Ubuntu, RH >= 4.x) Backing Filesystem: extfs Supports d_type: true Native Overlay Diff: true Logging Driver: json-file Cgroup Driver: cgroupfs Plugins: Volume: local Network: bridge host ipvlan macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog Swarm: inactive Runtimes: runc Default Runtime: runc Init Binary: docker-init containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339 runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657 init version: fec3683 Security Options: seccomp Profile: default Kernel Version: 4.9.184-linuxkit Operating System: Docker Desktop OSType: linux Architecture: x86_64 CPUs: 2 Total Memory: 1.952GiB Name: docker-desktop ID: HN4Y:T3NM:PXHK:Y6X5:XW7H:ZFCX:FPUS:5BZZ:KLER:24WB:6EFH:B6BS Docker Root Dir: /var/lib/docker Debug Mode: true File Descriptors: 30 Goroutines: 46 System Time: 2019-11-21T10:47:33.8906462Z EventsListeners: 2 HTTP Proxy: gateway.docker.internal:3128 HTTPS Proxy: gateway.docker.internal:3129 Registry: https://index.docker.io/v1/ Labels: Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false Product License: Community Engine $ docker pull ubuntu:latest latest: Pulling from library/ubuntu 7ddbc47eeb70: Pull complete c1bbdc448b72: Pull complete 8c3b70e39044: Pull complete 45d437916d57: Pull complete Digest: sha256:6e9f67fa63b0323e9a1e587fd71c561ba48a034504fb804fd26fd8800039835d Status: Downloaded newer image for ubuntu:latest docker.io/library/ubuntu:latest $ docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE avillasenorh/cheers2019 latest 415686aae5f6 4 days ago 4.01MB <none> <none> 7702daeafbab 4 days ago 356MB ubuntu latest 775349758637 2 weeks ago 64.2MB golang 1.11-alpine e116d2efa2ab 3 months ago 312MB $ docker container run -it ubuntu:latest /bin/bash root@dc672cdb77cc:/# ps -elf F S UID PID PPID C PRI NI ADDR SZ WCHAN STIME TTY TIME CMD 4 S root 1 0 0 80 0 - 4626 - 11:01 pts/0 00:00:00 /bin/bash 0 R root 13 1 0 80 0 - 8599 - 11:05 pts/0 00:00:00 ps -elf -it flag switchs your shell into the terminal of the container control + P + Q (p and q in sequence, not simultaneously): exits the container without terminating it (back to shell of host machine) $ docker container ls # shows processes running inside container CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES dc672cdb77cc ubuntu:latest \"/bin/bash\" 8 minutes ago Up 8 minutes trusting_chandrasekhar To enter again: $ docker container exec -it trusting_chandrasekhar bash root@dc672cdb77cc:/# ps -elf F S UID PID PPID C PRI NI ADDR SZ WCHAN STIME TTY TIME CMD 4 S root 1 0 0 80 0 - 4626 - 11:01 pts/0 00:00:00 /bin/bash 4 S root 14 0 0 80 0 - 4626 - 11:14 pts/1 00:00:00 bash 0 R root 23 14 0 80 0 - 8599 - 11:14 pts/1 00:00:00 ps -elf control + P + Q again To stop container: $ docker container stop trusting_chandrasekhar $ docker container rm trusting_chandrasekhar $ docker container ls -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES EXAMPLE $ git clone https://github.com/nigelpoulton/psweb.git $ cd psweb/ $ cat Dockerfile $ docker image build -t test:latest . $ $ docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE test latest ac4605aff0f1 About a minute ago 71.5MB avillasenorh/cheers2019 latest 415686aae5f6 4 days ago 4.01MB <none> <none> 7702daeafbab 4 days ago 356MB ubuntu latest 775349758637 2 weeks ago 64.2MB alpine latest 965ea09ff2eb 4 weeks ago 5.55MB golang 1.11-alpine e116d2efa2ab 3 months ago 312MB $ docker container run -d --name web1 --publish 8080:8080 test:latest","title":"Docker"},{"location":"tools/docker/#x-windows-applications-in-docker","text":"Example of how to create an image with Firefox and send the display to macOS host running X-windows: Dockerfile : FROM ubuntu:latest RUN apt-get update && \\ apt-get install firefox -y CMD /usr/bin/firefox To create the Docker image named myfirefox from the Dockerfile , go to the directory of the Dockerfile and type: $ docker build -t myfirefox . Set \"Allow connections from network clients\" in XQuartz Preferences (Security tab): (Probably you need to logout and login again to activate changes) How to run: $ xhost + 127.0.0.1 # authorize connetions only from localhost (also known as loopback address) $ docker run --rm -d -e DISPLAY=host.docker.internal:0 myfirefox","title":"X-windows applications in Docker"},{"location":"tools/git/","text":"Git Includes git , GitHub , GitLab , and BitBucket . Initialization $ git config --global user.name \"Antonio Villasenor\" $ git config --global user.email \"antonio.villasenor@csic.es\" $ git config --global color.ui true Global .gitignore (in addition to .gitignore in each repository) $ vi ~/.gitignore $ git config --global core.excludesfile ~/.gitignore Save password for GitHub $ git config --global credential.helper store After entering for the first time GitHub username and password, this creates a .git-credentials file with this contents: https://avillasenorh:personal_access_token@github.com Configure BitBucket This is now outdated: Generate SSH key $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/Users/antonio/.ssh/id_rsa): Created directory '/Users/antonio/.ssh'. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/antonio/.ssh/id_rsa. Your public key has been saved in /Users/antonio/.ssh/id_rsa.pub. The key fingerprint is: SHA256:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX antonio@dhcp195.ictja.csic.es The key's randomart image is: +---[RSA 2048]----+ ... +----[SHA256]-----+ $ ls ~/.ssh id_rsa id_rsa.pub Preferences > BitBucket settings > SSH keys > Add Key Create a repository with existing source code in a new repository directory Go to GitHub web page and create the repository with a README.md and a .gitignore Go to ~/devel and clone the repository $ cd ~/devel $ git clone https://github.com/avillasenorh/repository This will create a directory called \u201crepository\u201d with README.md, .gitignore, and .git directory Copy source code to repository directory $ cd repository $ cp -r source_directory/* . $ git add -A $ git status $ git commit -m \u201cInitial commit of source code\u201d # local commit $ git push # send to remote repository (GitHub or Bitbucket) Create a repository with existing source code in existing source directory create a directory called first_repo and make it a repository to send it to GitHub: $ git remote add origin https://github.com/gforsyth/first_repo.git $ git push -u origin master Installation/configuration 2015-02-20 Install Git git-2.2.1-intel-universal-mavericks.dmg change path to include /usr/local/git/bin change path for applications not from command line: % setup git PATH for non-terminal programs.sh (creates ~/.MacOSX/environment.plist) $ git config --global user.name \"Antonio Villasenor\" $ git config --global user.email \"antonio.villasenor@csic.es\" $ git config --global color.ui true Install GitHub GitHub for Mac 199.zip (unzip and move GitHub.app to Applications folder) Open GitHub and login Install GitHub command line tools git config --global credential.helper osxkeychain This causes GitHub to send an email with SSH key: The following SSH key was added to your account: GitHub for Mac - Antonio\u2019s iMac b1:9e:c4:80:5b:d0:b7:1d:b4:ba:ac:6b:3a:7f:7d:b3 If you believe this key was added in error, you can remove the key and disable access at the following location: https://github.com/settings/ssh Now for example from GitHub application I can clone a repository existing in GitHub to my local disk (in directory ~/devel) How to work with Git/GitHub: $ git add . $ git commit -m \"First commit of let-utils repository\" [master (root-commit) 038747f] First commit of let-utils repository 1 file changed, 177 insertions(+) create mode 100644 init1d.c $ git clone https://github.com/avillasenorh/github-test.git $ cd github-test/ $ cp ~/src/util_LET/init1d.c . $ vi README.md $ git commit $ git add -A $ git commit -m \"First commit from local directory\" $ git push Installation/configuration 2014-12-23 MacBook Pro 15\" Retina OS X 10.9.5 (Mavericks) Old version of Git already available: which git /usr/bin/git git --version git version 1.9.3 (Apple Git-50) Download installer from http://git-scm.com/download/mac git-2.2.1-intel-universal-mavericks.dmg Add /usr/local/git/bin to $PATH in .cshrc $ which git /usr/local/git/bin/git $ git --version git version 2.2.1 $ git config --global user.name \"Antonio Villasenor\" $ git config --global user.email \"antonio@ictja.csic.es\" $ git config --global color.ui true Setup a GitHub account with same email address ssh-keygen -t rsa -C 'antonio@ictja.csic.es' Generating public/private rsa key pair. Enter file in which to save the key (/Users/antonio/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/antonio/.ssh/id_rsa. Your public key has been saved in /Users/antonio/.ssh/id_rsa.pub. The key fingerprint is: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX antonio@ictja.csic.es The key's randomart image is: +--[ RSA 2048]----+ | | +-----------------+ $ eval \"$(ssh-agent -s)\" Agent pid 35117 $ssh-add ~/.ssh/id_rsa Enter passphrase for /Users/antonio/.ssh/id_rsa: Identity added: /Users/antonio/.ssh/id_rsa (/Users/antonio/.ssh/id_rsa) $ cat ~/.ssh/id_rsa.pub ssh-rsa XXXXXXXXXXXXX $ cat ~/.ssh/id_rsa.pub | pbcopy Now go to GitHub web page and login to your account (avillasenorh) Go to Personal Settings page > SSH keys Add SSH key Enter a title: \"Antonio's MacBook Pro\" Paste clipboard (ssh key copied to clipboard using pbcopy) in \"Key\" Click on \"Add key\" To test that process worked, go back to terminal and type: $ ssh -T git@github.com Warning: Permanently added the RSA host key for IP address '192.30.252.129' to the list of known hosts. Hi avillasenorh! You've successfully authenticated, but GitHub does not provide shell access. $ git add . $ git commit -m \"First commit of let-utils repository\" [master (root-commit) 038747f] First commit of let-utils repository 1 file changed, 177 insertions(+) create mode 100644 init1d.c 75 16:14 git clone https://github.com/avillasenorh/github-test.git 76 16:14 ls 77 16:14 cd github-test/ 78 16:14 ls 79 16:14 git commit 80 16:14 h 81 16:14 cp ~/src/util_LET/init1d.c . 82 16:14 ls 83 16:14 vi README.md 84 16:15 git commit 85 16:15 git add -A 86 16:15 git commit 87 16:15 git commit 88 16:16 git commit -m \"First commit from local directory\" 89 16:18 git push MacBook Air which git /usr/bin/git 32 pcanto:/Users/antonio > git --version git version 1.9.3 (Apple Git-50) 33 pcanto:/Users/antonio > vi .cshrc 34 pcanto:/Users/antonio > source !$ source .cshrc 35 pcanto:/Users/antonio > git --version git version 2.2.1 36 pcanto:/Users/antonio > git config --global user.name \"Antonio Villasenor\" 37 pcanto:/Users/antonio > git config --global user.email \"antonio@ictja.csic.es\" 38 pcanto:/Users/antonio > git config --global color.ui true 39 pcanto:/Users/antonio > ssh-keygen -t rsa -C 'antonio@ictja.csic.es' Generating public/private rsa key pair. Enter file in which to save the key (/Users/antonio/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/antonio/.ssh/id_rsa. Your public key has been saved in /Users/antonio/.ssh/id_rsa.pub. The key fingerprint is: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX antonio@ictja.csic.es The key's randomart image is: +--[ RSA 2048]----+ | | +-----------------+ bash bash-3.2$ eval \"$(ssh-agent -s)\" Agent pid 79771 bash-3.2$ ssh-add ~/.ssh/id_rsa Enter passphrase for /Users/antonio/.ssh/id_rsa: Identity added: /Users/antonio/.ssh/id_rsa (/Users/antonio/.ssh/id_rsa) bash-3.2$ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3... bash-3.2$ cat ~/.ssh/id_rsa.pub | pbcopy bash-3.2$ ssh -T git@github.com The authenticity of host 'github.com (192.30.252.130)' can't be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'github.com,192.30.252.130' (RSA) to the list of known hosts. Hi avillasenorh! You've successfully authenticated, but GitHub does not provide shell access. Git/GitHub (old installation) https://help.github.com/articles/set-up-git Download and Install Git git-1.8.1.3-intel-universal-snow-leopard Username and email: $ git config --global user.name avillasenorh $ git config --global user.email avillasenorh@yahoo.es Password caching: $ git credential-osxkeychain git: 'credential-osxkeychain' is not a git command. See 'git --help'. $ curl -s -O http://github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain $ chmod u+x git-credential-osxkeychain $ sudo mv git-credential-osxkeychain /usr/bin $ git config --global credential.helper osxkeychain $ git credential-osxkeychain Usage: git credential-osxkeychain <get|store|erase>","title":"Git"},{"location":"tools/git/#git","text":"Includes git , GitHub , GitLab , and BitBucket .","title":"Git"},{"location":"tools/git/#initialization","text":"$ git config --global user.name \"Antonio Villasenor\" $ git config --global user.email \"antonio.villasenor@csic.es\" $ git config --global color.ui true","title":"Initialization"},{"location":"tools/git/#global-gitignore-in-addition-to-gitignore-in-each-repository","text":"$ vi ~/.gitignore $ git config --global core.excludesfile ~/.gitignore","title":"Global .gitignore (in addition to .gitignore in each repository)"},{"location":"tools/git/#save-password-for-github","text":"$ git config --global credential.helper store After entering for the first time GitHub username and password, this creates a .git-credentials file with this contents: https://avillasenorh:personal_access_token@github.com","title":"Save password for GitHub"},{"location":"tools/git/#configure-bitbucket","text":"This is now outdated: Generate SSH key $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/Users/antonio/.ssh/id_rsa): Created directory '/Users/antonio/.ssh'. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/antonio/.ssh/id_rsa. Your public key has been saved in /Users/antonio/.ssh/id_rsa.pub. The key fingerprint is: SHA256:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX antonio@dhcp195.ictja.csic.es The key's randomart image is: +---[RSA 2048]----+ ... +----[SHA256]-----+ $ ls ~/.ssh id_rsa id_rsa.pub Preferences > BitBucket settings > SSH keys > Add Key","title":"Configure BitBucket"},{"location":"tools/git/#create-a-repository-with-existing-source-code-in-a-new-repository-directory","text":"Go to GitHub web page and create the repository with a README.md and a .gitignore Go to ~/devel and clone the repository $ cd ~/devel $ git clone https://github.com/avillasenorh/repository This will create a directory called \u201crepository\u201d with README.md, .gitignore, and .git directory Copy source code to repository directory $ cd repository $ cp -r source_directory/* . $ git add -A $ git status $ git commit -m \u201cInitial commit of source code\u201d # local commit $ git push # send to remote repository (GitHub or Bitbucket)","title":"Create a repository with existing source code in a new repository directory"},{"location":"tools/git/#create-a-repository-with-existing-source-code-in-existing-source-directory","text":"create a directory called first_repo and make it a repository to send it to GitHub: $ git remote add origin https://github.com/gforsyth/first_repo.git $ git push -u origin master","title":"Create a repository with existing source code in existing source directory"},{"location":"tools/git/#installationconfiguration-2015-02-20","text":"Install Git git-2.2.1-intel-universal-mavericks.dmg change path to include /usr/local/git/bin change path for applications not from command line: % setup git PATH for non-terminal programs.sh (creates ~/.MacOSX/environment.plist) $ git config --global user.name \"Antonio Villasenor\" $ git config --global user.email \"antonio.villasenor@csic.es\" $ git config --global color.ui true Install GitHub GitHub for Mac 199.zip (unzip and move GitHub.app to Applications folder) Open GitHub and login Install GitHub command line tools git config --global credential.helper osxkeychain This causes GitHub to send an email with SSH key: The following SSH key was added to your account: GitHub for Mac - Antonio\u2019s iMac b1:9e:c4:80:5b:d0:b7:1d:b4:ba:ac:6b:3a:7f:7d:b3 If you believe this key was added in error, you can remove the key and disable access at the following location: https://github.com/settings/ssh Now for example from GitHub application I can clone a repository existing in GitHub to my local disk (in directory ~/devel) How to work with Git/GitHub: $ git add . $ git commit -m \"First commit of let-utils repository\" [master (root-commit) 038747f] First commit of let-utils repository 1 file changed, 177 insertions(+) create mode 100644 init1d.c $ git clone https://github.com/avillasenorh/github-test.git $ cd github-test/ $ cp ~/src/util_LET/init1d.c . $ vi README.md $ git commit $ git add -A $ git commit -m \"First commit from local directory\" $ git push","title":"Installation/configuration 2015-02-20"},{"location":"tools/git/#installationconfiguration-2014-12-23","text":"MacBook Pro 15\" Retina OS X 10.9.5 (Mavericks) Old version of Git already available: which git /usr/bin/git git --version git version 1.9.3 (Apple Git-50) Download installer from http://git-scm.com/download/mac git-2.2.1-intel-universal-mavericks.dmg Add /usr/local/git/bin to $PATH in .cshrc $ which git /usr/local/git/bin/git $ git --version git version 2.2.1 $ git config --global user.name \"Antonio Villasenor\" $ git config --global user.email \"antonio@ictja.csic.es\" $ git config --global color.ui true Setup a GitHub account with same email address ssh-keygen -t rsa -C 'antonio@ictja.csic.es' Generating public/private rsa key pair. Enter file in which to save the key (/Users/antonio/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/antonio/.ssh/id_rsa. Your public key has been saved in /Users/antonio/.ssh/id_rsa.pub. The key fingerprint is: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX antonio@ictja.csic.es The key's randomart image is: +--[ RSA 2048]----+ | | +-----------------+ $ eval \"$(ssh-agent -s)\" Agent pid 35117 $ssh-add ~/.ssh/id_rsa Enter passphrase for /Users/antonio/.ssh/id_rsa: Identity added: /Users/antonio/.ssh/id_rsa (/Users/antonio/.ssh/id_rsa) $ cat ~/.ssh/id_rsa.pub ssh-rsa XXXXXXXXXXXXX $ cat ~/.ssh/id_rsa.pub | pbcopy Now go to GitHub web page and login to your account (avillasenorh) Go to Personal Settings page > SSH keys Add SSH key Enter a title: \"Antonio's MacBook Pro\" Paste clipboard (ssh key copied to clipboard using pbcopy) in \"Key\" Click on \"Add key\" To test that process worked, go back to terminal and type: $ ssh -T git@github.com Warning: Permanently added the RSA host key for IP address '192.30.252.129' to the list of known hosts. Hi avillasenorh! You've successfully authenticated, but GitHub does not provide shell access. $ git add . $ git commit -m \"First commit of let-utils repository\" [master (root-commit) 038747f] First commit of let-utils repository 1 file changed, 177 insertions(+) create mode 100644 init1d.c 75 16:14 git clone https://github.com/avillasenorh/github-test.git 76 16:14 ls 77 16:14 cd github-test/ 78 16:14 ls 79 16:14 git commit 80 16:14 h 81 16:14 cp ~/src/util_LET/init1d.c . 82 16:14 ls 83 16:14 vi README.md 84 16:15 git commit 85 16:15 git add -A 86 16:15 git commit 87 16:15 git commit 88 16:16 git commit -m \"First commit from local directory\" 89 16:18 git push","title":"Installation/configuration 2014-12-23"},{"location":"tools/git/#macbook-air","text":"which git /usr/bin/git 32 pcanto:/Users/antonio > git --version git version 1.9.3 (Apple Git-50) 33 pcanto:/Users/antonio > vi .cshrc 34 pcanto:/Users/antonio > source !$ source .cshrc 35 pcanto:/Users/antonio > git --version git version 2.2.1 36 pcanto:/Users/antonio > git config --global user.name \"Antonio Villasenor\" 37 pcanto:/Users/antonio > git config --global user.email \"antonio@ictja.csic.es\" 38 pcanto:/Users/antonio > git config --global color.ui true 39 pcanto:/Users/antonio > ssh-keygen -t rsa -C 'antonio@ictja.csic.es' Generating public/private rsa key pair. Enter file in which to save the key (/Users/antonio/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/antonio/.ssh/id_rsa. Your public key has been saved in /Users/antonio/.ssh/id_rsa.pub. The key fingerprint is: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX antonio@ictja.csic.es The key's randomart image is: +--[ RSA 2048]----+ | | +-----------------+ bash bash-3.2$ eval \"$(ssh-agent -s)\" Agent pid 79771 bash-3.2$ ssh-add ~/.ssh/id_rsa Enter passphrase for /Users/antonio/.ssh/id_rsa: Identity added: /Users/antonio/.ssh/id_rsa (/Users/antonio/.ssh/id_rsa) bash-3.2$ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3... bash-3.2$ cat ~/.ssh/id_rsa.pub | pbcopy bash-3.2$ ssh -T git@github.com The authenticity of host 'github.com (192.30.252.130)' can't be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'github.com,192.30.252.130' (RSA) to the list of known hosts. Hi avillasenorh! You've successfully authenticated, but GitHub does not provide shell access.","title":"MacBook Air"},{"location":"tools/git/#gitgithub-old-installation","text":"https://help.github.com/articles/set-up-git Download and Install Git git-1.8.1.3-intel-universal-snow-leopard Username and email: $ git config --global user.name avillasenorh $ git config --global user.email avillasenorh@yahoo.es Password caching: $ git credential-osxkeychain git: 'credential-osxkeychain' is not a git command. See 'git --help'. $ curl -s -O http://github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain $ chmod u+x git-credential-osxkeychain $ sudo mv git-credential-osxkeychain /usr/bin $ git config --global credential.helper osxkeychain $ git credential-osxkeychain Usage: git credential-osxkeychain <get|store|erase>","title":"Git/GitHub (old installation)"},{"location":"tools/parallel/","text":"Parallel Simple run: a command that reads an argument: $ parallel echo ::: A B C B C A This is equivalent to: $ parallel echo {} ::: A B C $ parallel echo {1} ::: A B C parallel can also read 2 arguments:","title":"Parallel"},{"location":"tools/parallel/#parallel","text":"Simple run: a command that reads an argument: $ parallel echo ::: A B C B C A This is equivalent to: $ parallel echo {} ::: A B C $ parallel echo {1} ::: A B C parallel can also read 2 arguments:","title":"Parallel"},{"location":"tools/tmux/","text":"tmux $ tmux attach # recover work! If I exit tmux cleanly (e.g. ^D) $ tmux attach no sessions Change prefix from ^B to something else Panes ^B + \" ^B + % ^B + x (exit) but ^D is faster ^B + arrow to change from pane to pane ^B + z : zooms on one pane (z again uzooms) resize panes ^B (do not release ^) and use arrows to resized Windows ^B + c : create a new window ^B + n,p : next, previous window ^B + & : kill window ^B + , : rename window Sessions Disconnect for a session: ^B + d $ tmux attach # connect to a session or $ tmux a $ tmux list-sessions or $ tmux ls $ tmux attach -t 1 # connect to a session when we have more than one (do not call inside tmux! exit first! # nested sessions are dangerous or $tmux a -t 1 ^B + $ : rename session Create and name a session: $ tmux new -s \"session_name\" (don't make too long or it truncates name) Toggle between sessions ^B + s (move arrow keys to select session and press ENTER) tmux configuration","title":"tmux"},{"location":"tools/tmux/#tmux","text":"$ tmux attach # recover work! If I exit tmux cleanly (e.g. ^D) $ tmux attach no sessions Change prefix from ^B to something else","title":"tmux"},{"location":"tools/tmux/#panes","text":"^B + \" ^B + % ^B + x (exit) but ^D is faster ^B + arrow to change from pane to pane ^B + z : zooms on one pane (z again uzooms) resize panes ^B (do not release ^) and use arrows to resized","title":"Panes"},{"location":"tools/tmux/#windows","text":"^B + c : create a new window ^B + n,p : next, previous window ^B + & : kill window ^B + , : rename window","title":"Windows"},{"location":"tools/tmux/#sessions","text":"Disconnect for a session: ^B + d $ tmux attach # connect to a session or $ tmux a $ tmux list-sessions or $ tmux ls $ tmux attach -t 1 # connect to a session when we have more than one (do not call inside tmux! exit first! # nested sessions are dangerous or $tmux a -t 1 ^B + $ : rename session Create and name a session: $ tmux new -s \"session_name\" (don't make too long or it truncates name) Toggle between sessions ^B + s (move arrow keys to select session and press ENTER)","title":"Sessions"},{"location":"tools/tmux/#tmux-configuration","text":"","title":"tmux configuration"},{"location":"tools/vim/","text":"Vim Use vim to edit files over the network using ssh on a Linux/Unix/OSX/BSD: $ vim scp://user@server//home/user/file Vim as IDE $ cp /usr/share/vim/vim73/vimrc_example.vim ~/.vimrc The important commands in .vimrc for syntax are: set nocompatible syntax on In order to recognize .f and .f90 $ vi /usr/share/vim/vim73/ftplugin/fortran.vim (insert these commands): let s:extfname = expand(\"%:e\") if s:extfname ==? \"f90\" let fortran_free_source=1 unlet! fortran_fixed_source else let fortran_fixed_source=1 unlet! fortran_free_source endif $ vi ~/.vimrc move the block of text with \u201csyntax on\u201d: after the block of text with the instruction \u201cfiletype plugin indent on\u201d \" Switch syntax highlighting on, when the terminal has colors \" Also switch on highlighting the last used search pattern. if &t_Co > 2 || has(\"gui_running\") syntax on set hlsearch endif set shiftwidth=4 set tabstop=4 Other vim tips: :r !pwd (or another command, such as \"date\" or \"ls -1\" Make a list of numbers in vim: :put=range(1,5) :put=range(1,10,2) See vim help: :help :put :help range()","title":"vim"},{"location":"tools/vim/#vim","text":"Use vim to edit files over the network using ssh on a Linux/Unix/OSX/BSD: $ vim scp://user@server//home/user/file Vim as IDE $ cp /usr/share/vim/vim73/vimrc_example.vim ~/.vimrc The important commands in .vimrc for syntax are: set nocompatible syntax on In order to recognize .f and .f90 $ vi /usr/share/vim/vim73/ftplugin/fortran.vim (insert these commands): let s:extfname = expand(\"%:e\") if s:extfname ==? \"f90\" let fortran_free_source=1 unlet! fortran_fixed_source else let fortran_fixed_source=1 unlet! fortran_free_source endif $ vi ~/.vimrc move the block of text with \u201csyntax on\u201d: after the block of text with the instruction \u201cfiletype plugin indent on\u201d \" Switch syntax highlighting on, when the terminal has colors \" Also switch on highlighting the last used search pattern. if &t_Co > 2 || has(\"gui_running\") syntax on set hlsearch endif set shiftwidth=4 set tabstop=4 Other vim tips: :r !pwd (or another command, such as \"date\" or \"ls -1\" Make a list of numbers in vim: :put=range(1,5) :put=range(1,10,2) See vim help: :help :put :help range()","title":"Vim"},{"location":"unix/admin/","text":"Admin Umount a non-responsive NFS file system: $ sudo umount -f -l /filesystem Ubuntu commands for creating and deleting users $ sudo addgroup --gid 1001 seismo $ sudo addgroup --gid 3850 sismi $ sudo adduser --uid 3801 --ingroup sismi --shell /bin/tcsh jdiaz $ sudo adduser --uid 3807 --ingroup sismi mario (bash shell) $ sudo adduser --home /data9/INPUT input (non-standard home directory) Remove an user and all its files (Ubuntu) $ sudo deluser --remove-all-files user & (can take some time, so better send to background) Get IPs and MAC addresses in a local network $ ifconfig | grep broadcast | arp -a SSH keys Install a public key to login remotely $ ssh-keygen -b 4096 -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Users/antonio/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/antonio/.ssh/id_rsa. Your public key has been saved in /Users/antonio/.ssh/id_rsa.pub. The key fingerprint is: SHA256:Lfbjv4MWIq0MRc7nkL8KYcIGLiEEYyfuTD3NuzkV9Uk antonio@passavol2.cmima.csic.es The key's randomart image is: +---[RSA 4096]----+ |++ . . E | |+.+ o . . o . | |+o o * o o | |*+ . B o. | |.++ oo BS . | |.. o..=.=o. | | .* o ooo | | .+ ..o.. | | .. ...oo | +----[SHA256]-----+ $ ssh-copy-id antonio@edge3.ictja.csic.es /opt/local/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/Users/antonio/.ssh/id_rsa.pub\" The authenticity of host 'edge3.ictja.csic.es (193.144.102.105)' can't be established. ECDSA key fingerprint is SHA256:eMm9bMReccDbOesNDlt9Lf6VMYuv1XlccefWC8zynaA. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes /opt/local/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /opt/local/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys antonio@edge3.ictja.csic.es's password: Number of key(s) added: 1 Now try logging into the machine, with: \"ssh 'antonio@edge3.ictja.csic.es'\" and check to make sure that only the key(s) you wanted were added. Disable suspend and hibernation Instructions in this link . $ sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target Created symlink /etc/systemd/system/sleep.target \u2192 /dev/null. Created symlink /etc/systemd/system/suspend.target \u2192 /dev/null. Created symlink /etc/systemd/system/hibernate.target \u2192 /dev/null. Created symlink /etc/systemd/system/hybrid-sleep.target \u2192 /dev/null. Verify changes: $ sudo systemctl status sleep.target suspend.target hibernate.target hybrid-sleep.target and reboot (or $ sudo systemctl restart systemd-logind.service) Re-enable suspend and hibernation: $ sudo systemctl unmask sleep.target suspend.target hibernate.target hybrid-sleep.target Removed /etc/systemd/system/sleep.target. Removed /etc/systemd/system/suspend.target. Removed /etc/systemd/system/hibernate.target. Removed /etc/systemd/system/hybrid-sleep.target. Verify: $ sudo systemctl status sleep.target suspend.target hibernate.target hybrid-sleep.target MySQL Install MySQL from command line (not tested) $ sudo apt-get -y install mysql-server mysql-client $ sudo mysql_secure_installation (Probably this does not install \"dev\" package with include and libraries for MySQL) Setup password for mysql root ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root_password'; Better Linux tools for sysadmin htop/atop > top ss > netstat ip > ifconfig dig > nslookup mtr > ping+traceroute collectl > sar Update GCC Default version of gcc/g++ in xlr8 (Ubuntu 14.04 LTS) is 5.4.0 Need at least version 7 to compile Mirmex To fix some problems with corrupted packages: $ sudo rm -vf /var/lib/apt/lists/* $ sudo apt-get update (still gives an error about Google Earth, but the rest seems to work fine) $ sudo add-apt-repository ppa:ubuntu-toolchain-r/test $ sudo apt-get update $ sudo apt install gcc-7 g++-7 $ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70 \\ --slave /usr/bin/g++ g++ /usr/bin/g++-7 \\ --slave /usr/bin/gcov gcov /usr/bin/gcov-7 (Modified from https://linuxize.com/post/how-to-install-gcc-compiler-on-ubuntu-18-04/): sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9 WARNING!!!: gfortran not updated to version 7!!!","title":"Admin"},{"location":"unix/admin/#admin","text":"Umount a non-responsive NFS file system: $ sudo umount -f -l /filesystem Ubuntu commands for creating and deleting users $ sudo addgroup --gid 1001 seismo $ sudo addgroup --gid 3850 sismi $ sudo adduser --uid 3801 --ingroup sismi --shell /bin/tcsh jdiaz $ sudo adduser --uid 3807 --ingroup sismi mario (bash shell) $ sudo adduser --home /data9/INPUT input (non-standard home directory) Remove an user and all its files (Ubuntu) $ sudo deluser --remove-all-files user & (can take some time, so better send to background) Get IPs and MAC addresses in a local network $ ifconfig | grep broadcast | arp -a","title":"Admin"},{"location":"unix/admin/#ssh-keys","text":"Install a public key to login remotely $ ssh-keygen -b 4096 -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Users/antonio/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/antonio/.ssh/id_rsa. Your public key has been saved in /Users/antonio/.ssh/id_rsa.pub. The key fingerprint is: SHA256:Lfbjv4MWIq0MRc7nkL8KYcIGLiEEYyfuTD3NuzkV9Uk antonio@passavol2.cmima.csic.es The key's randomart image is: +---[RSA 4096]----+ |++ . . E | |+.+ o . . o . | |+o o * o o | |*+ . B o. | |.++ oo BS . | |.. o..=.=o. | | .* o ooo | | .+ ..o.. | | .. ...oo | +----[SHA256]-----+ $ ssh-copy-id antonio@edge3.ictja.csic.es /opt/local/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/Users/antonio/.ssh/id_rsa.pub\" The authenticity of host 'edge3.ictja.csic.es (193.144.102.105)' can't be established. ECDSA key fingerprint is SHA256:eMm9bMReccDbOesNDlt9Lf6VMYuv1XlccefWC8zynaA. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes /opt/local/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /opt/local/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys antonio@edge3.ictja.csic.es's password: Number of key(s) added: 1 Now try logging into the machine, with: \"ssh 'antonio@edge3.ictja.csic.es'\" and check to make sure that only the key(s) you wanted were added.","title":"SSH keys"},{"location":"unix/admin/#disable-suspend-and-hibernation","text":"Instructions in this link . $ sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target Created symlink /etc/systemd/system/sleep.target \u2192 /dev/null. Created symlink /etc/systemd/system/suspend.target \u2192 /dev/null. Created symlink /etc/systemd/system/hibernate.target \u2192 /dev/null. Created symlink /etc/systemd/system/hybrid-sleep.target \u2192 /dev/null. Verify changes: $ sudo systemctl status sleep.target suspend.target hibernate.target hybrid-sleep.target and reboot (or $ sudo systemctl restart systemd-logind.service) Re-enable suspend and hibernation: $ sudo systemctl unmask sleep.target suspend.target hibernate.target hybrid-sleep.target Removed /etc/systemd/system/sleep.target. Removed /etc/systemd/system/suspend.target. Removed /etc/systemd/system/hibernate.target. Removed /etc/systemd/system/hybrid-sleep.target. Verify: $ sudo systemctl status sleep.target suspend.target hibernate.target hybrid-sleep.target","title":"Disable suspend and hibernation"},{"location":"unix/admin/#mysql","text":"Install MySQL from command line (not tested) $ sudo apt-get -y install mysql-server mysql-client $ sudo mysql_secure_installation (Probably this does not install \"dev\" package with include and libraries for MySQL) Setup password for mysql root ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root_password';","title":"MySQL"},{"location":"unix/admin/#better-linux-tools-for-sysadmin","text":"htop/atop > top ss > netstat ip > ifconfig dig > nslookup mtr > ping+traceroute collectl > sar","title":"Better Linux tools for sysadmin"},{"location":"unix/admin/#update-gcc","text":"Default version of gcc/g++ in xlr8 (Ubuntu 14.04 LTS) is 5.4.0 Need at least version 7 to compile Mirmex To fix some problems with corrupted packages: $ sudo rm -vf /var/lib/apt/lists/* $ sudo apt-get update (still gives an error about Google Earth, but the rest seems to work fine) $ sudo add-apt-repository ppa:ubuntu-toolchain-r/test $ sudo apt-get update $ sudo apt install gcc-7 g++-7 $ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70 \\ --slave /usr/bin/g++ g++ /usr/bin/g++-7 \\ --slave /usr/bin/gcov gcov /usr/bin/gcov-7 (Modified from https://linuxize.com/post/how-to-install-gcc-compiler-on-ubuntu-18-04/): sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9 WARNING!!!: gfortran not updated to version 7!!!","title":"Update GCC"},{"location":"unix/commands/","text":"UNIX tips and commands \"The Enlightened Ones say that. . . You should never use C if you can do it with a script; You should never use a script if you can do it with awk; Never use awk if you can do it with sed; Never use sed if you can do it with grep.\u201c $ man hier # describes Unix directory structure $ man builtin # describes built-in commands $ compgen -b # list built-in commands $ compgen -c # list available commands and aliases Command-line shortcuts Ctrl-u to delete current command, Ctrl-l to \"clear\" output Ctrl+r : Backward search Ctrl+s : Pause output Ctrl+q : Resume output after Ctrl+s Ctrl+a : move to the BOL Ctrl+e : move to the EOL Ctrl+k : delete all text from the cursor to EOL Ctrl+_ : undo Move: Ctrl + A -> beginning of line Alt + B -> beginning of word Ctrl + B -> previous character Ctrl + F -> next character Alt + F -> end of word Ctrl + E -> end of line Delete: Ctrl + U -> to beginning of line Ctrl + W -> to beginning of word Alt + D -> to end of word Ctrl + K -> to end of line (Alt shortcuts do not work on iTerm2) open long and complicated Linux or Unix commands in a text editor. Press: Ctrl + x Ctrl + e Arguments !^ is the first argument of the previous command !$ is the last argument of the previous command Prompt Show terminal colors: $ printf \"\\e[%dm%d dark\\e[0m \\e[%d;1m%d bold\\e[0m\\n\" {30..37}{,,,} Human readable path: $ echo \"${PATH//:/$'\\n'}\" In order to write this as an alias, replace ' with '\"'\"' : alias human_path='echo \"${PATH//:/$'\"'\"'\\n'\"'\"'}\"' history Clear your bash history: $ history -c && history -w pwd $ pwd -L # logical (e.g. soft link) $ pwd -P # physical type $ type ls ls is aliased to `ls -GFh' $ type cd cd is a shell builtin $ type -a ls ls is aliased to `ls -GFh' ls is /bin/ls which stat $ stat -x gmt.conf File: \"gmt.conf\" Size: 3192 FileType: Regular File Mode: (0644/-rw-r--r--) Uid: ( 501/ antonio) Gid: ( 20/ staff) Device: 1,8 Inode: 16647540 Links: 1 Access: Thu Sep 15 10:12:53 2016 Modify: Mon Jun 8 14:45:18 2015 Change: Mon Jun 8 14:45:18 2015 file $ file gmt.conf gmt.conf: ASCII text $ file -b gmt.conf ASCII text ls To expand a wildcard whithout doing an \"ls\" $ echo .* $ echo .[!.]* To list the files in another directory that match more than one pattern: $ ls -l /etc/{*.conf,*.rc,*.sh} List all directories starting with an uppercase letter: $ ls -1d [[:upper:]]* To rename all *.bak to *.txt on a Linux/Unix/OSX (bash shell) $ for j in *.bak; do mv -v -- \"$j\" \"${j%.bak}.txt\"; done Quick comparing of 2 dirs: $ diff -y <(ls -l ${DIR1}) <(ls -l ${DIR2}) Alternative: $ diff --brief --recursive dir1 dir2 Enter special characthers (such as ^G = bell) press ctrl-v and then special character (e.g. ctrl-G) Define a variable and run a script. The variable is only used inside the script $ MYVAR=value ./script.sh eval use eval to define environmental variables: $ eval $( command_that_generates_variables) [not tested] Print a variable between quotation marks: These 3 commands produce the same output: $ echo \"SACAUX is \"\\\"$SACAUX\\\" $ echo SACAUX is \\\"$SACAUX\\\" $ echo \"SACAUX is \\\"$SACAUX\\\"\" SACAUX is \"/usr/local/sac/lib/aux\" xdg-opeon xdg-open will open a file from the command line using the application associated with its file extension. tar First see structure of tar file with $ tar tvzf latest.tar.gz | more $ tar xvzf latest.tar.gz -C /directory/ --strip=1 # eliminates first directory from tar rsync $ rsync -avc orig dest To check only: (I have not tried this!!!) $ rsync -niaHc /origfolder/ /copyfolder ( \"/\" after origfolder is important!!!) -n do not copy (\"dry run\") -i itemise the differences -a preserve (i.e. compare since we have -n) permissions, ownerships, symbolic links, etc. and recurse down directories -H preserve hard links -c compare checksums Reproduce a directory structure but without copying files $ rsync -av -f\"+ */\" -f\"- *\" \"$source\" \"$target\" a2ps $ a2ps -R --font-size=8 --columns=1 -M A4 README.txt -o ouput.ps -> writes output to a PostScript file -P printer -> send to an specified printer -P display -> send to gv (does not work in MacOS X) -M Letter sort, uniq Show which lines are repeated in a sorted file: $ uniq -d sorted_file Find duplicated lines $ sort file | uniq -d find $ find . # find all files hanging from . $ find . -print # same $ find . ! -name \"*.txt\" -print # find files that do not match pattern $ find . -name \"*${str}*\" -printf '%P\\n' # get rid of annoying \"./\" (not for MacOS X :-( $ find . -name \"*${str}*\" -print | cut -c3- # trick to do the same by starting at 3rd character $ find . \\( -name \"*.txt\" -o -name \"*.pdf\" \\) -print # use OR (-o) -path looks for matches in full path, while -name only in file name -maxdepth -mindepth specify directory depth -type : f = file, d = directory, l = link, ... -atime : access time -mtime : modification time (content) -ctime : change time (metadata: permissions, ownership) $ find . -type f -atime -7 -print # files accessed WITHIN the last 7 days $ find . -type f -atime 7 -print # files accessed EXACTLY 7 days ago $ find . -type f -atime +7 -print # files accessed EARLIER than 7 days ago -amin, -mmin, -cmin : same but in minutes $ find . -type f -newer file.txt -print # finds file.txt with earliest modification time $ find . -type f -size +2k # Files having size greater than 2 kilobytes $ find . -type f -size -2k # Files having size less than 2 kilobytes $ find . -type f -size 2k # Files having size 2 kilobytes can also use k, M, G $ find . -type f -perm 644 -print # can be useful to change permissions of miniSEED files in arclink structure $ find . -type f -name \"*.php\" ! -perm 644 -print # this one too $ find . -type f -user iber -print Executing commands and actions with find!!!! $ find . -type f -name \"*.SAC\" -exec /bin/rm -f {} \\; $ find . -type f -user root -exec chown iber {} \\; # runs a chown command for each file $ find . -type f -user root -exec chown iber {} + # runs a single chown command for all files $ find . -type f -name \"*.c\" -exec cat {} \\;>all_c_files.txt # concatenate all C files in a single file (note >, not >> !!) $ find . -type f -mtime +10 -name \" .txt\" -exec cp {} OLD \\; $ find . -type f -name \" .txt\" -exec printf \"Text file: %s\\n\" {} \\; $ find devel/source_path -name \".git\" -prune -o -type f -print # ignore directory .git $ find / -type f -printf '%T+ %p\\n' | sort | head -n 1 # Find oldest file in your filesystem -maxdepth 1 : does not go into subdirectories The find action -printf '%P\\n' prints the name without the starting directory, meaning no ./ is present to need to be stripped. $ find . -maxdepth 1 -type d -name \"[012]???\" -printf \"%P\\n\" # does not work in macOS $ find . -maxdepth 1 -type d -name \"[012]???\" -print | sed \"s|^\\./||\" # works everywhere $ find . -maxdepth 1 -type d -name \"[012]???\" -print | cut -c3- $ find * -maxdepth 0 -type d -name \"[012]???\" -print # this also works!!!! but maxdepth is 0!!! Find empty directories and remove then: $ find . -type d -empty -delete Consolidate (\"flatten\") all subdirectories in one directory $ find TargetDirectory/ -mindepth 2 -type f -exec mv -i '{}' TargetDirectory/ ';' cut $ echo a:b:c | cut -d: -f1 tr $ tr '\\r' '\\n' < mac-format-file.txt # fix carriage return problem for files created with GUI Mac applications nl Numbers lines in a text file csplit splits file in parts using matching patterns $ csplit -k -s -n 4 $QAFI '/^>/' '/^>/' \"{1000}\" -k : do not remove output files if an error occurs -n : number of digits in output xx* files -s : do not output to stdout the number of lines of each file ed Addresses: i : line i $ : last line 1,$ = % : all lines in file i,j : lines i through j . : current line Commands: :0r $HOME/data : read file in at top of current file :g/Name:/s/tom/Tom/ : substitute tom for Tom in lines that match /Name:/ :1,10s/yes/no/g : Substitute on first 10 lines :%s/[Hh]ello/Hi/gc : Confirm global substitutions :s/Fortran/\\U&/ 3 : Confirm global substitutions Uppercase \u201cFortran\u201d on next 3 lines Example of multiple ed commands: ed map.sh << EOF g/^ps/s//gmt &/p g/10 0 1 LB/s///p /pstext/ s:G0/0/0:G255 -F+f10p,Helvetica+jLB:p w q EOF grep-awk Use pgrep instead of grep Equivalent grep and awk commands for pattern matching: $ grep a input | grep b | grep -v c | grep d $ awk '/a/ && /b/ && !/c/ && /d/' input Print every 10th line from a file: $ awk '!(NR % 10)' file camel case and underscore $ echo \"hello_world\" | sed -r 's/([a-z]+)_([a-z])([a-z]+)/\\1\\U\\2\\L\\3/' $ echo thisIsATest | sed -r 's/([A-Z])/_\\L\\1/g' ssh-related commands $ sudo port install openssh +ssh-copy-id $ ssh-keygen -b 4096 -t rsa To install key in another server: $ ssh-copy-id -i ~/.ssh/id_rsa.pub antonio@xlr8.ictja.csic.es [will ask for password] Terminal multiplexers Keep your terminal sessions alive and well under Linux/*BSD/macOS and Unix-like systems. screen (GNU) dtach tmux (BSD) byobu abduco dvtm mtm Miscellaneous commands seq : generates sequence of numbers rev : reverses lines of a file (or stdin) feh : view image files feh -F -Y -z -D 3.5 *.jpg feh -F full screen -Y hide pointer -z randomize -D seconds commands: ctrl + delete (fn + ctrl + backspace) = deletes file from disk h = pause/continue p = previous image n = next image ffmpeg Here is how to create a slideshow from images (1.jpg,2.jpg..,8.jpg) with FFmpeg on your Linux or Unix box: $ ffmpeg -y -r 1/3 -framerate 1 -i %1d.jpg -c:v libx264 -vf fps=5 -pix_fmt yuv420p out.mp4 od: octal dump To output the contents of a binary file interpreted as floats (e.g. PStomo model file). Repeated lines are indicated by an asterisk * . $ od -f pm.0 0000000 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 * 0006740 5.080000e+00 5.080000e+00 5.080000e+00 5.080000e+00 * 0015700 5.440000e+00 5.440000e+00 5.440000e+00 5.440000e+00 * 0024640 5.800000e+00 5.800000e+00 5.800000e+00 5.800000e+00 * 0033600 6.160000e+00 6.160000e+00 6.160000e+00 6.160000e+00 * 0042540 6.520000e+00 6.520000e+00 6.520000e+00 6.520000e+00 * 0051500 6.880000e+00 6.880000e+00 6.880000e+00 6.880000e+00 * 0060440 7.240000e+00 7.240000e+00 7.240000e+00 7.240000e+00 * 0067400 7.600000e+00 7.600000e+00 7.600000e+00 7.600000e+00 * 0076340 7.960000e+00 7.960000e+00 7.960000e+00 7.960000e+00 * 0105300 8.200000e+00 8.200000e+00 8.200000e+00 8.200000e+00 * 0230500 To output all lines included repeated ones: $ od -f -v pm.0 0000000 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 0000020 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 0000040 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 0000060 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 0000100 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 ... In Linux version -w controls the number of bytes per line in output $ god -f -v -w4 pm.0 0000000 4.72 0000004 4.72 0000010 4.72 0000014 4.72 0000020 4.72 0000024 4.72 0000030 4.72 Option address=none does not print the address: $ god -f -v -w4 -An pm.0 5.106375 5.106778 5.107523 5.1090393 5.1125073 Download videos Twitter videos can be downloaded here and here . To download YouTube videos you can use the youtube-dl program (installed using MacPorts): $ youtube-dl command-line tool 10 PRINT $ env LC_ALL=C tr -c -d '/\\' < /dev/random (or /dev/urandom) Unix options Option Typical meaning -a All, append -b Buffer,block size, batch -c Command, check -d Debug, delete, directory -D Define -e Execute, edit -f File, force -h Headers, help -i Initialize -I Include -k Keep, kill -l List, long, load -m Message -n Number, not -o Output -p Port, protocol -q Quiet -r Recurse, reverse -s Silent, subject -t Tag -u User -v Verbose -V Version -w Width, warning -x Enable debugging, extract -y Yes -z Enable compression","title":"Commands"},{"location":"unix/commands/#unix-tips-and-commands","text":"\"The Enlightened Ones say that. . . You should never use C if you can do it with a script; You should never use a script if you can do it with awk; Never use awk if you can do it with sed; Never use sed if you can do it with grep.\u201c $ man hier # describes Unix directory structure $ man builtin # describes built-in commands $ compgen -b # list built-in commands $ compgen -c # list available commands and aliases","title":"UNIX tips and commands"},{"location":"unix/commands/#command-line-shortcuts","text":"Ctrl-u to delete current command, Ctrl-l to \"clear\" output Ctrl+r : Backward search Ctrl+s : Pause output Ctrl+q : Resume output after Ctrl+s Ctrl+a : move to the BOL Ctrl+e : move to the EOL Ctrl+k : delete all text from the cursor to EOL Ctrl+_ : undo Move: Ctrl + A -> beginning of line Alt + B -> beginning of word Ctrl + B -> previous character Ctrl + F -> next character Alt + F -> end of word Ctrl + E -> end of line Delete: Ctrl + U -> to beginning of line Ctrl + W -> to beginning of word Alt + D -> to end of word Ctrl + K -> to end of line (Alt shortcuts do not work on iTerm2) open long and complicated Linux or Unix commands in a text editor. Press: Ctrl + x Ctrl + e","title":"Command-line shortcuts"},{"location":"unix/commands/#arguments","text":"!^ is the first argument of the previous command !$ is the last argument of the previous command","title":"Arguments"},{"location":"unix/commands/#prompt","text":"Show terminal colors: $ printf \"\\e[%dm%d dark\\e[0m \\e[%d;1m%d bold\\e[0m\\n\" {30..37}{,,,}","title":"Prompt"},{"location":"unix/commands/#human-readable-path","text":"$ echo \"${PATH//:/$'\\n'}\" In order to write this as an alias, replace ' with '\"'\"' : alias human_path='echo \"${PATH//:/$'\"'\"'\\n'\"'\"'}\"'","title":"Human readable path:"},{"location":"unix/commands/#history","text":"Clear your bash history: $ history -c && history -w","title":"history"},{"location":"unix/commands/#pwd","text":"$ pwd -L # logical (e.g. soft link) $ pwd -P # physical","title":"pwd"},{"location":"unix/commands/#type","text":"$ type ls ls is aliased to `ls -GFh' $ type cd cd is a shell builtin $ type -a ls ls is aliased to `ls -GFh' ls is /bin/ls","title":"type"},{"location":"unix/commands/#which","text":"","title":"which"},{"location":"unix/commands/#stat","text":"$ stat -x gmt.conf File: \"gmt.conf\" Size: 3192 FileType: Regular File Mode: (0644/-rw-r--r--) Uid: ( 501/ antonio) Gid: ( 20/ staff) Device: 1,8 Inode: 16647540 Links: 1 Access: Thu Sep 15 10:12:53 2016 Modify: Mon Jun 8 14:45:18 2015 Change: Mon Jun 8 14:45:18 2015","title":"stat"},{"location":"unix/commands/#file","text":"$ file gmt.conf gmt.conf: ASCII text $ file -b gmt.conf ASCII text","title":"file"},{"location":"unix/commands/#ls","text":"To expand a wildcard whithout doing an \"ls\" $ echo .* $ echo .[!.]* To list the files in another directory that match more than one pattern: $ ls -l /etc/{*.conf,*.rc,*.sh} List all directories starting with an uppercase letter: $ ls -1d [[:upper:]]* To rename all *.bak to *.txt on a Linux/Unix/OSX (bash shell) $ for j in *.bak; do mv -v -- \"$j\" \"${j%.bak}.txt\"; done Quick comparing of 2 dirs: $ diff -y <(ls -l ${DIR1}) <(ls -l ${DIR2}) Alternative: $ diff --brief --recursive dir1 dir2 Enter special characthers (such as ^G = bell) press ctrl-v and then special character (e.g. ctrl-G) Define a variable and run a script. The variable is only used inside the script $ MYVAR=value ./script.sh","title":"ls"},{"location":"unix/commands/#eval","text":"use eval to define environmental variables: $ eval $( command_that_generates_variables) [not tested] Print a variable between quotation marks: These 3 commands produce the same output: $ echo \"SACAUX is \"\\\"$SACAUX\\\" $ echo SACAUX is \\\"$SACAUX\\\" $ echo \"SACAUX is \\\"$SACAUX\\\"\" SACAUX is \"/usr/local/sac/lib/aux\"","title":"eval"},{"location":"unix/commands/#xdg-opeon","text":"xdg-open will open a file from the command line using the application associated with its file extension.","title":"xdg-opeon"},{"location":"unix/commands/#tar","text":"First see structure of tar file with $ tar tvzf latest.tar.gz | more $ tar xvzf latest.tar.gz -C /directory/ --strip=1 # eliminates first directory from tar","title":"tar"},{"location":"unix/commands/#rsync","text":"$ rsync -avc orig dest To check only: (I have not tried this!!!) $ rsync -niaHc /origfolder/ /copyfolder ( \"/\" after origfolder is important!!!) -n do not copy (\"dry run\") -i itemise the differences -a preserve (i.e. compare since we have -n) permissions, ownerships, symbolic links, etc. and recurse down directories -H preserve hard links -c compare checksums Reproduce a directory structure but without copying files $ rsync -av -f\"+ */\" -f\"- *\" \"$source\" \"$target\"","title":"rsync"},{"location":"unix/commands/#a2ps","text":"$ a2ps -R --font-size=8 --columns=1 -M A4 README.txt -o ouput.ps -> writes output to a PostScript file -P printer -> send to an specified printer -P display -> send to gv (does not work in MacOS X) -M Letter","title":"a2ps"},{"location":"unix/commands/#sort-uniq","text":"Show which lines are repeated in a sorted file: $ uniq -d sorted_file Find duplicated lines $ sort file | uniq -d","title":"sort, uniq"},{"location":"unix/commands/#find","text":"$ find . # find all files hanging from . $ find . -print # same $ find . ! -name \"*.txt\" -print # find files that do not match pattern $ find . -name \"*${str}*\" -printf '%P\\n' # get rid of annoying \"./\" (not for MacOS X :-( $ find . -name \"*${str}*\" -print | cut -c3- # trick to do the same by starting at 3rd character $ find . \\( -name \"*.txt\" -o -name \"*.pdf\" \\) -print # use OR (-o) -path looks for matches in full path, while -name only in file name -maxdepth -mindepth specify directory depth -type : f = file, d = directory, l = link, ... -atime : access time -mtime : modification time (content) -ctime : change time (metadata: permissions, ownership) $ find . -type f -atime -7 -print # files accessed WITHIN the last 7 days $ find . -type f -atime 7 -print # files accessed EXACTLY 7 days ago $ find . -type f -atime +7 -print # files accessed EARLIER than 7 days ago -amin, -mmin, -cmin : same but in minutes $ find . -type f -newer file.txt -print # finds file.txt with earliest modification time $ find . -type f -size +2k # Files having size greater than 2 kilobytes $ find . -type f -size -2k # Files having size less than 2 kilobytes $ find . -type f -size 2k # Files having size 2 kilobytes can also use k, M, G $ find . -type f -perm 644 -print # can be useful to change permissions of miniSEED files in arclink structure $ find . -type f -name \"*.php\" ! -perm 644 -print # this one too $ find . -type f -user iber -print Executing commands and actions with find!!!! $ find . -type f -name \"*.SAC\" -exec /bin/rm -f {} \\; $ find . -type f -user root -exec chown iber {} \\; # runs a chown command for each file $ find . -type f -user root -exec chown iber {} + # runs a single chown command for all files $ find . -type f -name \"*.c\" -exec cat {} \\;>all_c_files.txt # concatenate all C files in a single file (note >, not >> !!) $ find . -type f -mtime +10 -name \" .txt\" -exec cp {} OLD \\; $ find . -type f -name \" .txt\" -exec printf \"Text file: %s\\n\" {} \\; $ find devel/source_path -name \".git\" -prune -o -type f -print # ignore directory .git $ find / -type f -printf '%T+ %p\\n' | sort | head -n 1 # Find oldest file in your filesystem -maxdepth 1 : does not go into subdirectories The find action -printf '%P\\n' prints the name without the starting directory, meaning no ./ is present to need to be stripped. $ find . -maxdepth 1 -type d -name \"[012]???\" -printf \"%P\\n\" # does not work in macOS $ find . -maxdepth 1 -type d -name \"[012]???\" -print | sed \"s|^\\./||\" # works everywhere $ find . -maxdepth 1 -type d -name \"[012]???\" -print | cut -c3- $ find * -maxdepth 0 -type d -name \"[012]???\" -print # this also works!!!! but maxdepth is 0!!! Find empty directories and remove then: $ find . -type d -empty -delete Consolidate (\"flatten\") all subdirectories in one directory $ find TargetDirectory/ -mindepth 2 -type f -exec mv -i '{}' TargetDirectory/ ';'","title":"find"},{"location":"unix/commands/#cut","text":"$ echo a:b:c | cut -d: -f1","title":"cut"},{"location":"unix/commands/#tr","text":"$ tr '\\r' '\\n' < mac-format-file.txt # fix carriage return problem for files created with GUI Mac applications","title":"tr"},{"location":"unix/commands/#nl","text":"Numbers lines in a text file","title":"nl"},{"location":"unix/commands/#csplit","text":"splits file in parts using matching patterns $ csplit -k -s -n 4 $QAFI '/^>/' '/^>/' \"{1000}\" -k : do not remove output files if an error occurs -n : number of digits in output xx* files -s : do not output to stdout the number of lines of each file","title":"csplit"},{"location":"unix/commands/#ed","text":"Addresses: i : line i $ : last line 1,$ = % : all lines in file i,j : lines i through j . : current line Commands: :0r $HOME/data : read file in at top of current file :g/Name:/s/tom/Tom/ : substitute tom for Tom in lines that match /Name:/ :1,10s/yes/no/g : Substitute on first 10 lines :%s/[Hh]ello/Hi/gc : Confirm global substitutions :s/Fortran/\\U&/ 3 : Confirm global substitutions Uppercase \u201cFortran\u201d on next 3 lines Example of multiple ed commands: ed map.sh << EOF g/^ps/s//gmt &/p g/10 0 1 LB/s///p /pstext/ s:G0/0/0:G255 -F+f10p,Helvetica+jLB:p w q EOF","title":"ed"},{"location":"unix/commands/#grep-awk","text":"Use pgrep instead of grep Equivalent grep and awk commands for pattern matching: $ grep a input | grep b | grep -v c | grep d $ awk '/a/ && /b/ && !/c/ && /d/' input Print every 10th line from a file: $ awk '!(NR % 10)' file","title":"grep-awk"},{"location":"unix/commands/#camel-case-and-underscore","text":"$ echo \"hello_world\" | sed -r 's/([a-z]+)_([a-z])([a-z]+)/\\1\\U\\2\\L\\3/' $ echo thisIsATest | sed -r 's/([A-Z])/_\\L\\1/g'","title":"camel case and underscore"},{"location":"unix/commands/#ssh-related-commands","text":"$ sudo port install openssh +ssh-copy-id $ ssh-keygen -b 4096 -t rsa To install key in another server: $ ssh-copy-id -i ~/.ssh/id_rsa.pub antonio@xlr8.ictja.csic.es [will ask for password]","title":"ssh-related commands"},{"location":"unix/commands/#terminal-multiplexers","text":"Keep your terminal sessions alive and well under Linux/*BSD/macOS and Unix-like systems. screen (GNU) dtach tmux (BSD) byobu abduco dvtm mtm","title":"Terminal multiplexers"},{"location":"unix/commands/#miscellaneous-commands","text":"seq : generates sequence of numbers rev : reverses lines of a file (or stdin) feh : view image files feh -F -Y -z -D 3.5 *.jpg feh -F full screen -Y hide pointer -z randomize -D seconds commands: ctrl + delete (fn + ctrl + backspace) = deletes file from disk h = pause/continue p = previous image n = next image","title":"Miscellaneous commands"},{"location":"unix/commands/#ffmpeg","text":"Here is how to create a slideshow from images (1.jpg,2.jpg..,8.jpg) with FFmpeg on your Linux or Unix box: $ ffmpeg -y -r 1/3 -framerate 1 -i %1d.jpg -c:v libx264 -vf fps=5 -pix_fmt yuv420p out.mp4","title":"ffmpeg"},{"location":"unix/commands/#od-octal-dump","text":"To output the contents of a binary file interpreted as floats (e.g. PStomo model file). Repeated lines are indicated by an asterisk * . $ od -f pm.0 0000000 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 * 0006740 5.080000e+00 5.080000e+00 5.080000e+00 5.080000e+00 * 0015700 5.440000e+00 5.440000e+00 5.440000e+00 5.440000e+00 * 0024640 5.800000e+00 5.800000e+00 5.800000e+00 5.800000e+00 * 0033600 6.160000e+00 6.160000e+00 6.160000e+00 6.160000e+00 * 0042540 6.520000e+00 6.520000e+00 6.520000e+00 6.520000e+00 * 0051500 6.880000e+00 6.880000e+00 6.880000e+00 6.880000e+00 * 0060440 7.240000e+00 7.240000e+00 7.240000e+00 7.240000e+00 * 0067400 7.600000e+00 7.600000e+00 7.600000e+00 7.600000e+00 * 0076340 7.960000e+00 7.960000e+00 7.960000e+00 7.960000e+00 * 0105300 8.200000e+00 8.200000e+00 8.200000e+00 8.200000e+00 * 0230500 To output all lines included repeated ones: $ od -f -v pm.0 0000000 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 0000020 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 0000040 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 0000060 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 0000100 4.720000e+00 4.720000e+00 4.720000e+00 4.720000e+00 ... In Linux version -w controls the number of bytes per line in output $ god -f -v -w4 pm.0 0000000 4.72 0000004 4.72 0000010 4.72 0000014 4.72 0000020 4.72 0000024 4.72 0000030 4.72 Option address=none does not print the address: $ god -f -v -w4 -An pm.0 5.106375 5.106778 5.107523 5.1090393 5.1125073","title":"od: octal dump"},{"location":"unix/commands/#download-videos","text":"Twitter videos can be downloaded here and here . To download YouTube videos you can use the youtube-dl program (installed using MacPorts): $ youtube-dl command-line tool 10 PRINT $ env LC_ALL=C tr -c -d '/\\' < /dev/random (or /dev/urandom)","title":"Download videos"},{"location":"unix/commands/#unix-options","text":"Option Typical meaning -a All, append -b Buffer,block size, batch -c Command, check -d Debug, delete, directory -D Define -e Execute, edit -f File, force -h Headers, help -i Initialize -I Include -k Keep, kill -l List, long, load -m Message -n Number, not -o Output -p Port, protocol -q Quiet -r Recurse, reverse -s Silent, subject -t Tag -u User -v Verbose -V Version -w Width, warning -x Enable debugging, extract -y Yes -z Enable compression","title":"Unix options"},{"location":"unix/dotfiles/","text":"Dotfiles .bash_aliases Aliases can be included in the .bashrc file or better in a separate file commonly named .bash_aliases . This file is executed from .bashrc : # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi Typical aliases for ls and grep : # some ls aliases alias ls='ls -GFh' alias la='ls -A' alias ll='ls -alF' alias lh='ls -alt | head -20' alias l='ls -CF' # some grep aliases alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' Some utilities: alias human_path='echo \"${PATH//:/$'\"'\"'\\n'\"'\"'}\"' Alias with common options for commands: alias feh='feh -F -Y -z -Z -D 5.0' alias gvl='/opt/local/bin/gv --orientation=landscape' alias sac='$SACHOME/bin/sac $SACAUX/macros/init.m' Specific aliases for macOS: alias te='open -a textedit' .vimrc set nocompatible syntax on \"syntax files are located in /usr/share/vim/vim82/syntax let g:markdown_fenced_languages = ['bash', 'c', 'cpp', 'fortran', 'python'] \"set number \"set cursorline set cursorcolumn set ruler set expandtab set tabstop=4 shiftwidth=4 set autoindent autocmd BufNewFile *.sh 0r ~/skeletons/bash.sh \"autocmd BufNewFile *.awk 0r ~/skeletons/template.awk \"autocmd BufNewFile readme.md 0r ~/skeletons/readme.md \"autocmd BufNewFile *.gmt6 0r ~/skeletons/gmt6.sh Login shell run /etc/profile (not run in an interactive shell) $ cat /etc/profile # System-wide .profile for sh(1) if [ -x /usr/libexec/path_helper ]; then eval `/usr/libexec/path_helper -s` fi if [ \"${BASH-no}\" != \"no\" ]; then [ -r /etc/bashrc ] && . /etc/bashrc fi Last command runs /etc/bashrc $ cat /etc/bashrc # System-wide .bashrc file for interactive bash(1) shells. if [ -z \"$PS1\" ]; then return fi PS1='\\h:\\W \\u\\$ ' # Make bash check its window size after a process completes shopt -s checkwinsize [ -r \"/etc/bashrc_$TERM_PROGRAM\" ] && . \"/etc/bashrc_$TERM_PROGRAM\" Setups PS1 prompt and checks window size (only for $TERM_PROGRAM == Apple_Termimal ) Then one of: ~/.bash_profile # this one is read only by bash ~/.bash_login ~/.profile # this one is read by all shells, not only bash These are local login items. And finally (depending on system???) ~/.bashrc To keep the environment consistent between non-login and login shells, source the .bashrc from .bash_profile if [ -f ~/.bashrc ]; then . ~/.bashrc fi Not a login shell [0. run /etc/bash.bashrc ?] run .bashrc There is a template for .bashrc in /etc/bashrc $ cat /etc/bashrc # System-wide .bashrc file for interactive bash(1) shells. if [ -z \"$PS1\" ]; then return fi PS1='\\h:\\W \\u\\$ ' # Make bash check its window size after a process completes shopt -s checkwinsize [ -r \"/etc/bashrc_$TERM_PROGRAM\" ] && . \"/etc/bashrc_$TERM_PROGRAM\" macOS Apparentely the OSX Apple Terminal and iTerm2 always open a login shell. Character (login or non-login) can be determined by leading \"-\" in $0 (need to make sure): % echo $0 -/bin/tcsh $ bash $ echo $0 bash Non-interactive shell Executes the commands in the startup file indicated by variable BASH_ENV The default value of this variable is usually undefined This means that in a bash shell script no configuration file is executed??? Then variables are inherited from the shell that calls it?? Common cases (options --login, --noprofile, --rcfile, --norc, not used) Interactive, Login: /etc/profile, (~/.bash_profile | ~/.bash_login | ~/.profile), [~/.bashrc] Interactive, Non-Login: /etc/bash.bashrc, ~/.bashrc Non-Interactive: $BASH_ENV (This means all variables inherited from parent shell? What if shell is called from at, cron, etc?) In OS X all terminal applications open a login shell. Therefore all parameters must be in ~/.bash_profile or make that ~/.bash_profile sources ~/.bashrc In OS X /etc/bash.bashrc does not exist Shell options $ shopt (lists shell options) an important one is \"huponexit\" (background jobs continue to run when closing shell)","title":"Dotfiles"},{"location":"unix/dotfiles/#dotfiles","text":"","title":"Dotfiles"},{"location":"unix/dotfiles/#bash_aliases","text":"Aliases can be included in the .bashrc file or better in a separate file commonly named .bash_aliases . This file is executed from .bashrc : # Alias definitions. # You may want to put all your additions into a separate file like # ~/.bash_aliases, instead of adding them here directly. # See /usr/share/doc/bash-doc/examples in the bash-doc package. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi Typical aliases for ls and grep : # some ls aliases alias ls='ls -GFh' alias la='ls -A' alias ll='ls -alF' alias lh='ls -alt | head -20' alias l='ls -CF' # some grep aliases alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' Some utilities: alias human_path='echo \"${PATH//:/$'\"'\"'\\n'\"'\"'}\"' Alias with common options for commands: alias feh='feh -F -Y -z -Z -D 5.0' alias gvl='/opt/local/bin/gv --orientation=landscape' alias sac='$SACHOME/bin/sac $SACAUX/macros/init.m' Specific aliases for macOS: alias te='open -a textedit'","title":".bash_aliases"},{"location":"unix/dotfiles/#vimrc","text":"set nocompatible syntax on \"syntax files are located in /usr/share/vim/vim82/syntax let g:markdown_fenced_languages = ['bash', 'c', 'cpp', 'fortran', 'python'] \"set number \"set cursorline set cursorcolumn set ruler set expandtab set tabstop=4 shiftwidth=4 set autoindent autocmd BufNewFile *.sh 0r ~/skeletons/bash.sh \"autocmd BufNewFile *.awk 0r ~/skeletons/template.awk \"autocmd BufNewFile readme.md 0r ~/skeletons/readme.md \"autocmd BufNewFile *.gmt6 0r ~/skeletons/gmt6.sh","title":".vimrc"},{"location":"unix/dotfiles/#login-shell","text":"run /etc/profile (not run in an interactive shell) $ cat /etc/profile # System-wide .profile for sh(1) if [ -x /usr/libexec/path_helper ]; then eval `/usr/libexec/path_helper -s` fi if [ \"${BASH-no}\" != \"no\" ]; then [ -r /etc/bashrc ] && . /etc/bashrc fi Last command runs /etc/bashrc $ cat /etc/bashrc # System-wide .bashrc file for interactive bash(1) shells. if [ -z \"$PS1\" ]; then return fi PS1='\\h:\\W \\u\\$ ' # Make bash check its window size after a process completes shopt -s checkwinsize [ -r \"/etc/bashrc_$TERM_PROGRAM\" ] && . \"/etc/bashrc_$TERM_PROGRAM\" Setups PS1 prompt and checks window size (only for $TERM_PROGRAM == Apple_Termimal ) Then one of: ~/.bash_profile # this one is read only by bash ~/.bash_login ~/.profile # this one is read by all shells, not only bash These are local login items. And finally (depending on system???) ~/.bashrc To keep the environment consistent between non-login and login shells, source the .bashrc from .bash_profile if [ -f ~/.bashrc ]; then . ~/.bashrc fi","title":"Login shell"},{"location":"unix/dotfiles/#not-a-login-shell","text":"[0. run /etc/bash.bashrc ?] run .bashrc There is a template for .bashrc in /etc/bashrc $ cat /etc/bashrc # System-wide .bashrc file for interactive bash(1) shells. if [ -z \"$PS1\" ]; then return fi PS1='\\h:\\W \\u\\$ ' # Make bash check its window size after a process completes shopt -s checkwinsize [ -r \"/etc/bashrc_$TERM_PROGRAM\" ] && . \"/etc/bashrc_$TERM_PROGRAM\"","title":"Not a login shell"},{"location":"unix/dotfiles/#macos","text":"Apparentely the OSX Apple Terminal and iTerm2 always open a login shell. Character (login or non-login) can be determined by leading \"-\" in $0 (need to make sure): % echo $0 -/bin/tcsh $ bash $ echo $0 bash","title":"macOS"},{"location":"unix/dotfiles/#non-interactive-shell","text":"Executes the commands in the startup file indicated by variable BASH_ENV The default value of this variable is usually undefined This means that in a bash shell script no configuration file is executed??? Then variables are inherited from the shell that calls it?? Common cases (options --login, --noprofile, --rcfile, --norc, not used) Interactive, Login: /etc/profile, (~/.bash_profile | ~/.bash_login | ~/.profile), [~/.bashrc] Interactive, Non-Login: /etc/bash.bashrc, ~/.bashrc Non-Interactive: $BASH_ENV (This means all variables inherited from parent shell? What if shell is called from at, cron, etc?) In OS X all terminal applications open a login shell. Therefore all parameters must be in ~/.bash_profile or make that ~/.bash_profile sources ~/.bashrc In OS X /etc/bash.bashrc does not exist","title":"Non-interactive shell"},{"location":"unix/dotfiles/#shell-options","text":"$ shopt (lists shell options) an important one is \"huponexit\" (background jobs continue to run when closing shell)","title":"Shell options"},{"location":"unix/installation/","text":"Installation generic Install compilers and development tools: $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get install build-essential $ sudo apt-get install gfortran (?) $ sudo apt-get install autotools-dev $ sudo apt-get install autoconf Better use apt ? overflow Intel compilers (and MPI?) MPI $ sudo apt-get install openmpi-bin openmpi-common openmpi-doc libopenmpi-dev Google Earth Pro To install deb package beter use gdebi instead of $ sudo dpkg -i example.deb $ sudo apt install gdebi-core # [ wget ] [If you don't have gdebi nor wget] $ wget https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb $ sudo gdebi google-earth-pro-stable_current_amd64.deb $ google-earth-pro Paraview CUDA 11 Installation Guide CUDA Quick Start Guide Linux > x86_64 > Ubuntu > 16.04 > deb (local) wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-ubuntu1604.pin sudo mv cuda-ubuntu1604.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda-repo-ubuntu1604-11-0-local_11.0.1-450.36.06-1_amd64.deb sudo dpkg -i cuda-repo-ubuntu1604-11-0-local_11.0.1-450.36.06-1_amd64.deb sudo apt-key add /var/cuda-repo-ubuntu1604-11-0-local/7fa2af80.pub sudo apt-get update sudo apt-get -y install cuda Linux > x86_64 > Ubuntu > 18.04 > deb (local) wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda-repo-ubuntu1804-11-0-local_11.0.1-450.36.06-1_amd64.deb sudo dpkg -i cuda-repo-ubuntu1804-11-0-local_11.0.1-450.36.06-1_amd64.deb sudo apt-key add /var/cuda-repo-ubuntu1804-11-0-local/7fa2af80.pub sudo apt-get update sudo apt-get -y install cuda Linux > x86_64 > Ubuntu > 16.04 > runfile wget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda_11.0.1_450.36.06_linux.run sudo sh cuda_11.0.1_450.36.06_linux.run Linux > x86_64 > Ubuntu > 18.04 > runfile wget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda_11.0.1_450.36.06_linux.run sudo sh cuda_11.0.1_450.36.06_linux.run xlr8 $ sudo synaptic gv gfortran gmt (including all coastlines) $ sudo addgroup --gid 1001 seismo Adding group `seismo' (GID 1001) ... Done. $ sudo adduser --uid 1001 --ingroup seismo antonio Adding user `antonio' ... Adding new user `antonio' (1001) with group `seismo' ... Creating home directory `/home/antonio' ... Copying files from `/etc/skel' ... Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully Changing the user information for antonio Enter the new value, or press ENTER for the default Full Name []: Antonio Villasenor Room Number []: 313 Work Phone []: 934095410 Home Phone []: Other []: Install NVIDIA GPU drivers [Installation of GPU driver was done by Anima] Instructions here Most current driver at 2017-09-15: nvidia-diag-driver-local-repo-ubuntu1604-384.66_1.0-1_amd64.deb $ sudo dpkg -i nvidia-diag-driver-local-repo-ubuntu1604-384.66_1.0-1_amd64.deb $ sudo apt-get update $ apt-get install cuda-drivers [reboot] Find out driver version: $ nvidia-smi Wed Oct 10 15:08:28 2018 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 410.48 Driver Version: 410.48 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 Tesla P100-PCIE... Off | 00000000:81:00.0 Off | 0 | | N/A 32C P0 28W / 250W | 0MiB / 12198MiB | 0% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | No running processes found | +-----------------------------------------------------------------------------+ Install CUDA drivers and CUDA Toolkit [Checks in http://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html] $ sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb $ sudo apt-get update $ sudo apt-get install cuda Install CUDA 9.0 $ sudo dpkg -i cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.deb $ sudo apt-key add /var/cuda-repo-9-0-local/7fa2af80.pub $ sudo apt-get update # if you do this it installs latest cuda $ sudo apt-get install cuda [gives may warnings, including system not bootable!!??] Try again usin runfile: $ sudo sh cuda_9.0.176_384.81_linux.run Check CUDA version: $ nvcc -V nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2018 NVIDIA Corporation Built on Sat_Aug_25_21:08:01_CDT_2018 Cuda compilation tools, release 10.0, V10.0.130 Changing symbolic link to /usr/local/cuda: antonio@xlr8 ~ $ nvcc -V nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2017 NVIDIA Corporation Built on Fri_Sep__1_21:08:03_CDT_2017 Cuda compilation tools, release 9.0, V9.0.176 Install Intel compilers $ ./install_GUI.sh (not as sudo, it will ask later for password) [install it as trial!] [options: disable IA32 - if not 32-bit libraries error, and compiler does not install] MPI OpenMPI: synaptic -> openmpi-bin libopenmpi-dev (selecting the second one also selects the first one) Intel: $ tar xvzf l_mpi_2017.2.174.tgz $ cd l_mpi_2017.2.174.tgz $ sudo ./install.sh [enter defaults] Install location: /opt/intel/parallel_studio_xe_2017.2.050 Install PGI compiler $ tar xvzf pgilinux-2017-175-x86_64.tar.gz $ sudo ./install [installs PGI CUDA but not MPI] $ cd /opt/pgi [rename or delete license.dat] [copy license.dat provided by CSIC] Edit .bashrc export PGI=/opt/pgi; export PATH=/opt/pgi/linux86-64/17.5/bin:$PATH; export MANPATH=$MANPATH:/opt/pgi/linux86-64/17.5/man; export LM_LICENSE_FILE=$LM_LICENSE_FILE:/opt/pgi/license.dat; Command pgi_license_tool can manage licenses $ sudo ln -s /lib64/ld-linux-x86-64.so.2 /lib64/ld-lsb-x86-64.so.3 $ pgi_license_tool [option 4 = do nothing ] Install Python Install python 3.5 with last installer that came with 3.5 by default (Anaconda3-4.2.0) $ bash Anaconda3-4.2.0-Linux-x86_64.sh $ conda update conda $ conda update anaconda $ conda install accelerate Setup GitHub for git $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/home/antonio/.ssh/id_rsa): Created directory '/home/antonio/.ssh'. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/antonio/.ssh/id_rsa. Your public key has been saved in /home/antonio/.ssh/id_rsa.pub. The key fingerprint is: SHA256:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXs antonio@xlr8 The key's randomart image is: +---[RSA 2048]----+ | | +----[SHA256]-----+ NO PASSPHRASE!!!! $ cat ~/.ssh/id_rsa.pub [go to Bitbucket web page, Settings > \"SSH keys > Add Key\" and add public key] To check that it worked: $ ssh -T git@bitbucket.org The authenticity of host 'bitbucket.org (104.192.143.2)' can't be established. RSA key fingerprint is SHA256:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'bitbucket.org,104.192.143.2' (RSA) to the list of known hosts. logged in as avillasenorh. You can use git or hg to connect to Bitbucket. Shell access is disabled. $ cd $ mkdir bin scripts devel $ cd devel $ git clone git@bitbucket.org:avillasenorh/noise-processing.git $ git clone git@bitbucket.org:avillasenorh/psim-tools.git $ git clone git@bitbucket.org:avillasenorh/let.git Install locally FFTW $ cd $ mkdir -p lib/fftw [download fftw-3.3.6-pl2.tar.gz] $ cd $ cd src $ tar xvzf .../fftw-3.3.6-pl2.tar.gz $ cd fftw-3.3.6-pl2 $ ./configure --prefix=/home/antonio/lib/fftw $ make $ make check (basic tests passed) $ make install . . . ---------------------------------------------------------------------- Libraries have been installed in: /home/antonio/lib/fftw/lib If you ever happen to want to link against installed libraries in a given directory, LIBDIR, you must either use libtool, and specify the full pathname of the library, or use the '-LLIBDIR' flag during linking and do at least one of the following: - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable during execution - add LIBDIR to the 'LD_RUN_PATH' environment variable during linking - use the '-Wl,-rpath -Wl,LIBDIR' linker flag - have your system administrator add LIBDIR to '/etc/ld.so.conf' See any operating system documentation about shared libraries for more information, such as the ld(1) and ld.so(8) manual pages. ---------------------------------------------------------------------- . . . Install packages with Synaptic gcc/gfortran gv GMT5 libncurses-dev for CPS zlib for mseed2sac","title":"Installation"},{"location":"unix/installation/#installation","text":"","title":"Installation"},{"location":"unix/installation/#generic","text":"Install compilers and development tools: $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get install build-essential $ sudo apt-get install gfortran (?) $ sudo apt-get install autotools-dev $ sudo apt-get install autoconf Better use apt ?","title":"generic"},{"location":"unix/installation/#overflow","text":"Intel compilers (and MPI?) MPI $ sudo apt-get install openmpi-bin openmpi-common openmpi-doc libopenmpi-dev Google Earth Pro To install deb package beter use gdebi instead of $ sudo dpkg -i example.deb $ sudo apt install gdebi-core # [ wget ] [If you don't have gdebi nor wget] $ wget https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb $ sudo gdebi google-earth-pro-stable_current_amd64.deb $ google-earth-pro Paraview","title":"overflow"},{"location":"unix/installation/#cuda-11","text":"Installation Guide CUDA Quick Start Guide Linux > x86_64 > Ubuntu > 16.04 > deb (local) wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-ubuntu1604.pin sudo mv cuda-ubuntu1604.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda-repo-ubuntu1604-11-0-local_11.0.1-450.36.06-1_amd64.deb sudo dpkg -i cuda-repo-ubuntu1604-11-0-local_11.0.1-450.36.06-1_amd64.deb sudo apt-key add /var/cuda-repo-ubuntu1604-11-0-local/7fa2af80.pub sudo apt-get update sudo apt-get -y install cuda Linux > x86_64 > Ubuntu > 18.04 > deb (local) wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda-repo-ubuntu1804-11-0-local_11.0.1-450.36.06-1_amd64.deb sudo dpkg -i cuda-repo-ubuntu1804-11-0-local_11.0.1-450.36.06-1_amd64.deb sudo apt-key add /var/cuda-repo-ubuntu1804-11-0-local/7fa2af80.pub sudo apt-get update sudo apt-get -y install cuda Linux > x86_64 > Ubuntu > 16.04 > runfile wget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda_11.0.1_450.36.06_linux.run sudo sh cuda_11.0.1_450.36.06_linux.run Linux > x86_64 > Ubuntu > 18.04 > runfile wget http://developer.download.nvidia.com/compute/cuda/11.0.1/local_installers/cuda_11.0.1_450.36.06_linux.run sudo sh cuda_11.0.1_450.36.06_linux.run","title":"CUDA 11"},{"location":"unix/installation/#xlr8","text":"$ sudo synaptic gv gfortran gmt (including all coastlines) $ sudo addgroup --gid 1001 seismo Adding group `seismo' (GID 1001) ... Done. $ sudo adduser --uid 1001 --ingroup seismo antonio Adding user `antonio' ... Adding new user `antonio' (1001) with group `seismo' ... Creating home directory `/home/antonio' ... Copying files from `/etc/skel' ... Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully Changing the user information for antonio Enter the new value, or press ENTER for the default Full Name []: Antonio Villasenor Room Number []: 313 Work Phone []: 934095410 Home Phone []: Other []:","title":"xlr8"},{"location":"unix/installation/#install-nvidia-gpu-drivers","text":"[Installation of GPU driver was done by Anima] Instructions here Most current driver at 2017-09-15: nvidia-diag-driver-local-repo-ubuntu1604-384.66_1.0-1_amd64.deb $ sudo dpkg -i nvidia-diag-driver-local-repo-ubuntu1604-384.66_1.0-1_amd64.deb $ sudo apt-get update $ apt-get install cuda-drivers [reboot] Find out driver version: $ nvidia-smi Wed Oct 10 15:08:28 2018 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 410.48 Driver Version: 410.48 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 Tesla P100-PCIE... Off | 00000000:81:00.0 Off | 0 | | N/A 32C P0 28W / 250W | 0MiB / 12198MiB | 0% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | No running processes found | +-----------------------------------------------------------------------------+","title":"Install NVIDIA GPU drivers"},{"location":"unix/installation/#install-cuda-drivers-and-cuda-toolkit","text":"[Checks in http://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html] $ sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb $ sudo apt-get update $ sudo apt-get install cuda Install CUDA 9.0 $ sudo dpkg -i cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.deb $ sudo apt-key add /var/cuda-repo-9-0-local/7fa2af80.pub $ sudo apt-get update # if you do this it installs latest cuda $ sudo apt-get install cuda [gives may warnings, including system not bootable!!??] Try again usin runfile: $ sudo sh cuda_9.0.176_384.81_linux.run Check CUDA version: $ nvcc -V nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2018 NVIDIA Corporation Built on Sat_Aug_25_21:08:01_CDT_2018 Cuda compilation tools, release 10.0, V10.0.130 Changing symbolic link to /usr/local/cuda: antonio@xlr8 ~ $ nvcc -V nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2017 NVIDIA Corporation Built on Fri_Sep__1_21:08:03_CDT_2017 Cuda compilation tools, release 9.0, V9.0.176","title":"Install CUDA drivers and CUDA Toolkit"},{"location":"unix/installation/#install-intel-compilers","text":"$ ./install_GUI.sh (not as sudo, it will ask later for password) [install it as trial!] [options: disable IA32 - if not 32-bit libraries error, and compiler does not install]","title":"Install Intel compilers"},{"location":"unix/installation/#mpi","text":"OpenMPI: synaptic -> openmpi-bin libopenmpi-dev (selecting the second one also selects the first one) Intel: $ tar xvzf l_mpi_2017.2.174.tgz $ cd l_mpi_2017.2.174.tgz $ sudo ./install.sh [enter defaults] Install location: /opt/intel/parallel_studio_xe_2017.2.050","title":"MPI"},{"location":"unix/installation/#install-pgi-compiler","text":"$ tar xvzf pgilinux-2017-175-x86_64.tar.gz $ sudo ./install [installs PGI CUDA but not MPI] $ cd /opt/pgi [rename or delete license.dat] [copy license.dat provided by CSIC] Edit .bashrc export PGI=/opt/pgi; export PATH=/opt/pgi/linux86-64/17.5/bin:$PATH; export MANPATH=$MANPATH:/opt/pgi/linux86-64/17.5/man; export LM_LICENSE_FILE=$LM_LICENSE_FILE:/opt/pgi/license.dat; Command pgi_license_tool can manage licenses $ sudo ln -s /lib64/ld-linux-x86-64.so.2 /lib64/ld-lsb-x86-64.so.3 $ pgi_license_tool [option 4 = do nothing ]","title":"Install PGI compiler"},{"location":"unix/installation/#install-python","text":"Install python 3.5 with last installer that came with 3.5 by default (Anaconda3-4.2.0) $ bash Anaconda3-4.2.0-Linux-x86_64.sh $ conda update conda $ conda update anaconda $ conda install accelerate","title":"Install Python"},{"location":"unix/installation/#setup-github-for-git","text":"$ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/home/antonio/.ssh/id_rsa): Created directory '/home/antonio/.ssh'. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/antonio/.ssh/id_rsa. Your public key has been saved in /home/antonio/.ssh/id_rsa.pub. The key fingerprint is: SHA256:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXs antonio@xlr8 The key's randomart image is: +---[RSA 2048]----+ | | +----[SHA256]-----+ NO PASSPHRASE!!!! $ cat ~/.ssh/id_rsa.pub [go to Bitbucket web page, Settings > \"SSH keys > Add Key\" and add public key] To check that it worked: $ ssh -T git@bitbucket.org The authenticity of host 'bitbucket.org (104.192.143.2)' can't be established. RSA key fingerprint is SHA256:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'bitbucket.org,104.192.143.2' (RSA) to the list of known hosts. logged in as avillasenorh. You can use git or hg to connect to Bitbucket. Shell access is disabled. $ cd $ mkdir bin scripts devel $ cd devel $ git clone git@bitbucket.org:avillasenorh/noise-processing.git $ git clone git@bitbucket.org:avillasenorh/psim-tools.git $ git clone git@bitbucket.org:avillasenorh/let.git","title":"Setup GitHub for git"},{"location":"unix/installation/#install-locally-fftw","text":"$ cd $ mkdir -p lib/fftw [download fftw-3.3.6-pl2.tar.gz] $ cd $ cd src $ tar xvzf .../fftw-3.3.6-pl2.tar.gz $ cd fftw-3.3.6-pl2 $ ./configure --prefix=/home/antonio/lib/fftw $ make $ make check (basic tests passed) $ make install . . . ---------------------------------------------------------------------- Libraries have been installed in: /home/antonio/lib/fftw/lib If you ever happen to want to link against installed libraries in a given directory, LIBDIR, you must either use libtool, and specify the full pathname of the library, or use the '-LLIBDIR' flag during linking and do at least one of the following: - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable during execution - add LIBDIR to the 'LD_RUN_PATH' environment variable during linking - use the '-Wl,-rpath -Wl,LIBDIR' linker flag - have your system administrator add LIBDIR to '/etc/ld.so.conf' See any operating system documentation about shared libraries for more information, such as the ld(1) and ld.so(8) manual pages. ---------------------------------------------------------------------- . . .","title":"Install locally FFTW"},{"location":"unix/installation/#install-packages-with-synaptic","text":"gcc/gfortran gv GMT5 libncurses-dev for CPS zlib for mseed2sac","title":"Install packages with Synaptic"}]}