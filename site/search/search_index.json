{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my notes on Programming and Software This is a collection of my notes about Programming languages and tools (code formatters, linters, documentation, Makefiles) and software packages. These notes were originally a large number of text files, but have been collected in a single repository and formatted using MkDocs . Antonio Villase\u00f1or (2021).","title":"Welcome to my notes on Programming and Software"},{"location":"#welcome-to-my-notes-on-programming-and-software","text":"This is a collection of my notes about Programming languages and tools (code formatters, linters, documentation, Makefiles) and software packages. These notes were originally a large number of text files, but have been collected in a single repository and formatted using MkDocs . Antonio Villase\u00f1or (2021).","title":"Welcome to my notes on Programming and Software"},{"location":"documentation/doxygen/","text":"Doxygen Doxygen is a tool to generate documentation from source code. It can be installed for macOS using a dmg file provided in the downloads page . Doxygen for C projects If Doxygen has been installed with a dmg file, the executable will be located in the /Applications folder. It is then useful to generate an alias for the executable so it can be run from the command line: $ alias doxygen='/Applications/Doxygen.app/Contents/Resources/doxygen' Go to source directory and generate configuration file: $ cd src/project $ mkdir docs $ doxygen -g project.cfg Edit project.cfg and change the following parameters: 35c35 < PROJECT_NAME = \"C date-time\" --- > PROJECT_NAME = \"My Project\" 47c47 < PROJECT_BRIEF = \"Utilities to handle dates and times using standard C structures and functions\" --- > PROJECT_BRIEF = 61c61 < OUTPUT_DIRECTORY = /Users/antonio/Dropbox/src/tests/C_time/docs --- > OUTPUT_DIRECTORY = 208c208 < JAVADOC_BANNER = YES --- > JAVADOC_BANNER = NO 272c272 < OPTIMIZE_OUTPUT_FOR_C = YES --- > OPTIMIZE_OUTPUT_FOR_C = NO 464c464 < EXTRACT_ALL = YES --- > EXTRACT_ALL = NO To search for source code in subdirectories: RECURSIVE = YES For Python use: OPTIMIZE_OUTPUT_JAVA = YES (instead of OPTIMIZE_OUTPUT_FOR_C) To generate documentation: $ doxygen project.cfg $ open docs/html/index.html Example of documentation of a function: /** ** @brief Print a @c timespec structure into a string using the ISO8601 format ** ** ISO 8061 format is: YYYY-MM-DDTHH:MM:SS.FFFFFFFFF ** ** @param[out] sdate string with date-time in ISO 8601 format ** @param[in] ts timespec structure containing a valid date-time */ Doxygen for Python projects Contrary to the official documentation, \"special commands\" are supported in docstrings. To do this the docstring must start with \"\"\"! (not tested!!!) Example: def area(l, w): \"\"\"! Calculate the area in sqm @param l length @param w width @return area @todo throw error if l<0 or w<0 \"\"\" return l*w","title":"Doxygen"},{"location":"documentation/doxygen/#doxygen","text":"Doxygen is a tool to generate documentation from source code. It can be installed for macOS using a dmg file provided in the downloads page .","title":"Doxygen"},{"location":"documentation/doxygen/#doxygen-for-c-projects","text":"If Doxygen has been installed with a dmg file, the executable will be located in the /Applications folder. It is then useful to generate an alias for the executable so it can be run from the command line: $ alias doxygen='/Applications/Doxygen.app/Contents/Resources/doxygen' Go to source directory and generate configuration file: $ cd src/project $ mkdir docs $ doxygen -g project.cfg Edit project.cfg and change the following parameters: 35c35 < PROJECT_NAME = \"C date-time\" --- > PROJECT_NAME = \"My Project\" 47c47 < PROJECT_BRIEF = \"Utilities to handle dates and times using standard C structures and functions\" --- > PROJECT_BRIEF = 61c61 < OUTPUT_DIRECTORY = /Users/antonio/Dropbox/src/tests/C_time/docs --- > OUTPUT_DIRECTORY = 208c208 < JAVADOC_BANNER = YES --- > JAVADOC_BANNER = NO 272c272 < OPTIMIZE_OUTPUT_FOR_C = YES --- > OPTIMIZE_OUTPUT_FOR_C = NO 464c464 < EXTRACT_ALL = YES --- > EXTRACT_ALL = NO To search for source code in subdirectories: RECURSIVE = YES For Python use: OPTIMIZE_OUTPUT_JAVA = YES (instead of OPTIMIZE_OUTPUT_FOR_C) To generate documentation: $ doxygen project.cfg $ open docs/html/index.html Example of documentation of a function: /** ** @brief Print a @c timespec structure into a string using the ISO8601 format ** ** ISO 8061 format is: YYYY-MM-DDTHH:MM:SS.FFFFFFFFF ** ** @param[out] sdate string with date-time in ISO 8601 format ** @param[in] ts timespec structure containing a valid date-time */","title":"Doxygen for C projects"},{"location":"documentation/doxygen/#doxygen-for-python-projects","text":"Contrary to the official documentation, \"special commands\" are supported in docstrings. To do this the docstring must start with \"\"\"! (not tested!!!) Example: def area(l, w): \"\"\"! Calculate the area in sqm @param l length @param w width @return area @todo throw error if l<0 or w<0 \"\"\" return l*w","title":"Doxygen for Python projects"},{"location":"documentation/mkdocs/","text":"MkDocs MkDocs is a Python package to generate documentation of software projects. It uses Markdown documents to generate the web pages. It is ideal for documenting the use of sofware packages, tutorials, and notes like these. Unlike other documentation packages (to my understanding), it does not extract information from the source code files. Installation $ conda create -n mkdocs python=3.8 $ source activate mkdocs $ pip install mkdocs $ mkdocs --version mkdocs, version 1.1.2 from /Users/antonio/opt/anaconda3/envs/mkdocs/lib/python3.8/site-packages/mkdocs (Python 3.8) Getting started To create a directory for documentation files: $ mkdocs new mkdocs_test INFO - Creating project directory: mkdocs_test INFO - Writing config file: mkdocs_test/mkdocs.yml INFO - Writing initial docs: mkdocs_test/docs/index.md creates a directory called mkdocs_test with the following files: mkdocs.yml docs/ docs/index.md To create documetation files in a directory already exists: $ cd my_project $ mkdocs new . INFO - Writing config file: ./mkdocs.yml INFO - Writing initial docs: ./docs/index.md Originally the mkdocs.yml: Initially the docs/index.md file contains the following: # Welcome to MkDocs For full documentation visit [mkdocs.org](https://www.mkdocs.org). ## Commands * `mkdocs new [dir-name]` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server. * `mkdocs build` - Build the documentation site. * `mkdocs -h` - Print help message and exit. ## Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. To create web page and server $ mkdocs serve & $ open http://127.0.0.1:8000/ This allows to preview web page as you work on it (web page is automatically refreshed) When done, to generate the web site: $ mkdocs build Creates directory \"site\" whith index.html, css, ... $ mkdocs build --clean # removes unused files If you don't want to keep it in git, edit .gitignore and add: site/ Documentation web page can be deployed to GitHub!!! Editing basic files and adding pages Change site_name in mkdocs.yml: site_name: My Docs Add pages $ curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md This adds an \"About\" pull down menu from main page. Specify pull down menus and menu names in mkdocs.yml (add nav: - do not used tabs for indentation!) MkDocs creates menu items from file names in docs/ directory, but it is better to specify it explicitly in mkdocs.yml site_name: C++ test programs and libraries nav: - Home: index.md - About: about.md - Tutorials: tutorials.md - Parameters: parameters.md #theme: readthedocs Each section can have subsections. Names (section and Markdown files) can be between single quotes. Deploy documentation to GitHub In GitHub create a repository PStomo_documentation and initialize it with a README Clone repository into local machine: $ git clone https://github.com/avillasenorh/PStomo_documentation.git Copy mkdocs.yml and docs/ to local repository $ cp -r mkdocs.yml docs ..../PStomo_documentation/. Generate site $ cd PStomo_documentation $ mkdocs build [--clean] $ git add -A $ git commit -m \"Initial build\" $ git push $ mkdocs gh-deploy Creates web site: https://avillasenorh.github.io/PStomo_documentation/ Add math equations to mkdocs $ pip install python-markdown-math Edit mkdocs.yml: site_name: My Docs extra_javascript: - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML markdown_extensions: - mdx_math Test web page editing docs/index.md: # MathJax Test Page When \\(a \\ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ Produces the following output: When a \\ne 0 , there are two solutions to ax^2 + bx + c = 0 and they are x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. Resources The best MkDocs plugins and customizations Mermaid diagrams using text and code ( GitHub ) Material for MkDocs MkDocs is the Perfect Open Source Documentation Software MkDocs Wiki MkDocs GitBook theme MkDocs plugins mkdocstrings","title":"MkDocs"},{"location":"documentation/mkdocs/#mkdocs","text":"MkDocs is a Python package to generate documentation of software projects. It uses Markdown documents to generate the web pages. It is ideal for documenting the use of sofware packages, tutorials, and notes like these. Unlike other documentation packages (to my understanding), it does not extract information from the source code files.","title":"MkDocs"},{"location":"documentation/mkdocs/#installation","text":"$ conda create -n mkdocs python=3.8 $ source activate mkdocs $ pip install mkdocs $ mkdocs --version mkdocs, version 1.1.2 from /Users/antonio/opt/anaconda3/envs/mkdocs/lib/python3.8/site-packages/mkdocs (Python 3.8)","title":"Installation"},{"location":"documentation/mkdocs/#getting-started","text":"To create a directory for documentation files: $ mkdocs new mkdocs_test INFO - Creating project directory: mkdocs_test INFO - Writing config file: mkdocs_test/mkdocs.yml INFO - Writing initial docs: mkdocs_test/docs/index.md creates a directory called mkdocs_test with the following files: mkdocs.yml docs/ docs/index.md To create documetation files in a directory already exists: $ cd my_project $ mkdocs new . INFO - Writing config file: ./mkdocs.yml INFO - Writing initial docs: ./docs/index.md Originally the mkdocs.yml: Initially the docs/index.md file contains the following: # Welcome to MkDocs For full documentation visit [mkdocs.org](https://www.mkdocs.org). ## Commands * `mkdocs new [dir-name]` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server. * `mkdocs build` - Build the documentation site. * `mkdocs -h` - Print help message and exit. ## Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Getting started"},{"location":"documentation/mkdocs/#to-create-web-page-and-server","text":"$ mkdocs serve & $ open http://127.0.0.1:8000/ This allows to preview web page as you work on it (web page is automatically refreshed) When done, to generate the web site: $ mkdocs build Creates directory \"site\" whith index.html, css, ... $ mkdocs build --clean # removes unused files If you don't want to keep it in git, edit .gitignore and add: site/ Documentation web page can be deployed to GitHub!!!","title":"To create web page and server"},{"location":"documentation/mkdocs/#editing-basic-files-and-adding-pages","text":"Change site_name in mkdocs.yml: site_name: My Docs Add pages $ curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md This adds an \"About\" pull down menu from main page. Specify pull down menus and menu names in mkdocs.yml (add nav: - do not used tabs for indentation!) MkDocs creates menu items from file names in docs/ directory, but it is better to specify it explicitly in mkdocs.yml site_name: C++ test programs and libraries nav: - Home: index.md - About: about.md - Tutorials: tutorials.md - Parameters: parameters.md #theme: readthedocs Each section can have subsections. Names (section and Markdown files) can be between single quotes.","title":"Editing basic files and adding pages"},{"location":"documentation/mkdocs/#deploy-documentation-to-github","text":"In GitHub create a repository PStomo_documentation and initialize it with a README Clone repository into local machine: $ git clone https://github.com/avillasenorh/PStomo_documentation.git Copy mkdocs.yml and docs/ to local repository $ cp -r mkdocs.yml docs ..../PStomo_documentation/. Generate site $ cd PStomo_documentation $ mkdocs build [--clean] $ git add -A $ git commit -m \"Initial build\" $ git push $ mkdocs gh-deploy Creates web site: https://avillasenorh.github.io/PStomo_documentation/","title":"Deploy documentation to GitHub"},{"location":"documentation/mkdocs/#add-math-equations-to-mkdocs","text":"$ pip install python-markdown-math Edit mkdocs.yml: site_name: My Docs extra_javascript: - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML markdown_extensions: - mdx_math Test web page editing docs/index.md: # MathJax Test Page When \\(a \\ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ Produces the following output: When a \\ne 0 , there are two solutions to ax^2 + bx + c = 0 and they are x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.","title":"Add math equations to mkdocs"},{"location":"documentation/mkdocs/#resources","text":"The best MkDocs plugins and customizations Mermaid diagrams using text and code ( GitHub ) Material for MkDocs MkDocs is the Perfect Open Source Documentation Software MkDocs Wiki MkDocs GitBook theme MkDocs plugins mkdocstrings","title":"Resources"},{"location":"gmt/gmt5/","text":"GMT5 Recipes for GMT5 Initial configuration $ gmt defaults > gmt.conf Reduce fonts sizes (defaults too large) # # FONT Parameters # FONT_ANNOT_PRIMARY = 10p,Helvetica,black FONT_ANNOT_SECONDARY = 12p,Helvetica,black FONT_LABEL = 14p,Helvetica,black FONT_LOGO = 8p,Helvetica,black FONT_TITLE = 14p,Helvetica,black Set map frame to plain MAP_FRAME_TYPE = plain Specifying line sytle Line style is specified with the -W option: -Wwidth,color,style Values of width can be: thinnest (0.25p), thinner (0.5p), thin (0.75p), or thick (1p). color can be specified with name or R/G/B style : dotted or . dashed or - .- string:offset (e.g. 4_8_5_8:2p ) pstext format $ gmt pstext -J -R -F+f12p,Helvetica,black+jLB -W1.5p -G255 -K -O f: 12p font size Helvetica font black color j: theJustify LB (left bottom) a: angle -W1.5p = outline -Gwhite (255) = box background -D0.3/0.3 = add offset from x,y coordinates (e.g. lower left corner) psscale format $ gmt psscale -Cvp.cpt -Dx8c/-1c+w12c/0.5c+jTC+h+e -Bx+l\"label\" x8c/-1c = plot scale at fixed plot coordinates 8c/1c w12c/0.5c = scale size is 12c long by 0.5c wide jTC = justification is top-center h = plot a horizontal scale e = plot end triangles Close a GMT Postscript file $ gmt psxy -R -J -T -O >> $psfile Set label with decimal degrees gmt set FORMAT_GEO_MAP ddd.xF New label format -B[p|s][x|y|z][a|f|g]<tick>[m][l|p] -B[p|s][x|y|z][+l<label>][+p<prefix>][+u<unit>] -B[<axes>][+b][+g<fill>][+o<lon>/<lat>][+t<title>] Examples: -Bxa${xa}f${xt}g${xg} -Bya${ya}f${yt}g${yg}${axis} -BWeSn+t\"${label}\" -Bxa${xa}f${xt}g${xg}+l\"x label\" -Bya${ya}f${yt}g${yg}+l\"y label\" -BWeSn+t\"${label}\" Make water semitransparent gmt pscoast ... -S200 -t30 Then must convert to pdf in order to see transparency Pens, transparency, etc (not tested!!!!) -W0.25p+s : interpolates curve with splines! -t : transparency for this layer (command?). Only visible in PDF format => use psconvert 0 = opaque 100 = fully transparent chech PS_TRANSPARENCY in gmt.def color or fill specifications may append @transparency to change the PDF transparency level Convert shapefile to GMT Directly: $ org2ogr -f \u201cGMT\u201d output.gmt input.shp In two steps (in case direct conversion gives an error, e.g. Vectors not supported) $ ogr2ogr -f \u201cKML\u201d example.kml example.shp $ org2ogr -f \u201cGMT\u201d example.gmt example.kml gmt2kml Simple symbols: awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Gfred -Fs -I$icon -T\"Title\" > stations.kml Symbols with labels: awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Gfred -Fs -N- -I$icon -T\"Title\" > stations.kml awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Fs -Sc1.5 -Gfgreen -I$icon -N- -Sn0.8 -Gnpink -T\"Title\" > stations.kml -Fs -Sc1.5 -Gfgreen: plot symbol (x,y in file), size and fill -N- -Sn0.75 -Gngray: label in 3rd column, size (relative to 1), fill color -Gn- : turn off labels [works?] -Fs = symbol : x y [label] -Fe = event : x y [label] time -Ft = timespan : x y [label] tstart tstop/\"NaN\" -Fl = line -Fp = polygon -Fw = wiggle For stations/OBSs one could use -As0.0 to get altitude \"Clamped to sea floor/ground\" [works?] (see https://developers.google.com/kml/documentation/altitudemode) For Clamped to sea floor to work must change: <kml xmlns=\"http://www.opengis.net/kml/2.2\"> with: <kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\"> To get rid of subfolders in kml file, comment or delete everything between and first : </Style> <Folder> <name>stdin</name> <Folder> <name>Point Set 0</name> <Placemark> and also closing tags List of Google Maps icons: triangle donut square open-diamond polygon star target volcano earthquake placemark_circle placemark_circle_highlight placemark_square placemark_square_highlight","title":"GMT5"},{"location":"gmt/gmt5/#gmt5","text":"Recipes for GMT5","title":"GMT5"},{"location":"gmt/gmt5/#initial-configuration","text":"$ gmt defaults > gmt.conf Reduce fonts sizes (defaults too large) # # FONT Parameters # FONT_ANNOT_PRIMARY = 10p,Helvetica,black FONT_ANNOT_SECONDARY = 12p,Helvetica,black FONT_LABEL = 14p,Helvetica,black FONT_LOGO = 8p,Helvetica,black FONT_TITLE = 14p,Helvetica,black Set map frame to plain MAP_FRAME_TYPE = plain","title":"Initial configuration"},{"location":"gmt/gmt5/#specifying-line-sytle","text":"Line style is specified with the -W option: -Wwidth,color,style Values of width can be: thinnest (0.25p), thinner (0.5p), thin (0.75p), or thick (1p). color can be specified with name or R/G/B style : dotted or . dashed or - .- string:offset (e.g. 4_8_5_8:2p )","title":"Specifying line sytle"},{"location":"gmt/gmt5/#pstext-format","text":"$ gmt pstext -J -R -F+f12p,Helvetica,black+jLB -W1.5p -G255 -K -O f: 12p font size Helvetica font black color j: theJustify LB (left bottom) a: angle -W1.5p = outline -Gwhite (255) = box background -D0.3/0.3 = add offset from x,y coordinates (e.g. lower left corner)","title":"pstext format"},{"location":"gmt/gmt5/#psscale-format","text":"$ gmt psscale -Cvp.cpt -Dx8c/-1c+w12c/0.5c+jTC+h+e -Bx+l\"label\" x8c/-1c = plot scale at fixed plot coordinates 8c/1c w12c/0.5c = scale size is 12c long by 0.5c wide jTC = justification is top-center h = plot a horizontal scale e = plot end triangles","title":"psscale format"},{"location":"gmt/gmt5/#close-a-gmt-postscript-file","text":"$ gmt psxy -R -J -T -O >> $psfile","title":"Close a GMT Postscript file"},{"location":"gmt/gmt5/#set-label-with-decimal-degrees","text":"gmt set FORMAT_GEO_MAP ddd.xF","title":"Set label with decimal degrees"},{"location":"gmt/gmt5/#new-label-format","text":"-B[p|s][x|y|z][a|f|g]<tick>[m][l|p] -B[p|s][x|y|z][+l<label>][+p<prefix>][+u<unit>] -B[<axes>][+b][+g<fill>][+o<lon>/<lat>][+t<title>] Examples: -Bxa${xa}f${xt}g${xg} -Bya${ya}f${yt}g${yg}${axis} -BWeSn+t\"${label}\" -Bxa${xa}f${xt}g${xg}+l\"x label\" -Bya${ya}f${yt}g${yg}+l\"y label\" -BWeSn+t\"${label}\"","title":"New label format"},{"location":"gmt/gmt5/#make-water-semitransparent","text":"gmt pscoast ... -S200 -t30 Then must convert to pdf in order to see transparency","title":"Make water semitransparent"},{"location":"gmt/gmt5/#pens-transparency-etc-not-tested","text":"-W0.25p+s : interpolates curve with splines! -t : transparency for this layer (command?). Only visible in PDF format => use psconvert 0 = opaque 100 = fully transparent chech PS_TRANSPARENCY in gmt.def color or fill specifications may append @transparency to change the PDF transparency level","title":"Pens, transparency, etc (not tested!!!!)"},{"location":"gmt/gmt5/#convert-shapefile-to-gmt","text":"Directly: $ org2ogr -f \u201cGMT\u201d output.gmt input.shp In two steps (in case direct conversion gives an error, e.g. Vectors not supported) $ ogr2ogr -f \u201cKML\u201d example.kml example.shp $ org2ogr -f \u201cGMT\u201d example.gmt example.kml","title":"Convert shapefile to GMT"},{"location":"gmt/gmt5/#gmt2kml","text":"Simple symbols: awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Gfred -Fs -I$icon -T\"Title\" > stations.kml Symbols with labels: awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Gfred -Fs -N- -I$icon -T\"Title\" > stations.kml awk '{print $3, $2}' stafile | \\ gmt gmt2kml -Fs -Sc1.5 -Gfgreen -I$icon -N- -Sn0.8 -Gnpink -T\"Title\" > stations.kml -Fs -Sc1.5 -Gfgreen: plot symbol (x,y in file), size and fill -N- -Sn0.75 -Gngray: label in 3rd column, size (relative to 1), fill color -Gn- : turn off labels [works?] -Fs = symbol : x y [label] -Fe = event : x y [label] time -Ft = timespan : x y [label] tstart tstop/\"NaN\" -Fl = line -Fp = polygon -Fw = wiggle For stations/OBSs one could use -As0.0 to get altitude \"Clamped to sea floor/ground\" [works?] (see https://developers.google.com/kml/documentation/altitudemode) For Clamped to sea floor to work must change: <kml xmlns=\"http://www.opengis.net/kml/2.2\"> with: <kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\"> To get rid of subfolders in kml file, comment or delete everything between and first : </Style> <Folder> <name>stdin</name> <Folder> <name>Point Set 0</name> <Placemark> and also closing tags List of Google Maps icons: triangle donut square open-diamond polygon star target volcano earthquake placemark_circle placemark_circle_highlight placemark_square placemark_square_highlight","title":"gmt2kml"},{"location":"gmt/gmt6/","text":"GMT6 Differences to previous versions Modern mode Default: use .nc extension for netCDF grids instead of old-style native grid format .grd initial configuration $ gmt defaults -D > ~/gmt.conf Reduce fonts sizes (defaults too large) # # FONT Parameters # FONT_ANNOT_PRIMARY = 10p,Helvetica,black FONT_ANNOT_SECONDARY = 12p,Helvetica,black FONT_LABEL = 14p,Helvetica,black FONT_TITLE = 14p,Helvetica,black Set map frame to plain MAP_FRAME_TYPE = plain Earth Relief Grids GMT6 global earth relief grids page . To extract topography/bathymetry of a region: $ gmt grdcut @earth_relief_rru -Rlon1/lon2/lat1/lat2 -Goutput.nc u = s for seconds, m for minutes, d for degrees 01s = SRTM1S (30 m) 03s = SRTM3S (90 m) 15s = SRTM15+V2 (Tozer et al., Earth Space Sci., 2019) (~450 m) The rest are downsampled versions of 15s 30s = ~ 1 km 1m = 1.8 km With grids >= 15s the global file is downloaded to ~/.gmt/server . With grids 03s and 01s, only the tiles inside the region are donwloaded. To delete all the data in ~/.gmt/server : $ gmt clear data All global grids are gridline-registered except the 15s that is pixel-registered (check!!) File Formats GMT6 file formats page . Grid files Default = netCDF (.nc extension)","title":"GMT6"},{"location":"gmt/gmt6/#gmt6","text":"","title":"GMT6"},{"location":"gmt/gmt6/#differences-to-previous-versions","text":"Modern mode Default: use .nc extension for netCDF grids instead of old-style native grid format .grd","title":"Differences to previous versions"},{"location":"gmt/gmt6/#initial-configuration","text":"$ gmt defaults -D > ~/gmt.conf Reduce fonts sizes (defaults too large) # # FONT Parameters # FONT_ANNOT_PRIMARY = 10p,Helvetica,black FONT_ANNOT_SECONDARY = 12p,Helvetica,black FONT_LABEL = 14p,Helvetica,black FONT_TITLE = 14p,Helvetica,black Set map frame to plain MAP_FRAME_TYPE = plain","title":"initial configuration"},{"location":"gmt/gmt6/#earth-relief-grids","text":"GMT6 global earth relief grids page . To extract topography/bathymetry of a region: $ gmt grdcut @earth_relief_rru -Rlon1/lon2/lat1/lat2 -Goutput.nc u = s for seconds, m for minutes, d for degrees 01s = SRTM1S (30 m) 03s = SRTM3S (90 m) 15s = SRTM15+V2 (Tozer et al., Earth Space Sci., 2019) (~450 m) The rest are downsampled versions of 15s 30s = ~ 1 km 1m = 1.8 km With grids >= 15s the global file is downloaded to ~/.gmt/server . With grids 03s and 01s, only the tiles inside the region are donwloaded. To delete all the data in ~/.gmt/server : $ gmt clear data All global grids are gridline-registered except the 15s that is pixel-registered (check!!)","title":"Earth Relief Grids"},{"location":"gmt/gmt6/#file-formats","text":"GMT6 file formats page .","title":"File Formats"},{"location":"gmt/gmt6/#grid-files","text":"Default = netCDF (.nc extension)","title":"Grid files"},{"location":"gmt/pygmt/","text":"pyGMT Common usage import pygmt fig = pygmt.Figure() fig.coast(region='g', projection='R20/8i', shorelines=True, water='ligthblue', land='gray', frame=True, resolution='i') fig.show() # for notebooks fig.show(method='external') # output in Preview How to set plotting region: region = [45, 55, 135, 145] # rectangular region region = 'g' # globe region = 'EG' # country (Egypt) fig.plot(x=, y=, style='a0.2i', color='red', pen='black', label=f'red') frame=True frame=0 # also False? frame='a5f1' If the data are labelled: fig.legend() # plots a legend similar to Matplotlib Pass arguments to a Figure method KWARGS = dict(grid='@earth_relief_10m', region='g', projection='R-130/5i', frame=0, ) fig = pygmt.Figure() fig.grdimage(**KWARGS) fig.grdimage(shading=True, **KWARGS) grdimage can also use an object to plot (not necessarily a file name): import xarray as xr data = xr.DataArray(....) fig.grdimage(data, fname=True, ..., cmap='inferno', Q=True) # Q=True in NaN make it transparent fig.colorbar(frame='+l\"velocity\"') Modules not available in pyGMT: with pygmt.clib.Session() as session: session.call_module('meca', f'all the options here') there is a trick to create a temporary file, use it and delete it. with pygmt.helpers.GMTTempFile() as temp_file: with open(temp_file.name, 'w') as f: f.write('vaules') with pygmt.clib.... uset temp_file.name in arguments to session.call_module(....)","title":"pyGMT"},{"location":"gmt/pygmt/#pygmt","text":"","title":"pyGMT"},{"location":"gmt/pygmt/#common-usage","text":"import pygmt fig = pygmt.Figure() fig.coast(region='g', projection='R20/8i', shorelines=True, water='ligthblue', land='gray', frame=True, resolution='i') fig.show() # for notebooks fig.show(method='external') # output in Preview How to set plotting region: region = [45, 55, 135, 145] # rectangular region region = 'g' # globe region = 'EG' # country (Egypt) fig.plot(x=, y=, style='a0.2i', color='red', pen='black', label=f'red') frame=True frame=0 # also False? frame='a5f1' If the data are labelled: fig.legend() # plots a legend similar to Matplotlib","title":"Common usage"},{"location":"gmt/pygmt/#pass-arguments-to-a-figure-method","text":"KWARGS = dict(grid='@earth_relief_10m', region='g', projection='R-130/5i', frame=0, ) fig = pygmt.Figure() fig.grdimage(**KWARGS) fig.grdimage(shading=True, **KWARGS) grdimage can also use an object to plot (not necessarily a file name): import xarray as xr data = xr.DataArray(....) fig.grdimage(data, fname=True, ..., cmap='inferno', Q=True) # Q=True in NaN make it transparent fig.colorbar(frame='+l\"velocity\"')","title":"Pass arguments to a Figure method"},{"location":"gmt/pygmt/#modules-not-available-in-pygmt","text":"with pygmt.clib.Session() as session: session.call_module('meca', f'all the options here') there is a trick to create a temporary file, use it and delete it. with pygmt.helpers.GMTTempFile() as temp_file: with open(temp_file.name, 'w') as f: f.write('vaules') with pygmt.clib.... uset temp_file.name in arguments to session.call_module(....)","title":"Modules not available in pyGMT:"},{"location":"seismology/data_requests/","text":"Data Requests Mass Downloaders Stream2segment (GFZ) https://github.com/rizac/stream2segment/blob/master/README.md Zaccarelli, R., Bindi, D., Strollo, A., Quinteros, J., & Cotton, F. (2019). Stream2segment: An Open\u2010Source Tool for Downloading, Processing, and Visualizing Massive Event\u2010Based Seismic Waveform Datasets. Seismological Research Letters, 90(5), 2028. http://doi.org/10.1785/0220180314. obspyDMT (Oxford) https://github.com/kasra-hosseini/obspyDMT Hosseini, K., & Sigloch, K. (2017). ObspyDMT: a Python toolbox for retrieving and processing large seismological data sets. Solid Earth, 8(5), 1047\u20131070. http://doi.org/10.5194/se-8-1047-2017 ObsPy mass_downloader module https://docs.obspy.org/packages/autogen/obspy.clients.fdsn.mass_downloader.html obspy.clients.fdsn - FDSN Web service client for ObsPy https://docs.obspy.org/packages/obspy.clients.fdsn.html Good for complex or larger queries: obspy.clients.fdsn.mass_downloader (for multiple data centers) FDSNWS Using web services: FDSNWS & IRISWS Station data (FDSNWS) http://service.iris.edu/fdsnws/station/1/query?... Type http_request_string in a web browser or use wget or curl from command line $ wget -O output_file \"http_request_string\" (quotation marks are important to avoid that the shell interprets special characters) Use HTTP POST All of the parameters that can be submitted with the GET method are allowed in POST with the following exceptions: startbefore, endbefore, startafter, endafter $ wget --post-file=post_request_file -O output_file http://service.iris.edu/fdsnws/station/1/query Example of post_request_file: level=channel format=text TA A25A -- BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 IU ANMO * BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 IU ANMO 10 HHZ 2010-03-25T00:00:00 2010-04-01T00:00:00 II KURK 00 BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 In general: parameter=<value> parameter=<value> parameter=<value> <network> <station> <location> <channel> <starttime> <endtime> <network> <station> <location> <channel> <starttime> <endtime> ... Event data (FDSNWS) http://service.iris.edu/fdsnws/event/1/query?... This service will not be offered long term, so it is better to go directly to ISC/NEIC Waveform data (FDSNWS) http://service.iris.edu/fdsnws/dataselect/1/query?... Same options: type URL in web browser (small requests) wget/curl (automated or scripted requests) HTTP POST (automated or scripted requests) quality= minimumlength= longestonly= ... Waveform data (IRISWS) http://service.iris.edu/irisws/timeseries/1/query?... accepts HTTP POST? Signal processing options: high, low and band-pass filter remove mean value scaling by constant value deconvolution of instrument response (with frequency limits and unit conversion) differentiation and integration decimation to lower sample rates good for complex or large queries Other IRIS web services fedcatalog : A service for federating requests for channel metadata across multiple data centers syngine : A service for synthetic seismograms timeseriesplot : A charting webservice offering timeseries graphic display in single-line or helicorder styles rotation : rotate waveform data into alternate coordinate system sacpz : instrument response information (per channel) resp : channel response information evalresp : instrument response information evaluated from IRIS metadata virtualnetwork : list of stations in a virtual network traveltime : travel times and ray parameters for seismic phases using a 1-D spherical earth model flinnengdahl : a Flinn-Engdahl region code or name for a latitude, longitude pair distaz : distance, azimuth and back-azimuth between two locations metadatachange : changes made to SEED metadata Other tools JWEED JWEED and other IRIS software use web services Fetch scripts FetchData-2016.089.txt FetchEvent-2014.340.txt FetchMetadata-2014.316.txt FetchSyn-2016.007.txt Advantages: access to other data centers (see -F option) can read from BREQ_FAST file","title":"Data requests"},{"location":"seismology/data_requests/#data-requests","text":"","title":"Data Requests"},{"location":"seismology/data_requests/#mass-downloaders","text":"","title":"Mass Downloaders"},{"location":"seismology/data_requests/#stream2segment-gfz","text":"https://github.com/rizac/stream2segment/blob/master/README.md Zaccarelli, R., Bindi, D., Strollo, A., Quinteros, J., & Cotton, F. (2019). Stream2segment: An Open\u2010Source Tool for Downloading, Processing, and Visualizing Massive Event\u2010Based Seismic Waveform Datasets. Seismological Research Letters, 90(5), 2028. http://doi.org/10.1785/0220180314.","title":"Stream2segment (GFZ)"},{"location":"seismology/data_requests/#obspydmt-oxford","text":"https://github.com/kasra-hosseini/obspyDMT Hosseini, K., & Sigloch, K. (2017). ObspyDMT: a Python toolbox for retrieving and processing large seismological data sets. Solid Earth, 8(5), 1047\u20131070. http://doi.org/10.5194/se-8-1047-2017","title":"obspyDMT (Oxford)"},{"location":"seismology/data_requests/#obspy-mass_downloader-module","text":"https://docs.obspy.org/packages/autogen/obspy.clients.fdsn.mass_downloader.html obspy.clients.fdsn - FDSN Web service client for ObsPy https://docs.obspy.org/packages/obspy.clients.fdsn.html Good for complex or larger queries: obspy.clients.fdsn.mass_downloader (for multiple data centers)","title":"ObsPy mass_downloader module"},{"location":"seismology/data_requests/#fdsnws","text":"Using web services: FDSNWS & IRISWS","title":"FDSNWS"},{"location":"seismology/data_requests/#station-data-fdsnws","text":"http://service.iris.edu/fdsnws/station/1/query?... Type http_request_string in a web browser or use wget or curl from command line $ wget -O output_file \"http_request_string\" (quotation marks are important to avoid that the shell interprets special characters) Use HTTP POST All of the parameters that can be submitted with the GET method are allowed in POST with the following exceptions: startbefore, endbefore, startafter, endafter $ wget --post-file=post_request_file -O output_file http://service.iris.edu/fdsnws/station/1/query Example of post_request_file: level=channel format=text TA A25A -- BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 IU ANMO * BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 IU ANMO 10 HHZ 2010-03-25T00:00:00 2010-04-01T00:00:00 II KURK 00 BH? 2010-03-25T00:00:00 2010-04-01T00:00:00 In general: parameter=<value> parameter=<value> parameter=<value> <network> <station> <location> <channel> <starttime> <endtime> <network> <station> <location> <channel> <starttime> <endtime> ...","title":"Station data (FDSNWS)"},{"location":"seismology/data_requests/#event-data-fdsnws","text":"http://service.iris.edu/fdsnws/event/1/query?... This service will not be offered long term, so it is better to go directly to ISC/NEIC","title":"Event data (FDSNWS)"},{"location":"seismology/data_requests/#waveform-data-fdsnws","text":"http://service.iris.edu/fdsnws/dataselect/1/query?... Same options: type URL in web browser (small requests) wget/curl (automated or scripted requests) HTTP POST (automated or scripted requests) quality= minimumlength= longestonly= ...","title":"Waveform data (FDSNWS)"},{"location":"seismology/data_requests/#waveform-data-irisws","text":"http://service.iris.edu/irisws/timeseries/1/query?... accepts HTTP POST? Signal processing options: high, low and band-pass filter remove mean value scaling by constant value deconvolution of instrument response (with frequency limits and unit conversion) differentiation and integration decimation to lower sample rates good for complex or large queries","title":"Waveform data (IRISWS)"},{"location":"seismology/data_requests/#other-iris-web-services","text":"fedcatalog : A service for federating requests for channel metadata across multiple data centers syngine : A service for synthetic seismograms timeseriesplot : A charting webservice offering timeseries graphic display in single-line or helicorder styles rotation : rotate waveform data into alternate coordinate system sacpz : instrument response information (per channel) resp : channel response information evalresp : instrument response information evaluated from IRIS metadata virtualnetwork : list of stations in a virtual network traveltime : travel times and ray parameters for seismic phases using a 1-D spherical earth model flinnengdahl : a Flinn-Engdahl region code or name for a latitude, longitude pair distaz : distance, azimuth and back-azimuth between two locations metadatachange : changes made to SEED metadata","title":"Other IRIS web services"},{"location":"seismology/data_requests/#other-tools","text":"","title":"Other tools"},{"location":"seismology/data_requests/#jweed","text":"JWEED and other IRIS software use web services","title":"JWEED"},{"location":"seismology/data_requests/#fetch-scripts","text":"FetchData-2016.089.txt FetchEvent-2014.340.txt FetchMetadata-2014.316.txt FetchSyn-2016.007.txt Advantages: access to other data centers (see -F option) can read from BREQ_FAST file","title":"Fetch scripts"}]}